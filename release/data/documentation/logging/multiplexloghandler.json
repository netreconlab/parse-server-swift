{
  "abstract" : [
    {
      "text" : "A pseudo-",
      "type" : "text"
    },
    {
      "code" : "LogHandler",
      "type" : "codeVoice"
    },
    {
      "text" : " that can be used to send messages to multiple other ",
      "type" : "text"
    },
    {
      "code" : "LogHandler",
      "type" : "codeVoice"
    },
    {
      "text" : "s.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/Logging"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/Logging\/MultiplexLogHandler"
  },
  "kind" : "symbol",
  "metadata" : {
    "externalID" : "s:7Logging19MultiplexLogHandlerV",
    "fragments" : [
      {
        "kind" : "keyword",
        "text" : "struct"
      },
      {
        "kind" : "text",
        "text" : " "
      },
      {
        "kind" : "identifier",
        "text" : "MultiplexLogHandler"
      }
    ],
    "modules" : [
      {
        "name" : "Logging"
      }
    ],
    "navigatorTitle" : [
      {
        "kind" : "identifier",
        "text" : "MultiplexLogHandler"
      }
    ],
    "role" : "symbol",
    "roleHeading" : "Structure",
    "symbolKind" : "struct",
    "title" : "MultiplexLogHandler"
  },
  "primaryContentSections" : [
    {
      "declarations" : [
        {
          "languages" : [
            "swift"
          ],
          "platforms" : [
            "macOS"
          ],
          "tokens" : [
            {
              "kind" : "keyword",
              "text" : "struct"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "identifier",
              "text" : "MultiplexLogHandler"
            }
          ]
        }
      ],
      "kind" : "declarations"
    },
    {
      "content" : [
        {
          "anchor" : "Effective-LoggerLevel",
          "level" : 3,
          "text" : "Effective Logger.Level",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "When first initialized the multiplex log handlers’ log level is automatically set to the minimum of all the",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "passed in log handlers. This ensures that each of the handlers will be able to log at their appropriate level",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "any log events they might be interested in.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Example:",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If log handler ",
              "type" : "text"
            },
            {
              "code" : "A",
              "type" : "codeVoice"
            },
            {
              "text" : " is logging at ",
              "type" : "text"
            },
            {
              "code" : ".debug",
              "type" : "codeVoice"
            },
            {
              "text" : " level, and log handler ",
              "type" : "text"
            },
            {
              "code" : "B",
              "type" : "codeVoice"
            },
            {
              "text" : " is logging at ",
              "type" : "text"
            },
            {
              "code" : ".info",
              "type" : "codeVoice"
            },
            {
              "text" : " level, the constructed",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "MultiplexLogHandler([A, B])",
              "type" : "codeVoice"
            },
            {
              "text" : "’s effective log level will be set to ",
              "type" : "text"
            },
            {
              "code" : ".debug",
              "type" : "codeVoice"
            },
            {
              "text" : ", meaning that debug messages will be",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "handled by this handler, while only logged by the underlying ",
              "type" : "text"
            },
            {
              "code" : "A",
              "type" : "codeVoice"
            },
            {
              "text" : " log handler (since ",
              "type" : "text"
            },
            {
              "code" : "B",
              "type" : "codeVoice"
            },
            {
              "text" : "’s log level is ",
              "type" : "text"
            },
            {
              "code" : ".info",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and thus it would not actually log that log message).",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "If the log level is ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "set",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " on a ",
              "type" : "text"
            },
            {
              "code" : "Logger",
              "type" : "codeVoice"
            },
            {
              "text" : " backed by an ",
              "type" : "text"
            },
            {
              "code" : "MultiplexLogHandler",
              "type" : "codeVoice"
            },
            {
              "text" : " the log level will apply to ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "all",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "underlying log handlers, allowing a logger to still select at what level it wants to log regardless of if the underlying",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "handler is a multiplex or a normal one. If for some reason one might want to not allow changing a log level of a specific",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "handler passed into the multiplex log handler, this is possible by wrapping it in a handler which ignores any log level changes.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Effective-LoggerMetadata",
          "level" : 3,
          "text" : "Effective Logger.Metadata",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Since a ",
              "type" : "text"
            },
            {
              "code" : "MultiplexLogHandler",
              "type" : "codeVoice"
            },
            {
              "text" : " is a combination of multiple log handlers, the handling of metadata can be non-obvious.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example, the underlying log handlers may have metadata of their own set before they are used to initialize the multiplex log handler.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The multiplex log handler acts purely as proxy and does not make any changes to underlying handler metadata other than",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "proxying writes that users made on a ",
              "type" : "text"
            },
            {
              "code" : "Logger",
              "type" : "codeVoice"
            },
            {
              "text" : " instance backed by this handler.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Setting metadata is always proxied through to ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "all",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " underlying handlers, meaning that if a modification like",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "logger[metadataKey: \"x\"] = \"y\"",
              "type" : "codeVoice"
            },
            {
              "text" : " is made, all underlying log handlers that this multiplex handler was initiated with",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "will observe this change.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Reading metadata from the multiplex log handler MAY need to pick one of conflicting values if the underlying log handlers",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "were already initiated with some metadata before passing them into the multiplex handler. The multiplex handler uses",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the order in which the handlers were passed in during its initialization as a priority indicator - the first handler’s",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "values are more important than the next handlers values, etc.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Example:",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If the multiplex log handler was initiated with two handlers like this: ",
              "type" : "text"
            },
            {
              "code" : "MultiplexLogHandler([handler1, handler2])",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The handlers each have some already set metadata: ",
              "type" : "text"
            },
            {
              "code" : "handler1",
              "type" : "codeVoice"
            },
            {
              "text" : " has metadata values for keys ",
              "type" : "text"
            },
            {
              "code" : "one",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "all",
              "type" : "codeVoice"
            },
            {
              "text" : ", and ",
              "type" : "text"
            },
            {
              "code" : "handler2",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "has values for keys ",
              "type" : "text"
            },
            {
              "code" : "two",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "all",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "A query through the multiplex log handler the key ",
              "type" : "text"
            },
            {
              "code" : "one",
              "type" : "codeVoice"
            },
            {
              "text" : " naturally returns ",
              "type" : "text"
            },
            {
              "code" : "handler1",
              "type" : "codeVoice"
            },
            {
              "text" : "’s value, and a query for ",
              "type" : "text"
            },
            {
              "code" : "two",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "naturally returns ",
              "type" : "text"
            },
            {
              "code" : "handler2",
              "type" : "codeVoice"
            },
            {
              "text" : "’s value. Querying for the key ",
              "type" : "text"
            },
            {
              "code" : "all",
              "type" : "codeVoice"
            },
            {
              "text" : " will return ",
              "type" : "text"
            },
            {
              "code" : "handler1",
              "type" : "codeVoice"
            },
            {
              "text" : "’s value, as that handler was indicated",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "“more important” than the second handler. The same rule applies when querying for the ",
              "type" : "text"
            },
            {
              "code" : "metadata",
              "type" : "codeVoice"
            },
            {
              "text" : " property of the",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "multiplex log handler - it constructs ",
              "type" : "text"
            },
            {
              "code" : "Metadata",
              "type" : "codeVoice"
            },
            {
              "text" : " uniquing values.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        }
      ],
      "kind" : "content"
    }
  ],
  "relationshipsSections" : [
    {
      "identifiers" : [
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/Logging\/LogHandler",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/s8SendableP"
      ],
      "kind" : "relationships",
      "title" : "Conforms To",
      "type" : "conformsTo"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "topicSections" : [
    {
      "anchor" : "Initializers",
      "generated" : true,
      "identifiers" : [
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/Logging\/MultiplexLogHandler\/init(_:)",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/Logging\/MultiplexLogHandler\/init(_:metadataProvider:)"
      ],
      "title" : "Initializers"
    },
    {
      "anchor" : "Instance-Properties",
      "generated" : true,
      "identifiers" : [
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/Logging\/MultiplexLogHandler\/logLevel",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/Logging\/MultiplexLogHandler\/metadata",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/Logging\/MultiplexLogHandler\/metadataProvider"
      ],
      "title" : "Instance Properties"
    },
    {
      "anchor" : "Instance-Methods",
      "generated" : true,
      "identifiers" : [
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/Logging\/MultiplexLogHandler\/log(level:message:metadata:source:file:function:line:)"
      ],
      "title" : "Instance Methods"
    },
    {
      "anchor" : "Subscripts",
      "generated" : true,
      "identifiers" : [
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/Logging\/MultiplexLogHandler\/subscript(metadataKey:)"
      ],
      "title" : "Subscripts"
    },
    {
      "anchor" : "Default-Implementations",
      "generated" : true,
      "identifiers" : [
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/Logging\/MultiplexLogHandler\/LogHandler-Implementations"
      ],
      "title" : "Default Implementations"
    }
  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/logging\/multiplexloghandler"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/Logging": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/Logging",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "Logging",
  "type" : "topic",
  "url" : "\/documentation\/logging"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/Logging/LogHandler": {
  "abstract" : [
    {
      "text" : "A ",
      "type" : "text"
    },
    {
      "code" : "LogHandler",
      "type" : "codeVoice"
    },
    {
      "text" : " is an implementation of a logging backend.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "LogHandler"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/Logging\/LogHandler",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "LogHandler"
    }
  ],
  "role" : "symbol",
  "title" : "LogHandler",
  "type" : "topic",
  "url" : "\/documentation\/logging\/loghandler"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/Logging/MultiplexLogHandler": {
  "abstract" : [
    {
      "text" : "A pseudo-",
      "type" : "text"
    },
    {
      "code" : "LogHandler",
      "type" : "codeVoice"
    },
    {
      "text" : " that can be used to send messages to multiple other ",
      "type" : "text"
    },
    {
      "code" : "LogHandler",
      "type" : "codeVoice"
    },
    {
      "text" : "s.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "MultiplexLogHandler"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/Logging\/MultiplexLogHandler",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "MultiplexLogHandler"
    }
  ],
  "role" : "symbol",
  "title" : "MultiplexLogHandler",
  "type" : "topic",
  "url" : "\/documentation\/logging\/multiplexloghandler"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/Logging/MultiplexLogHandler/LogHandler-Implementations": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/Logging\/MultiplexLogHandler\/LogHandler-Implementations",
  "kind" : "article",
  "role" : "collectionGroup",
  "title" : "LogHandler Implementations",
  "type" : "topic",
  "url" : "\/documentation\/logging\/multiplexloghandler\/loghandler-implementations"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/Logging/MultiplexLogHandler/init(_:)": {
  "abstract" : [
    {
      "text" : "Create a ",
      "type" : "text"
    },
    {
      "code" : "MultiplexLogHandler",
      "type" : "codeVoice"
    },
    {
      "text" : ".",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "identifier",
      "text" : "init"
    },
    {
      "kind" : "text",
      "text" : "(["
    },
    {
      "kind" : "keyword",
      "text" : "any"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:7Logging10LogHandlerP",
      "text" : "LogHandler"
    },
    {
      "kind" : "text",
      "text" : "])"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/Logging\/MultiplexLogHandler\/init(_:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "init(_:)",
  "type" : "topic",
  "url" : "\/documentation\/logging\/multiplexloghandler\/init(_:)"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/Logging/MultiplexLogHandler/init(_:metadataProvider:)": {
  "abstract" : [

  ],
  "fragments" : [
    {
      "kind" : "identifier",
      "text" : "init"
    },
    {
      "kind" : "text",
      "text" : "(["
    },
    {
      "kind" : "keyword",
      "text" : "any"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:7Logging10LogHandlerP",
      "text" : "LogHandler"
    },
    {
      "kind" : "text",
      "text" : "], "
    },
    {
      "kind" : "externalParam",
      "text" : "metadataProvider"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:7Logging6LoggerV",
      "text" : "Logger"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:7Logging6LoggerV16MetadataProviderV",
      "text" : "MetadataProvider"
    },
    {
      "kind" : "text",
      "text" : "?)"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/Logging\/MultiplexLogHandler\/init(_:metadataProvider:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "init(_:metadataProvider:)",
  "type" : "topic",
  "url" : "\/documentation\/logging\/multiplexloghandler\/init(_:metadataprovider:)"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/Logging/MultiplexLogHandler/log(level:message:metadata:source:file:function:line:)": {
  "abstract" : [
    {
      "text" : "This method is called when a ",
      "type" : "text"
    },
    {
      "code" : "LogHandler",
      "type" : "codeVoice"
    },
    {
      "text" : " must emit a log message. There is no need for the ",
      "type" : "text"
    },
    {
      "code" : "LogHandler",
      "type" : "codeVoice"
    },
    {
      "text" : " to",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "check if the ",
      "type" : "text"
    },
    {
      "code" : "level",
      "type" : "codeVoice"
    },
    {
      "text" : " is above or below the configured ",
      "type" : "text"
    },
    {
      "code" : "logLevel",
      "type" : "codeVoice"
    },
    {
      "text" : " as ",
      "type" : "text"
    },
    {
      "code" : "Logger",
      "type" : "codeVoice"
    },
    {
      "text" : " already performed this check and",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "determined that a message should be logged.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "log"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "externalParam",
      "text" : "level"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:7Logging6LoggerV",
      "text" : "Logger"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:7Logging6LoggerV5LevelO",
      "text" : "Level"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "externalParam",
      "text" : "message"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:7Logging6LoggerV",
      "text" : "Logger"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:7Logging6LoggerV7MessageV",
      "text" : "Message"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "externalParam",
      "text" : "metadata"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:7Logging6LoggerV",
      "text" : "Logger"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:7Logging6LoggerV8Metadataa",
      "text" : "Metadata"
    },
    {
      "kind" : "text",
      "text" : "?, "
    },
    {
      "kind" : "externalParam",
      "text" : "source"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:SS",
      "text" : "String"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "externalParam",
      "text" : "file"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:SS",
      "text" : "String"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "externalParam",
      "text" : "function"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:SS",
      "text" : "String"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "externalParam",
      "text" : "line"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Su",
      "text" : "UInt"
    },
    {
      "kind" : "text",
      "text" : ")"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/Logging\/MultiplexLogHandler\/log(level:message:metadata:source:file:function:line:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "log(level:message:metadata:source:file:function:line:)",
  "type" : "topic",
  "url" : "\/documentation\/logging\/multiplexloghandler\/log(level:message:metadata:source:file:function:line:)"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/Logging/MultiplexLogHandler/logLevel": {
  "abstract" : [
    {
      "text" : "Get or set the configured log level.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "var"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "logLevel"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:7Logging6LoggerV",
      "text" : "Logger"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:7Logging6LoggerV5LevelO",
      "text" : "Level"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/Logging\/MultiplexLogHandler\/logLevel",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "logLevel",
  "type" : "topic",
  "url" : "\/documentation\/logging\/multiplexloghandler\/loglevel"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/Logging/MultiplexLogHandler/metadata": {
  "abstract" : [
    {
      "text" : "Get or set the entire metadata storage as a dictionary.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "var"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "metadata"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:7Logging6LoggerV",
      "text" : "Logger"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:7Logging6LoggerV8Metadataa",
      "text" : "Metadata"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/Logging\/MultiplexLogHandler\/metadata",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "metadata",
  "type" : "topic",
  "url" : "\/documentation\/logging\/multiplexloghandler\/metadata"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/Logging/MultiplexLogHandler/metadataProvider": {
  "abstract" : [
    {
      "text" : "The metadata provider this ",
      "type" : "text"
    },
    {
      "code" : "LogHandler",
      "type" : "codeVoice"
    },
    {
      "text" : " will use when a log statement is about to be emitted.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "var"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "metadataProvider"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:7Logging6LoggerV",
      "text" : "Logger"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:7Logging6LoggerV16MetadataProviderV",
      "text" : "MetadataProvider"
    },
    {
      "kind" : "text",
      "text" : "?"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/Logging\/MultiplexLogHandler\/metadataProvider",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "metadataProvider",
  "type" : "topic",
  "url" : "\/documentation\/logging\/multiplexloghandler\/metadataprovider"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/Logging/MultiplexLogHandler/subscript(metadataKey:)": {
  "abstract" : [
    {
      "text" : "Add, remove, or change the logging metadata.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "subscript"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "externalParam",
      "text" : "metadataKey"
    },
    {
      "kind" : "text",
      "text" : " _: "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:7Logging6LoggerV",
      "text" : "Logger"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:7Logging6LoggerV8Metadataa",
      "text" : "Metadata"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:SD3Keya",
      "text" : "Key"
    },
    {
      "kind" : "text",
      "text" : ") -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:7Logging6LoggerV",
      "text" : "Logger"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:7Logging6LoggerV8Metadataa",
      "text" : "Metadata"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:SD5Valuea",
      "text" : "Value"
    },
    {
      "kind" : "text",
      "text" : "?"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/Logging\/MultiplexLogHandler\/subscript(metadataKey:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "subscript(metadataKey:)",
  "type" : "topic",
  "url" : "\/documentation\/logging\/multiplexloghandler\/subscript(metadatakey:)"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/s8SendableP": {
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/s8SendableP",
  "title" : "Swift.Sendable",
  "type" : "unresolvable"
}
}
}