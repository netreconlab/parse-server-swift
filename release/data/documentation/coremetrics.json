{
  "hierarchy" : {
    "paths" : [
      [

      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/CoreMetrics"
  },
  "kind" : "symbol",
  "metadata" : {
    "externalID" : "CoreMetrics",
    "modules" : [
      {
        "name" : "CoreMetrics"
      }
    ],
    "role" : "collection",
    "roleHeading" : "Framework",
    "symbolKind" : "module",
    "title" : "CoreMetrics"
  },
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "topicSections" : [
    {
      "anchor" : "Classes",
      "generated" : true,
      "identifiers" : [
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/CoreMetrics\/Counter",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/CoreMetrics\/FloatingPointCounter",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/CoreMetrics\/Gauge",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/CoreMetrics\/Meter",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/CoreMetrics\/MultiplexMetricsHandler",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/CoreMetrics\/NOOPMetricsHandler",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/CoreMetrics\/Recorder",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/CoreMetrics\/Timer"
      ],
      "title" : "Classes"
    },
    {
      "anchor" : "Protocols",
      "generated" : true,
      "identifiers" : [
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/CoreMetrics\/CounterHandler",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/CoreMetrics\/FloatingPointCounterHandler",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/CoreMetrics\/MeterHandler",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/CoreMetrics\/MetricsFactory",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/CoreMetrics\/RecorderHandler",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/CoreMetrics\/TimerHandler"
      ],
      "title" : "Protocols"
    },
    {
      "anchor" : "Structures",
      "generated" : true,
      "identifiers" : [
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/CoreMetrics\/TimeUnit"
      ],
      "title" : "Structures"
    },
    {
      "anchor" : "Enumerations",
      "generated" : true,
      "identifiers" : [
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/CoreMetrics\/MetricsSystem"
      ],
      "title" : "Enumerations"
    }
  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/coremetrics"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/CoreMetrics": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/CoreMetrics",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "CoreMetrics",
  "type" : "topic",
  "url" : "\/documentation\/coremetrics"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/CoreMetrics/Counter": {
  "abstract" : [
    {
      "text" : "A counter is a cumulative metric that represents a single monotonically increasing counter whose value can only increase or be reset to zero.",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "For example, you can use a counter to represent the number of requests served, tasks completed, or errors.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "Counter"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/CoreMetrics\/Counter",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "Counter"
    }
  ],
  "role" : "symbol",
  "title" : "Counter",
  "type" : "topic",
  "url" : "\/documentation\/coremetrics\/counter"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/CoreMetrics/CounterHandler": {
  "abstract" : [
    {
      "text" : "A ",
      "type" : "text"
    },
    {
      "code" : "CounterHandler",
      "type" : "codeVoice"
    },
    {
      "text" : " represents a backend implementation of a ",
      "type" : "text"
    },
    {
      "code" : "Counter",
      "type" : "codeVoice"
    },
    {
      "text" : ".",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "CounterHandler"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/CoreMetrics\/CounterHandler",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "CounterHandler"
    }
  ],
  "role" : "symbol",
  "title" : "CounterHandler",
  "type" : "topic",
  "url" : "\/documentation\/coremetrics\/counterhandler"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/CoreMetrics/FloatingPointCounter": {
  "abstract" : [
    {
      "text" : "A FloatingPointCounter is a cumulative metric that represents a single monotonically increasing FloatingPointCounter whose value can only increase or be reset to zero.",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "For example, you can use a FloatingPointCounter to represent the number of requests served, tasks completed, or errors.",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "FloatingPointCounter is not supported by all metrics backends, however a default implementation is provided which accumulates floating point values and records increments to a standard Counter after crossing integer boundaries.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "FloatingPointCounter"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/CoreMetrics\/FloatingPointCounter",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "FloatingPointCounter"
    }
  ],
  "role" : "symbol",
  "title" : "FloatingPointCounter",
  "type" : "topic",
  "url" : "\/documentation\/coremetrics\/floatingpointcounter"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/CoreMetrics/FloatingPointCounterHandler": {
  "abstract" : [
    {
      "text" : "A ",
      "type" : "text"
    },
    {
      "code" : "FloatingPointCounterHandler",
      "type" : "codeVoice"
    },
    {
      "text" : " represents a backend implementation of a ",
      "type" : "text"
    },
    {
      "code" : "FloatingPointCounter",
      "type" : "codeVoice"
    },
    {
      "text" : ".",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "FloatingPointCounterHandler"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/CoreMetrics\/FloatingPointCounterHandler",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "FloatingPointCounterHandler"
    }
  ],
  "role" : "symbol",
  "title" : "FloatingPointCounterHandler",
  "type" : "topic",
  "url" : "\/documentation\/coremetrics\/floatingpointcounterhandler"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/CoreMetrics/Gauge": {
  "abstract" : [
    {
      "text" : "A gauge is a metric that represents a single numerical value that can arbitrarily go up and down.",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "Gauges are typically used for measured values like temperatures or current memory usage, but also “counts” that can go up and down, like the number of active threads.",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "Gauges are modeled as ",
      "type" : "text"
    },
    {
      "code" : "Recorder",
      "type" : "codeVoice"
    },
    {
      "text" : " with a sample size of 1 and that does not perform any aggregation.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "Gauge"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/CoreMetrics\/Gauge",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "Gauge"
    }
  ],
  "role" : "symbol",
  "title" : "Gauge",
  "type" : "topic",
  "url" : "\/documentation\/coremetrics\/gauge"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/CoreMetrics/Meter": {
  "abstract" : [
    {
      "text" : "A meter is similar to a gauge, it is a metric that represents a single numerical value that can arbitrarily go up and down.",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "Meters are typically used for measured values like temperatures or current memory usage, but also “counts” that can go up and down, like the number of active threads.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "Meter"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/CoreMetrics\/Meter",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "Meter"
    }
  ],
  "role" : "symbol",
  "title" : "Meter",
  "type" : "topic",
  "url" : "\/documentation\/coremetrics\/meter"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/CoreMetrics/MeterHandler": {
  "abstract" : [
    {
      "text" : "A ",
      "type" : "text"
    },
    {
      "code" : "MeterHandler",
      "type" : "codeVoice"
    },
    {
      "text" : " represents a backend implementation of a ",
      "type" : "text"
    },
    {
      "code" : "Meter",
      "type" : "codeVoice"
    },
    {
      "text" : ".",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "MeterHandler"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/CoreMetrics\/MeterHandler",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "MeterHandler"
    }
  ],
  "role" : "symbol",
  "title" : "MeterHandler",
  "type" : "topic",
  "url" : "\/documentation\/coremetrics\/meterhandler"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/CoreMetrics/MetricsFactory": {
  "abstract" : [
    {
      "text" : "The ",
      "type" : "text"
    },
    {
      "code" : "MetricsFactory",
      "type" : "codeVoice"
    },
    {
      "text" : " is the bridge between the ",
      "type" : "text"
    },
    {
      "code" : "MetricsSystem",
      "type" : "codeVoice"
    },
    {
      "text" : " and the metrics backend implementation.",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "code" : "MetricsFactory",
      "type" : "codeVoice"
    },
    {
      "text" : "’s role is to initialize concrete implementations of the various metric types:",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "MetricsFactory"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/CoreMetrics\/MetricsFactory",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "MetricsFactory"
    }
  ],
  "role" : "symbol",
  "title" : "MetricsFactory",
  "type" : "topic",
  "url" : "\/documentation\/coremetrics\/metricsfactory"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/CoreMetrics/MetricsSystem": {
  "abstract" : [
    {
      "text" : "The ",
      "type" : "text"
    },
    {
      "code" : "MetricsSystem",
      "type" : "codeVoice"
    },
    {
      "text" : " is a global facility where the default metrics backend implementation (",
      "type" : "text"
    },
    {
      "code" : "MetricsFactory",
      "type" : "codeVoice"
    },
    {
      "text" : ") can be",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "configured. ",
      "type" : "text"
    },
    {
      "code" : "MetricsSystem",
      "type" : "codeVoice"
    },
    {
      "text" : " is set up just once in a given program to set up the desired metrics backend",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "implementation.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "enum"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "MetricsSystem"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/CoreMetrics\/MetricsSystem",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "MetricsSystem"
    }
  ],
  "role" : "symbol",
  "title" : "MetricsSystem",
  "type" : "topic",
  "url" : "\/documentation\/coremetrics\/metricssystem"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/CoreMetrics/MultiplexMetricsHandler": {
  "abstract" : [
    {
      "text" : "A pseudo-metrics handler that can be used to send messages to multiple other metrics handlers.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "MultiplexMetricsHandler"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/CoreMetrics\/MultiplexMetricsHandler",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "MultiplexMetricsHandler"
    }
  ],
  "role" : "symbol",
  "title" : "MultiplexMetricsHandler",
  "type" : "topic",
  "url" : "\/documentation\/coremetrics\/multiplexmetricshandler"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/CoreMetrics/NOOPMetricsHandler": {
  "abstract" : [
    {
      "text" : "Ships with the metrics module, used for initial bootstrapping.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "NOOPMetricsHandler"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/CoreMetrics\/NOOPMetricsHandler",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "NOOPMetricsHandler"
    }
  ],
  "role" : "symbol",
  "title" : "NOOPMetricsHandler",
  "type" : "topic",
  "url" : "\/documentation\/coremetrics\/noopmetricshandler"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/CoreMetrics/Recorder": {
  "abstract" : [
    {
      "text" : "A recorder collects observations within a time window (usually things like response sizes) and ",
      "type" : "text"
    },
    {
      "inlineContent" : [
        {
          "text" : "can",
          "type" : "text"
        }
      ],
      "type" : "emphasis"
    },
    {
      "text" : " provide aggregated information about the data sample, for example, count, sum, min, max and various quantiles.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "Recorder"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/CoreMetrics\/Recorder",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "Recorder"
    }
  ],
  "role" : "symbol",
  "title" : "Recorder",
  "type" : "topic",
  "url" : "\/documentation\/coremetrics\/recorder"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/CoreMetrics/RecorderHandler": {
  "abstract" : [
    {
      "text" : "A ",
      "type" : "text"
    },
    {
      "code" : "RecorderHandler",
      "type" : "codeVoice"
    },
    {
      "text" : " represents a backend implementation of a ",
      "type" : "text"
    },
    {
      "code" : "Recorder",
      "type" : "codeVoice"
    },
    {
      "text" : ".",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "RecorderHandler"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/CoreMetrics\/RecorderHandler",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "RecorderHandler"
    }
  ],
  "role" : "symbol",
  "title" : "RecorderHandler",
  "type" : "topic",
  "url" : "\/documentation\/coremetrics\/recorderhandler"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/CoreMetrics/TimeUnit": {
  "abstract" : [

  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "TimeUnit"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/CoreMetrics\/TimeUnit",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "TimeUnit"
    }
  ],
  "role" : "symbol",
  "title" : "TimeUnit",
  "type" : "topic",
  "url" : "\/documentation\/coremetrics\/timeunit"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/CoreMetrics/Timer": {
  "abstract" : [
    {
      "text" : "A timer collects observations within a time window (usually things like request durations) and provides aggregated information about the data sample,",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "for example, min, max and various quantiles. It is similar to a ",
      "type" : "text"
    },
    {
      "code" : "Recorder",
      "type" : "codeVoice"
    },
    {
      "text" : " but specialized for values that represent durations.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "Timer"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/CoreMetrics\/Timer",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "Timer"
    }
  ],
  "role" : "symbol",
  "title" : "Timer",
  "type" : "topic",
  "url" : "\/documentation\/coremetrics\/timer"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/CoreMetrics/TimerHandler": {
  "abstract" : [
    {
      "text" : "A ",
      "type" : "text"
    },
    {
      "code" : "TimerHandler",
      "type" : "codeVoice"
    },
    {
      "text" : " represents a backend implementation of a ",
      "type" : "text"
    },
    {
      "code" : "Timer",
      "type" : "codeVoice"
    },
    {
      "text" : ".",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "TimerHandler"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/CoreMetrics\/TimerHandler",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "TimerHandler"
    }
  ],
  "role" : "symbol",
  "title" : "TimerHandler",
  "type" : "topic",
  "url" : "\/documentation\/coremetrics\/timerhandler"
}
}
}