{
  "abstract" : [
    {
      "text" : "A ",
      "type" : "text"
    },
    {
      "code" : "ServiceContext",
      "type" : "codeVoice"
    },
    {
      "text" : " is a heterogeneous storage type with value semantics for keyed values in a type-safe fashion.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/ServiceContextModule"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/ServiceContextModule\/ServiceContext"
  },
  "kind" : "symbol",
  "metadata" : {
    "externalID" : "s:20ServiceContextModule0aB0V",
    "fragments" : [
      {
        "kind" : "keyword",
        "text" : "struct"
      },
      {
        "kind" : "text",
        "text" : " "
      },
      {
        "kind" : "identifier",
        "text" : "ServiceContext"
      }
    ],
    "modules" : [
      {
        "name" : "ServiceContextModule"
      }
    ],
    "navigatorTitle" : [
      {
        "kind" : "identifier",
        "text" : "ServiceContext"
      }
    ],
    "role" : "symbol",
    "roleHeading" : "Structure",
    "symbolKind" : "struct",
    "title" : "ServiceContext"
  },
  "primaryContentSections" : [
    {
      "declarations" : [
        {
          "languages" : [
            "swift"
          ],
          "platforms" : [
            "macOS"
          ],
          "tokens" : [
            {
              "kind" : "keyword",
              "text" : "struct"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "identifier",
              "text" : "ServiceContext"
            }
          ]
        }
      ],
      "kind" : "declarations"
    },
    {
      "content" : [
        {
          "anchor" : "overview",
          "level" : 2,
          "text" : "Overview",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Its values are uniquely identified via ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/ServiceContextModule\/ServiceContextKey",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : "s (by type identity). These keys also dictate the type of",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "value allowed for a specific key-value pair through their associated type ",
              "type" : "text"
            },
            {
              "code" : "Value",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Defining-keys-and-accessing-values",
          "level" : 2,
          "text" : "Defining keys and accessing values",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "ServiceContext keys are defined as types, most commonly case-less enums (as no actual instances are required)",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which conform to the ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/ServiceContextModule\/ServiceContextKey",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " protocol:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "private enum TestIDKey: ServiceContextKey {",
            "  typealias Value = String",
            "}"
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "While defining a key, one should also immediately declare an extension on ",
              "type" : "text"
            },
            {
              "code" : "ServiceContext",
              "type" : "codeVoice"
            },
            {
              "text" : " to allow convenient and discoverable ways to interact",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "with the context item. The extension should take the form of:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "extension ServiceContext {",
            "  var testID: String? {",
            "    get {",
            "      self[TestIDKey.self]",
            "    } set {",
            "      self[TestIDKey.self] = newValue",
            "    }",
            "  }",
            "}"
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "For consistency, it is recommended to name key types with the ",
              "type" : "text"
            },
            {
              "code" : "...Key",
              "type" : "codeVoice"
            },
            {
              "text" : " suffix (e.g. ",
              "type" : "text"
            },
            {
              "code" : "SomethingKey",
              "type" : "codeVoice"
            },
            {
              "text" : ") and the property",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "used to access a value identifier by such key the prefix of the key (e.g. ",
              "type" : "text"
            },
            {
              "code" : "something",
              "type" : "codeVoice"
            },
            {
              "text" : "). Please also observe the usual",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift naming conventions, e.g. prefer ",
              "type" : "text"
            },
            {
              "code" : "ID",
              "type" : "codeVoice"
            },
            {
              "text" : " to ",
              "type" : "text"
            },
            {
              "code" : "Id",
              "type" : "codeVoice"
            },
            {
              "text" : " etc.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Usage",
          "level" : 2,
          "text" : "Usage",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Using a context container is fairly straight forward, as it boils down to using the prepared computed properties:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "var context = ServiceContext.topLevel",
            "\/\/ set a new value",
            "context.testID = \"abc\"",
            "\/\/ retrieve a stored value",
            "let testID = context.testID ?? \"default\"",
            "\/\/ remove a stored value",
            "context.testIDKey = nil"
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Note that normally a context should not be “created” ad-hoc by user code, but rather it should be passed to it from",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a runtime. A ",
              "type" : "text"
            },
            {
              "code" : "ServiceContext",
              "type" : "codeVoice"
            },
            {
              "text" : " may already be available to you through ServiceContext.$current when using structured concurrency.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Otherwise, for example when working in an HTTP server framework, it is most likely that the context is already passed",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "directly or indirectly (e.g. in a ",
              "type" : "text"
            },
            {
              "code" : "FrameworkContext",
              "type" : "codeVoice"
            },
            {
              "text" : ").",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Accessing-all-values",
          "level" : 3,
          "text" : "Accessing all values",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The only way to access “all” values in a context is by using the ",
              "type" : "text"
            },
            {
              "code" : "forEach",
              "type" : "codeVoice"
            },
            {
              "text" : " function.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "ServiceContext",
              "type" : "codeVoice"
            },
            {
              "text" : " does not expose more functions on purpose to prevent abuse and treating it as too much of an",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "arbitrary value smuggling container, but only make it convenient for tracing and instrumentation systems which need",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to access either specific or all items carried inside a context.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        }
      ],
      "kind" : "content"
    }
  ],
  "relationshipsSections" : [
    {
      "identifiers" : [
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/s8SendableP"
      ],
      "kind" : "relationships",
      "title" : "Conforms To",
      "type" : "conformsTo"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "topicSections" : [
    {
      "anchor" : "Instance-Properties",
      "generated" : true,
      "identifiers" : [
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/ServiceContextModule\/ServiceContext\/count",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/ServiceContextModule\/ServiceContext\/isEmpty"
      ],
      "title" : "Instance Properties"
    },
    {
      "anchor" : "Instance-Methods",
      "generated" : true,
      "identifiers" : [
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/ServiceContextModule\/ServiceContext\/forEach(_:)"
      ],
      "title" : "Instance Methods"
    },
    {
      "anchor" : "Subscripts",
      "generated" : true,
      "identifiers" : [
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/ServiceContextModule\/ServiceContext\/subscript(_:)"
      ],
      "title" : "Subscripts"
    },
    {
      "anchor" : "Type-Properties",
      "generated" : true,
      "identifiers" : [
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/ServiceContextModule\/ServiceContext\/current",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/ServiceContextModule\/ServiceContext\/topLevel"
      ],
      "title" : "Type Properties"
    },
    {
      "anchor" : "Type-Methods",
      "generated" : true,
      "identifiers" : [
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/ServiceContextModule\/ServiceContext\/TODO(_:function:file:line:)",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/ServiceContextModule\/ServiceContext\/withValue(_:isolation:operation:)",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/ServiceContextModule\/ServiceContext\/withValue(_:operation:)-3tddk",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/ServiceContextModule\/ServiceContext\/withValue(_:operation:)-4f7xo"
      ],
      "title" : "Type Methods"
    }
  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/servicecontextmodule\/servicecontext"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/ServiceContextModule": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/ServiceContextModule",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "ServiceContextModule",
  "type" : "topic",
  "url" : "\/documentation\/servicecontextmodule"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/ServiceContextModule/ServiceContext": {
  "abstract" : [
    {
      "text" : "A ",
      "type" : "text"
    },
    {
      "code" : "ServiceContext",
      "type" : "codeVoice"
    },
    {
      "text" : " is a heterogeneous storage type with value semantics for keyed values in a type-safe fashion.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "ServiceContext"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/ServiceContextModule\/ServiceContext",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "ServiceContext"
    }
  ],
  "role" : "symbol",
  "title" : "ServiceContext",
  "type" : "topic",
  "url" : "\/documentation\/servicecontextmodule\/servicecontext"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/ServiceContextModule/ServiceContext/TODO(_:function:file:line:)": {
  "abstract" : [
    {
      "text" : "A context intended as a placeholder until a real value can be passed through a function call.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "static"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "TODO"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:s12StaticStringV",
      "text" : "StaticString"
    },
    {
      "kind" : "text",
      "text" : "?, "
    },
    {
      "kind" : "externalParam",
      "text" : "function"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:SS",
      "text" : "String"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "externalParam",
      "text" : "file"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:SS",
      "text" : "String"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "externalParam",
      "text" : "line"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Su",
      "text" : "UInt"
    },
    {
      "kind" : "text",
      "text" : ") -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:20ServiceContextModule0aB0V",
      "text" : "ServiceContext"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/ServiceContextModule\/ServiceContext\/TODO(_:function:file:line:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "TODO(_:function:file:line:)",
  "type" : "topic",
  "url" : "\/documentation\/servicecontextmodule\/servicecontext\/todo(_:function:file:line:)"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/ServiceContextModule/ServiceContext/count": {
  "abstract" : [
    {
      "text" : "The number of items in the context.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "var"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "count"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Si",
      "text" : "Int"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/ServiceContextModule\/ServiceContext\/count",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "count",
  "type" : "topic",
  "url" : "\/documentation\/servicecontextmodule\/servicecontext\/count"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/ServiceContextModule/ServiceContext/current": {
  "abstract" : [
    {
      "text" : "A ",
      "type" : "text"
    },
    {
      "code" : "ServiceContext",
      "type" : "codeVoice"
    },
    {
      "text" : " is automatically propagated through task-local storage. This API enables binding a top-level ",
      "type" : "text"
    },
    {
      "code" : "ServiceContext",
      "type" : "codeVoice"
    },
    {
      "text" : " and",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "implicitly passes it to child tasks when using structured concurrency.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "static"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "keyword",
      "text" : "var"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "current"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:20ServiceContextModule0aB0V",
      "text" : "ServiceContext"
    },
    {
      "kind" : "text",
      "text" : "?"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/ServiceContextModule\/ServiceContext\/current",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "current",
  "type" : "topic",
  "url" : "\/documentation\/servicecontextmodule\/servicecontext\/current"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/ServiceContextModule/ServiceContext/forEach(_:)": {
  "abstract" : [
    {
      "text" : "Iterate through all items in this ",
      "type" : "text"
    },
    {
      "code" : "ServiceContext",
      "type" : "codeVoice"
    },
    {
      "text" : " by invoking the given closure for each item.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "forEach"
    },
    {
      "kind" : "text",
      "text" : "(("
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:20ServiceContextModule03AnyaB3KeyV",
      "text" : "AnyServiceContextKey"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "keyword",
      "text" : "Any"
    },
    {
      "kind" : "text",
      "text" : ") "
    },
    {
      "kind" : "keyword",
      "text" : "throws"
    },
    {
      "kind" : "text",
      "text" : " -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:s4Voida",
      "text" : "Void"
    },
    {
      "kind" : "text",
      "text" : ") "
    },
    {
      "kind" : "keyword",
      "text" : "rethrows"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/ServiceContextModule\/ServiceContext\/forEach(_:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "forEach(_:)",
  "type" : "topic",
  "url" : "\/documentation\/servicecontextmodule\/servicecontext\/foreach(_:)"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/ServiceContextModule/ServiceContext/isEmpty": {
  "abstract" : [
    {
      "text" : "A Boolean value that indicates whether the context is empty.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "var"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "isEmpty"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Sb",
      "text" : "Bool"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/ServiceContextModule\/ServiceContext\/isEmpty",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "isEmpty",
  "type" : "topic",
  "url" : "\/documentation\/servicecontextmodule\/servicecontext\/isempty"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/ServiceContextModule/ServiceContext/subscript(_:)": {
  "abstract" : [
    {
      "text" : "Provides type-safe access to the context’s values.",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "This API should ONLY be used inside of accessor implementations.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "subscript"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "genericParameter",
      "text" : "Key"
    },
    {
      "kind" : "text",
      "text" : ">("
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:20ServiceContextModule0aB0Vy5ValueQzSgxmcAA0aB3KeyRzluip0E0L_xmfp",
      "text" : "Key"
    },
    {
      "kind" : "text",
      "text" : ".Type) -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:20ServiceContextModule0aB0Vy5ValueQzSgxmcAA0aB3KeyRzluip0E0L_xmfp",
      "text" : "Key"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:20ServiceContextModule0aB3KeyP5ValueQa",
      "text" : "Value"
    },
    {
      "kind" : "text",
      "text" : "?"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/ServiceContextModule\/ServiceContext\/subscript(_:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "subscript(_:)",
  "type" : "topic",
  "url" : "\/documentation\/servicecontextmodule\/servicecontext\/subscript(_:)"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/ServiceContextModule/ServiceContext/topLevel": {
  "abstract" : [
    {
      "text" : "Creates a new empty “top level” context, generally used as an “initial” context to immediately be populated with",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "some values by a framework or runtime. Another use case is for tasks starting in the “background” (e.g. on a timer),",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "which don’t have a “request context” per se that they can pick up, and as such they have to create a “top level”",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "context for their work.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "static"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "keyword",
      "text" : "var"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "topLevel"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:20ServiceContextModule0aB0V",
      "text" : "ServiceContext"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/ServiceContextModule\/ServiceContext\/topLevel",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "topLevel",
  "type" : "topic",
  "url" : "\/documentation\/servicecontextmodule\/servicecontext\/toplevel"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/ServiceContextModule/ServiceContext/withValue(_:isolation:operation:)": {
  "abstract" : [
    {
      "text" : "Convenience API to bind the task-local ",
      "type" : "text"
    },
    {
      "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/ServiceContextModule\/ServiceContext\/current",
      "isActive" : true,
      "type" : "reference"
    },
    {
      "text" : " to the passed ",
      "type" : "text"
    },
    {
      "code" : "value",
      "type" : "codeVoice"
    },
    {
      "text" : ", and execute the passed ",
      "type" : "text"
    },
    {
      "code" : "operation",
      "type" : "codeVoice"
    },
    {
      "text" : ".",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "static"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "withValue"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "genericParameter",
      "text" : "T"
    },
    {
      "kind" : "text",
      "text" : ">("
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:20ServiceContextModule0aB0V",
      "text" : "ServiceContext"
    },
    {
      "kind" : "text",
      "text" : "?, "
    },
    {
      "kind" : "externalParam",
      "text" : "isolation"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "keyword",
      "text" : "isolated"
    },
    {
      "kind" : "text",
      "text" : " ("
    },
    {
      "kind" : "keyword",
      "text" : "any"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:ScA",
      "text" : "Actor"
    },
    {
      "kind" : "text",
      "text" : ")?, "
    },
    {
      "kind" : "externalParam",
      "text" : "operation"
    },
    {
      "kind" : "text",
      "text" : ": () "
    },
    {
      "kind" : "keyword",
      "text" : "async"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "keyword",
      "text" : "throws"
    },
    {
      "kind" : "text",
      "text" : " -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:20ServiceContextModule0aB0V9withValue_9isolation9operationxACSg_ScA_pSgYixyYaKXEtYaKlFZ1TL_xmfp",
      "text" : "T"
    },
    {
      "kind" : "text",
      "text" : ") "
    },
    {
      "kind" : "keyword",
      "text" : "async"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "keyword",
      "text" : "rethrows"
    },
    {
      "kind" : "text",
      "text" : " -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:20ServiceContextModule0aB0V9withValue_9isolation9operationxACSg_ScA_pSgYixyYaKXEtYaKlFZ1TL_xmfp",
      "text" : "T"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/ServiceContextModule\/ServiceContext\/withValue(_:isolation:operation:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "withValue(_:isolation:operation:)",
  "type" : "topic",
  "url" : "\/documentation\/servicecontextmodule\/servicecontext\/withvalue(_:isolation:operation:)"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/ServiceContextModule/ServiceContext/withValue(_:operation:)-3tddk": {
  "abstract" : [

  ],
  "deprecated" : true,
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "static"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "withValue"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "genericParameter",
      "text" : "T"
    },
    {
      "kind" : "text",
      "text" : ">("
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:20ServiceContextModule0aB0V",
      "text" : "ServiceContext"
    },
    {
      "kind" : "text",
      "text" : "?, "
    },
    {
      "kind" : "externalParam",
      "text" : "operation"
    },
    {
      "kind" : "text",
      "text" : ": () "
    },
    {
      "kind" : "keyword",
      "text" : "async"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "keyword",
      "text" : "throws"
    },
    {
      "kind" : "text",
      "text" : " -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:20ServiceContextModule0aB0V9withValue_9operationxACSg_xyYaKXEtYaKlFZ1TL_xmfp",
      "text" : "T"
    },
    {
      "kind" : "text",
      "text" : ") "
    },
    {
      "kind" : "keyword",
      "text" : "async"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "keyword",
      "text" : "rethrows"
    },
    {
      "kind" : "text",
      "text" : " -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:20ServiceContextModule0aB0V9withValue_9operationxACSg_xyYaKXEtYaKlFZ1TL_xmfp",
      "text" : "T"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/ServiceContextModule\/ServiceContext\/withValue(_:operation:)-3tddk",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "withValue(_:operation:)",
  "type" : "topic",
  "url" : "\/documentation\/servicecontextmodule\/servicecontext\/withvalue(_:operation:)-3tddk"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/ServiceContextModule/ServiceContext/withValue(_:operation:)-4f7xo": {
  "abstract" : [
    {
      "text" : "Convenience API to bind the task-local ",
      "type" : "text"
    },
    {
      "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/ServiceContextModule\/ServiceContext\/current",
      "isActive" : true,
      "type" : "reference"
    },
    {
      "text" : " to the passed ",
      "type" : "text"
    },
    {
      "code" : "value",
      "type" : "codeVoice"
    },
    {
      "text" : ", and execute the passed ",
      "type" : "text"
    },
    {
      "code" : "operation",
      "type" : "codeVoice"
    },
    {
      "text" : ".",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "static"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "withValue"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "genericParameter",
      "text" : "T"
    },
    {
      "kind" : "text",
      "text" : ">("
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:20ServiceContextModule0aB0V",
      "text" : "ServiceContext"
    },
    {
      "kind" : "text",
      "text" : "?, "
    },
    {
      "kind" : "externalParam",
      "text" : "operation"
    },
    {
      "kind" : "text",
      "text" : ": () "
    },
    {
      "kind" : "keyword",
      "text" : "throws"
    },
    {
      "kind" : "text",
      "text" : " -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:20ServiceContextModule0aB0V9withValue_9operationxACSg_xyKXEtKlFZ1TL_xmfp",
      "text" : "T"
    },
    {
      "kind" : "text",
      "text" : ") "
    },
    {
      "kind" : "keyword",
      "text" : "rethrows"
    },
    {
      "kind" : "text",
      "text" : " -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:20ServiceContextModule0aB0V9withValue_9operationxACSg_xyKXEtKlFZ1TL_xmfp",
      "text" : "T"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/ServiceContextModule\/ServiceContext\/withValue(_:operation:)-4f7xo",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "withValue(_:operation:)",
  "type" : "topic",
  "url" : "\/documentation\/servicecontextmodule\/servicecontext\/withvalue(_:operation:)-4f7xo"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/ServiceContextModule/ServiceContextKey": {
  "abstract" : [
    {
      "text" : "Context keys provide type-safe access to ",
      "type" : "text"
    },
    {
      "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/ServiceContextModule\/ServiceContext",
      "isActive" : true,
      "type" : "reference"
    },
    {
      "text" : "s by declaring the type of value they “key” at compile-time.",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "To give your ",
      "type" : "text"
    },
    {
      "code" : "ServiceContextKey",
      "type" : "codeVoice"
    },
    {
      "text" : " an explicit name, override the ",
      "type" : "text"
    },
    {
      "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/ServiceContextModule\/ServiceContextKey\/nameOverride-6shk1",
      "isActive" : true,
      "type" : "reference"
    },
    {
      "text" : " property.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "ServiceContextKey"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/ServiceContextModule\/ServiceContextKey",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "ServiceContextKey"
    }
  ],
  "role" : "symbol",
  "title" : "ServiceContextKey",
  "type" : "topic",
  "url" : "\/documentation\/servicecontextmodule\/servicecontextkey"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/ServiceContextModule/ServiceContextKey/nameOverride-6shk1": {
  "abstract" : [
    {
      "text" : "The human-readable name of this key.",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "This name will be used instead of the type name when a value is printed.",
      "type" : "text"
    }
  ],
  "defaultImplementations" : 1,
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "static"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "keyword",
      "text" : "var"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "nameOverride"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:SS",
      "text" : "String"
    },
    {
      "kind" : "text",
      "text" : "?"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/ServiceContextModule\/ServiceContextKey\/nameOverride-6shk1",
  "kind" : "symbol",
  "required" : true,
  "role" : "symbol",
  "title" : "nameOverride",
  "type" : "topic",
  "url" : "\/documentation\/servicecontextmodule\/servicecontextkey\/nameoverride-6shk1"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/s8SendableP": {
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/s8SendableP",
  "title" : "Swift.Sendable",
  "type" : "unresolvable"
}
}
}