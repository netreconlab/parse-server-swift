{
  "includedArchiveIdentifiers" : [
    "edu.uky.cs.netreconlab.ParseServerSwift"
  ],
  "interfaceLanguages" : {
    "swift" : [
      {
        "path" : "\/tutorials\/parseserverswift\/adding-parseobjects",
        "title" : "Adding ParseObjects",
        "type" : "project"
      },
      {
        "path" : "\/tutorials\/parseserverswift\/cloud-code",
        "title" : "Cloud Code",
        "type" : "project"
      },
      {
        "path" : "\/tutorials\/parseserverswift\/configuring-parse-server-swift",
        "title" : "Configuring Parse Swift Server",
        "type" : "project"
      },
      {
        "children" : [
          {
            "title" : "Classes",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/coremetrics\/counter\/init(label:dimensions:)",
                "title" : "init(label: String, dimensions: [(String, String)])",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/coremetrics\/counter\/init(label:dimensions:handler:)",
                "title" : "init(label: String, dimensions: [(String, String)], handler: CounterHandler)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/coremetrics\/counter\/dimensions",
                "title" : "let dimensions: [(String, String)]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/coremetrics\/counter\/label",
                "title" : "let label: String",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/coremetrics\/counter\/destroy()",
                "title" : "func destroy()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/counter\/increment()",
                "title" : "func increment()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/counter\/increment(by:)",
                "title" : "func increment<DataType>(by: DataType)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/counter\/reset()",
                "title" : "func reset()",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/coremetrics\/counter\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/coremetrics\/counter\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/coremetrics\/counter",
            "title" : "Counter",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/coremetrics\/floatingpointcounter\/init(label:dimensions:)",
                "title" : "init(label: String, dimensions: [(String, String)])",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/coremetrics\/floatingpointcounter\/init(label:dimensions:handler:)",
                "title" : "init(label: String, dimensions: [(String, String)], handler: FloatingPointCounterHandler)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/coremetrics\/floatingpointcounter\/dimensions",
                "title" : "let dimensions: [(String, String)]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/coremetrics\/floatingpointcounter\/label",
                "title" : "let label: String",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/coremetrics\/floatingpointcounter\/destroy()",
                "title" : "func destroy()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/floatingpointcounter\/increment()",
                "title" : "func increment()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/floatingpointcounter\/increment(by:)",
                "title" : "func increment<DataType>(by: DataType)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/floatingpointcounter\/reset()",
                "title" : "func reset()",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/coremetrics\/floatingpointcounter\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/coremetrics\/floatingpointcounter\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/coremetrics\/floatingpointcounter",
            "title" : "FloatingPointCounter",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/coremetrics\/gauge\/init(label:dimensions:)",
                "title" : "init(label: String, dimensions: [(String, String)])",
                "type" : "init"
              }
            ],
            "path" : "\/documentation\/coremetrics\/gauge",
            "title" : "Gauge",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/coremetrics\/meter\/init(label:dimensions:)",
                "title" : "init(label: String, dimensions: [(String, String)])",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/coremetrics\/meter\/init(label:dimensions:handler:)",
                "title" : "init(label: String, dimensions: [(String, String)], handler: MeterHandler)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/coremetrics\/meter\/dimensions",
                "title" : "let dimensions: [(String, String)]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/coremetrics\/meter\/label",
                "title" : "let label: String",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/coremetrics\/meter\/decrement()",
                "title" : "func decrement()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/meter\/decrement(by:)",
                "title" : "func decrement<DataType>(by: DataType)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/meter\/destroy()",
                "title" : "func destroy()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/meter\/increment()",
                "title" : "func increment()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/meter\/increment(by:)",
                "title" : "func increment<DataType>(by: DataType)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/meter\/set(_:)-6f38",
                "title" : "func set<DataType>(DataType)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/meter\/set(_:)-8bkhi",
                "title" : "func set<DataType>(DataType)",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/coremetrics\/meter\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/coremetrics\/meter\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/coremetrics\/meter",
            "title" : "Meter",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/coremetrics\/multiplexmetricshandler\/init(factories:)",
                "title" : "init(factories: [MetricsFactory])",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/coremetrics\/multiplexmetricshandler\/destroycounter(_:)",
                "title" : "func destroyCounter(CounterHandler)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/multiplexmetricshandler\/destroyfloatingpointcounter(_:)",
                "title" : "func destroyFloatingPointCounter(FloatingPointCounterHandler)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/multiplexmetricshandler\/destroymeter(_:)",
                "title" : "func destroyMeter(MeterHandler)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/multiplexmetricshandler\/destroyrecorder(_:)",
                "title" : "func destroyRecorder(RecorderHandler)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/multiplexmetricshandler\/destroytimer(_:)",
                "title" : "func destroyTimer(TimerHandler)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/multiplexmetricshandler\/makecounter(label:dimensions:)",
                "title" : "func makeCounter(label: String, dimensions: [(String, String)]) -> CounterHandler",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/multiplexmetricshandler\/makefloatingpointcounter(label:dimensions:)",
                "title" : "func makeFloatingPointCounter(label: String, dimensions: [(String, String)]) -> FloatingPointCounterHandler",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/multiplexmetricshandler\/makemeter(label:dimensions:)",
                "title" : "func makeMeter(label: String, dimensions: [(String, String)]) -> MeterHandler",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/multiplexmetricshandler\/makerecorder(label:dimensions:aggregate:)",
                "title" : "func makeRecorder(label: String, dimensions: [(String, String)], aggregate: Bool) -> RecorderHandler",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/multiplexmetricshandler\/maketimer(label:dimensions:)",
                "title" : "func makeTimer(label: String, dimensions: [(String, String)]) -> TimerHandler",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/coremetrics\/multiplexmetricshandler",
            "title" : "MultiplexMetricsHandler",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/coremetrics\/noopmetricshandler\/decrement(by:)",
                "title" : "func decrement(by: Double)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/noopmetricshandler\/destroycounter(_:)",
                "title" : "func destroyCounter(CounterHandler)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/noopmetricshandler\/destroyfloatingpointcounter(_:)",
                "title" : "func destroyFloatingPointCounter(FloatingPointCounterHandler)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/noopmetricshandler\/destroymeter(_:)",
                "title" : "func destroyMeter(MeterHandler)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/noopmetricshandler\/destroyrecorder(_:)",
                "title" : "func destroyRecorder(RecorderHandler)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/noopmetricshandler\/destroytimer(_:)",
                "title" : "func destroyTimer(TimerHandler)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/noopmetricshandler\/increment(by:)-3li5k",
                "title" : "func increment(by: Int64)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/noopmetricshandler\/increment(by:)-7bah6",
                "title" : "func increment(by: Double)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/noopmetricshandler\/makecounter(label:dimensions:)",
                "title" : "func makeCounter(label: String, dimensions: [(String, String)]) -> CounterHandler",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/noopmetricshandler\/makefloatingpointcounter(label:dimensions:)",
                "title" : "func makeFloatingPointCounter(label: String, dimensions: [(String, String)]) -> FloatingPointCounterHandler",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/noopmetricshandler\/makemeter(label:dimensions:)",
                "title" : "func makeMeter(label: String, dimensions: [(String, String)]) -> MeterHandler",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/noopmetricshandler\/makerecorder(label:dimensions:aggregate:)",
                "title" : "func makeRecorder(label: String, dimensions: [(String, String)], aggregate: Bool) -> RecorderHandler",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/noopmetricshandler\/maketimer(label:dimensions:)",
                "title" : "func makeTimer(label: String, dimensions: [(String, String)]) -> TimerHandler",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/noopmetricshandler\/record(_:)-2jh2w",
                "title" : "func record(Double)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/noopmetricshandler\/record(_:)-33tjf",
                "title" : "func record(Int64)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/noopmetricshandler\/recordnanoseconds(_:)",
                "title" : "func recordNanoseconds(Int64)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/noopmetricshandler\/reset()",
                "title" : "func reset()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/noopmetricshandler\/set(_:)-11de",
                "title" : "func set(Double)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/noopmetricshandler\/set(_:)-9r6pn",
                "title" : "func set(Int64)",
                "type" : "method"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/coremetrics\/noopmetricshandler\/instance",
                "title" : "static let instance: NOOPMetricsHandler",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/coremetrics\/noopmetricshandler\/preferdisplayunit(_:)",
                    "title" : "func preferDisplayUnit(TimeUnit)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/coremetrics\/noopmetricshandler\/timerhandler-implementations",
                "title" : "TimerHandler Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/coremetrics\/noopmetricshandler",
            "title" : "NOOPMetricsHandler",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/coremetrics\/recorder\/init(label:dimensions:aggregate:)",
                "title" : "init(label: String, dimensions: [(String, String)], aggregate: Bool)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/coremetrics\/recorder\/init(label:dimensions:aggregate:handler:)",
                "title" : "init(label: String, dimensions: [(String, String)], aggregate: Bool, handler: RecorderHandler)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/coremetrics\/recorder\/aggregate",
                "title" : "let aggregate: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/coremetrics\/recorder\/dimensions",
                "title" : "let dimensions: [(String, String)]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/coremetrics\/recorder\/label",
                "title" : "let label: String",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/coremetrics\/recorder\/destroy()",
                "title" : "func destroy()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/recorder\/record(_:)-4v6dk",
                "title" : "func record<DataType>(DataType)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/recorder\/record(_:)-8gebr",
                "title" : "func record<DataType>(DataType)",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/coremetrics\/recorder\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/coremetrics\/recorder\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/coremetrics\/recorder",
            "title" : "Recorder",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/coremetrics\/timer\/init(label:dimensions:)",
                "title" : "init(label: String, dimensions: [(String, String)])",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/coremetrics\/timer\/init(label:dimensions:handler:)",
                "title" : "init(label: String, dimensions: [(String, String)], handler: TimerHandler)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/coremetrics\/timer\/init(label:dimensions:preferreddisplayunit:)",
                "title" : "init(label: String, dimensions: [(String, String)], preferredDisplayUnit: TimeUnit)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/coremetrics\/timer\/dimensions",
                "title" : "let dimensions: [(String, String)]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/coremetrics\/timer\/label",
                "title" : "let label: String",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/coremetrics\/timer\/destroy()",
                "title" : "func destroy()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/timer\/recordmicroseconds(_:)-35aca",
                "title" : "func recordMicroseconds<DataType>(DataType)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/timer\/recordmicroseconds(_:)-3qrc6",
                "title" : "func recordMicroseconds<DataType>(DataType)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/timer\/recordmilliseconds(_:)-1eh0n",
                "title" : "func recordMilliseconds<DataType>(DataType)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/timer\/recordmilliseconds(_:)-6kuy8",
                "title" : "func recordMilliseconds<DataType>(DataType)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/timer\/recordnanoseconds(_:)-232ir",
                "title" : "func recordNanoseconds<DataType>(DataType)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/timer\/recordnanoseconds(_:)-59nis",
                "title" : "func recordNanoseconds(Int64)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/timer\/recordseconds(_:)-740dd",
                "title" : "func recordSeconds<DataType>(DataType)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/timer\/recordseconds(_:)-7vp6b",
                "title" : "func recordSeconds<DataType>(DataType)",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/coremetrics\/timer\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/coremetrics\/timer\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/coremetrics\/timer",
            "title" : "Timer",
            "type" : "class"
          },
          {
            "title" : "Protocols",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/coremetrics\/counterhandler\/increment(by:)",
                "title" : "func increment(by: Int64)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/counterhandler\/reset()",
                "title" : "func reset()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/coremetrics\/counterhandler",
            "title" : "CounterHandler",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/coremetrics\/floatingpointcounterhandler\/increment(by:)",
                "title" : "func increment(by: Double)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/floatingpointcounterhandler\/reset()",
                "title" : "func reset()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/coremetrics\/floatingpointcounterhandler",
            "title" : "FloatingPointCounterHandler",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/coremetrics\/meterhandler\/decrement(by:)",
                "title" : "func decrement(by: Double)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/meterhandler\/increment(by:)",
                "title" : "func increment(by: Double)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/meterhandler\/set(_:)-7rx8l",
                "title" : "func set(Double)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/meterhandler\/set(_:)-8u6gx",
                "title" : "func set(Int64)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/coremetrics\/meterhandler",
            "title" : "MeterHandler",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/coremetrics\/metricsfactory\/destroycounter(_:)",
                "title" : "func destroyCounter(CounterHandler)",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/coremetrics\/metricsfactory\/destroyfloatingpointcounter(_:)-55jsf",
                        "title" : "func destroyFloatingPointCounter(FloatingPointCounterHandler)",
                        "type" : "method"
                      }
                    ],
                    "title" : "MetricsFactory Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/coremetrics\/metricsfactory\/destroyfloatingpointcounter(_:)-8zdha",
                "title" : "func destroyFloatingPointCounter(FloatingPointCounterHandler)",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/coremetrics\/metricsfactory\/destroymeter(_:)-8alaj",
                        "title" : "func destroyMeter(MeterHandler)",
                        "type" : "method"
                      }
                    ],
                    "title" : "MetricsFactory Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/coremetrics\/metricsfactory\/destroymeter(_:)-3ak7l",
                "title" : "func destroyMeter(MeterHandler)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/metricsfactory\/destroyrecorder(_:)",
                "title" : "func destroyRecorder(RecorderHandler)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/metricsfactory\/destroytimer(_:)",
                "title" : "func destroyTimer(TimerHandler)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/metricsfactory\/makecounter(label:dimensions:)",
                "title" : "func makeCounter(label: String, dimensions: [(String, String)]) -> CounterHandler",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/coremetrics\/metricsfactory\/makefloatingpointcounter(label:dimensions:)-i3cj",
                        "title" : "func makeFloatingPointCounter(label: String, dimensions: [(String, String)]) -> FloatingPointCounterHandler",
                        "type" : "method"
                      }
                    ],
                    "title" : "MetricsFactory Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/coremetrics\/metricsfactory\/makefloatingpointcounter(label:dimensions:)-2irnb",
                "title" : "func makeFloatingPointCounter(label: String, dimensions: [(String, String)]) -> FloatingPointCounterHandler",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/coremetrics\/metricsfactory\/makemeter(label:dimensions:)-42daq",
                        "title" : "func makeMeter(label: String, dimensions: [(String, String)]) -> MeterHandler",
                        "type" : "method"
                      }
                    ],
                    "title" : "MetricsFactory Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/coremetrics\/metricsfactory\/makemeter(label:dimensions:)-1u7ae",
                "title" : "func makeMeter(label: String, dimensions: [(String, String)]) -> MeterHandler",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/metricsfactory\/makerecorder(label:dimensions:aggregate:)",
                "title" : "func makeRecorder(label: String, dimensions: [(String, String)], aggregate: Bool) -> RecorderHandler",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/metricsfactory\/maketimer(label:dimensions:)",
                "title" : "func makeTimer(label: String, dimensions: [(String, String)]) -> TimerHandler",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/coremetrics\/metricsfactory",
            "title" : "MetricsFactory",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/coremetrics\/recorderhandler\/record(_:)-8ck98",
                "title" : "func record(Double)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/recorderhandler\/record(_:)-8tmoj",
                "title" : "func record(Int64)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/coremetrics\/recorderhandler",
            "title" : "RecorderHandler",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/coremetrics\/timerhandler\/preferdisplayunit(_:)-8st88",
                        "title" : "func preferDisplayUnit(TimeUnit)",
                        "type" : "method"
                      }
                    ],
                    "title" : "TimerHandler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/coremetrics\/timerhandler\/preferdisplayunit(_:)-1ldza",
                "title" : "func preferDisplayUnit(TimeUnit)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/timerhandler\/recordnanoseconds(_:)",
                "title" : "func recordNanoseconds(Int64)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/coremetrics\/timerhandler",
            "title" : "TimerHandler",
            "type" : "protocol"
          },
          {
            "title" : "Structures",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/coremetrics\/timeunit\/scalefromnanoseconds",
                "title" : "let scaleFromNanoseconds: UInt64",
                "type" : "property"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/coremetrics\/timeunit\/days",
                "title" : "static let days: TimeUnit",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/coremetrics\/timeunit\/hours",
                "title" : "static let hours: TimeUnit",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/coremetrics\/timeunit\/microseconds",
                "title" : "static let microseconds: TimeUnit",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/coremetrics\/timeunit\/milliseconds",
                "title" : "static let milliseconds: TimeUnit",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/coremetrics\/timeunit\/minutes",
                "title" : "static let minutes: TimeUnit",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/coremetrics\/timeunit\/nanoseconds",
                "title" : "static let nanoseconds: TimeUnit",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/coremetrics\/timeunit\/seconds",
                "title" : "static let seconds: TimeUnit",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/coremetrics\/timeunit\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/coremetrics\/timeunit\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/coremetrics\/timeunit",
            "title" : "TimeUnit",
            "type" : "struct"
          },
          {
            "title" : "Enumerations",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/coremetrics\/metricssystem\/factory",
                "title" : "static var factory: MetricsFactory",
                "type" : "property"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/coremetrics\/metricssystem\/bootstrap(_:)",
                "title" : "static func bootstrap(MetricsFactory)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/coremetrics\/metricssystem\/withwriterlock(_:)",
                "title" : "static func withWriterLock<T>(() throws -> T) rethrows -> T",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/coremetrics\/metricssystem",
            "title" : "MetricsSystem",
            "type" : "enum"
          }
        ],
        "path" : "\/documentation\/coremetrics",
        "title" : "CoreMetrics",
        "type" : "module"
      },
      {
        "children" : [
          {
            "title" : "Protocols",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/diffiehellmankeyagreement\/publickey-swift.associatedtype",
                "title" : "PublicKey",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/diffiehellmankeyagreement\/publickey-swift.property",
                "title" : "var publicKey: Self.PublicKey",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/diffiehellmankeyagreement\/sharedsecretfromkeyagreement(with:)",
                "title" : "func sharedSecretFromKeyAgreement(with: Self.PublicKey) throws -> SharedSecret",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/crypto\/diffiehellmankeyagreement",
            "title" : "DiffieHellmanKeyAgreement",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/digest\/bytecount",
                "title" : "static var byteCount: Int",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/digest\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/crypto\/digest\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/digest\/makeiterator()",
                    "title" : "func makeIterator() -> Array<UInt8>.Iterator",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/crypto\/digest\/sequence-implementations",
                "title" : "Sequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/crypto\/digest",
            "title" : "Digest",
            "type" : "protocol"
          },
          {
            "path" : "\/documentation\/crypto\/hpkediffiehellmanprivatekey",
            "title" : "HPKEDiffieHellmanPrivateKey",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/hpkediffiehellmanprivatekeygeneration\/init()",
                "title" : "init()",
                "type" : "init"
              }
            ],
            "path" : "\/documentation\/crypto\/hpkediffiehellmanprivatekeygeneration",
            "title" : "HPKEDiffieHellmanPrivateKeyGeneration",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/hpkediffiehellmanpublickey\/ephemeralprivatekey",
                "title" : "EphemeralPrivateKey",
                "type" : "associatedtype"
              }
            ],
            "path" : "\/documentation\/crypto\/hpkediffiehellmanpublickey",
            "title" : "HPKEDiffieHellmanPublicKey",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/hpkepublickeyserialization\/init(_:kem:)",
                "title" : "init<D>(D, kem: HPKE.KEM) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/hpkepublickeyserialization\/hpkerepresentation(kem:)",
                "title" : "func hpkeRepresentation(kem: HPKE.KEM) throws -> Data",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/crypto\/hpkepublickeyserialization",
            "title" : "HPKEPublicKeySerialization",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/hashfunction\/digest",
                "title" : "Digest",
                "type" : "associatedtype"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/hashfunction\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/hashfunction\/finalize()",
                "title" : "func finalize() -> Self.Digest",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/crypto\/hashfunction\/update(bufferpointer:)",
                "title" : "func update(bufferPointer: UnsafeRawBufferPointer)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/crypto\/hashfunction\/update(data:)",
                "title" : "func update<D>(data: D)",
                "type" : "method"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/hashfunction\/blockbytecount",
                "title" : "static var blockByteCount: Int",
                "type" : "property"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/hashfunction\/hash(data:)",
                "title" : "static func hash<D>(data: D) -> Self.Digest",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/crypto\/hashfunction",
            "title" : "HashFunction",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/kemprivatekey\/publickey-swift.associatedtype",
                "title" : "PublicKey",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/kemprivatekey\/publickey-swift.property",
                "title" : "var publicKey: Self.PublicKey",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/kemprivatekey\/decapsulate(_:)",
                "title" : "func decapsulate(Data) throws -> SymmetricKey",
                "type" : "method"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/kemprivatekey\/generate()",
                "title" : "static func generate() throws -> Self",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/crypto\/kemprivatekey",
            "title" : "KEMPrivateKey",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/kempublickey\/encapsulate()",
                "title" : "func encapsulate() throws -> KEM.EncapsulationResult",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/crypto\/kempublickey",
            "title" : "KEMPublicKey",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/messageauthenticationcode\/bytecount",
                "title" : "var byteCount: Int",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/messageauthenticationcode\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/crypto\/messageauthenticationcode\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/messageauthenticationcode\/makeiterator()",
                    "title" : "func makeIterator() -> Array<UInt8>.Iterator",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/crypto\/messageauthenticationcode\/sequence-implementations",
                "title" : "Sequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/crypto\/messageauthenticationcode",
            "title" : "MessageAuthenticationCode",
            "type" : "protocol"
          },
          {
            "title" : "Structures",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/hkdf\/derivekey(inputkeymaterial:info:outputbytecount:)",
                "title" : "static func deriveKey<Info>(inputKeyMaterial: SymmetricKey, info: Info, outputByteCount: Int) -> SymmetricKey",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/crypto\/hkdf\/derivekey(inputkeymaterial:outputbytecount:)",
                "title" : "static func deriveKey(inputKeyMaterial: SymmetricKey, outputByteCount: Int) -> SymmetricKey",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/crypto\/hkdf\/derivekey(inputkeymaterial:salt:info:outputbytecount:)",
                "title" : "static func deriveKey<Salt, Info>(inputKeyMaterial: SymmetricKey, salt: Salt, info: Info, outputByteCount: Int) -> SymmetricKey",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/crypto\/hkdf\/derivekey(inputkeymaterial:salt:outputbytecount:)",
                "title" : "static func deriveKey<Salt>(inputKeyMaterial: SymmetricKey, salt: Salt, outputByteCount: Int) -> SymmetricKey",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/crypto\/hkdf\/expand(pseudorandomkey:info:outputbytecount:)",
                "title" : "static func expand<PRK, Info>(pseudoRandomKey: PRK, info: Info?, outputByteCount: Int) -> SymmetricKey",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/crypto\/hkdf\/extract(inputkeymaterial:salt:)",
                "title" : "static func extract<Salt>(inputKeyMaterial: SymmetricKey, salt: Salt?) -> HashedAuthenticationCode<H>",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/crypto\/hkdf",
            "title" : "HKDF",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/hmac\/init(key:)",
                "title" : "init(key: SymmetricKey)",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/hmac\/finalize()",
                "title" : "func finalize() -> HMAC<H>.MAC",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/crypto\/hmac\/update(data:)",
                "title" : "func update<D>(data: D)",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/hmac\/key",
                "title" : "HMAC.Key",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/crypto\/hmac\/mac",
                "title" : "HMAC.MAC",
                "type" : "typealias"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/hmac\/authenticationcode(for:using:)",
                "title" : "static func authenticationCode<D>(for: D, using: SymmetricKey) -> HMAC<H>.MAC",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/crypto\/hmac\/isvalidauthenticationcode(_:authenticating:using:)-5ilt9",
                "title" : "static func isValidAuthenticationCode<C, D>(C, authenticating: D, using: SymmetricKey) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/crypto\/hmac\/isvalidauthenticationcode(_:authenticating:using:)-5jbc8",
                "title" : "static func isValidAuthenticationCode(HMAC<H>.MAC, authenticating: UnsafeRawBufferPointer, using: SymmetricKey) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/crypto\/hmac\/isvalidauthenticationcode(_:authenticating:using:)-8ezmw",
                "title" : "static func isValidAuthenticationCode<D>(HMAC<H>.MAC, authenticating: D, using: SymmetricKey) -> Bool",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/crypto\/hmac",
            "title" : "HMAC",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/hashedauthenticationcode\/bytecount",
                "title" : "var byteCount: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/crypto\/hashedauthenticationcode\/description",
                "title" : "var description: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/crypto\/hashedauthenticationcode\/hashvalue",
                "title" : "var hashValue: Int",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/hashedauthenticationcode\/hash(into:)",
                "title" : "func hash(into: inout Hasher)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/crypto\/hashedauthenticationcode\/withunsafebytes(_:)",
                "title" : "func withUnsafeBytes<R>((UnsafeRawBufferPointer) throws -> R) rethrows -> R",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/hashedauthenticationcode\/element",
                "title" : "HashedAuthenticationCode.Element",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/crypto\/hashedauthenticationcode\/iterator",
                "title" : "HashedAuthenticationCode.Iterator",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hashedauthenticationcode\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/crypto\/hashedauthenticationcode\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hashedauthenticationcode\/==(_:_:)-4o3dh",
                    "title" : "static func == <D>(Self, D) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hashedauthenticationcode\/==(_:_:)-6fwjy",
                    "title" : "static func == (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/crypto\/hashedauthenticationcode\/messageauthenticationcode-implementations",
                "title" : "MessageAuthenticationCode Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hashedauthenticationcode\/lazy",
                    "title" : "var lazy: LazySequence<Self>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hashedauthenticationcode\/publisher",
                    "title" : "var publisher: Publishers.Sequence<Self, Never>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hashedauthenticationcode\/underestimatedcount",
                    "title" : "var underestimatedCount: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hashedauthenticationcode\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hashedauthenticationcode\/compactmap(_:)",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hashedauthenticationcode\/compare(_:_:)",
                    "title" : "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hashedauthenticationcode\/contains(_:)",
                    "title" : "func contains(Self.Element) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hashedauthenticationcode\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hashedauthenticationcode\/count(where:)",
                    "title" : "func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hashedauthenticationcode\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hashedauthenticationcode\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> DropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hashedauthenticationcode\/droplast(_:)",
                    "title" : "func dropLast(Int) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hashedauthenticationcode\/elementsequal(_:)",
                    "title" : "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hashedauthenticationcode\/elementsequal(_:by:)",
                    "title" : "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hashedauthenticationcode\/enumerated()",
                    "title" : "func enumerated() -> EnumeratedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hashedauthenticationcode\/filter(_:)-2wd6x",
                    "title" : "func filter(Predicate<Self.Element>) throws -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hashedauthenticationcode\/filter(_:)-uwyn",
                    "title" : "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hashedauthenticationcode\/first(where:)",
                    "title" : "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hashedauthenticationcode\/flatmap(_:)-3qbo7",
                    "title" : "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hashedauthenticationcode\/flatmap(_:)-6b6i8",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hashedauthenticationcode\/foreach(_:)",
                    "title" : "func forEach((Self.Element) throws -> Void) rethrows",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hashedauthenticationcode\/formatted(_:)",
                    "title" : "func formatted<S>(S) -> S.FormatOutput",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hashedauthenticationcode\/lexicographicallyprecedes(_:)",
                    "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hashedauthenticationcode\/lexicographicallyprecedes(_:by:)",
                    "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hashedauthenticationcode\/makeiterator()",
                    "title" : "func makeIterator() -> Array<UInt8>.Iterator",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hashedauthenticationcode\/map(_:)",
                    "title" : "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hashedauthenticationcode\/max()",
                    "title" : "func max() -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hashedauthenticationcode\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hashedauthenticationcode\/min()",
                    "title" : "func min() -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hashedauthenticationcode\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hashedauthenticationcode\/prefix(_:)",
                    "title" : "func prefix(Int) -> PrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hashedauthenticationcode\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hashedauthenticationcode\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hashedauthenticationcode\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hashedauthenticationcode\/reversed()",
                    "title" : "func reversed() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hashedauthenticationcode\/shuffled()",
                    "title" : "func shuffled() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hashedauthenticationcode\/shuffled(using:)",
                    "title" : "func shuffled<T>(using: inout T) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hashedauthenticationcode\/sorted()",
                    "title" : "func sorted() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hashedauthenticationcode\/sorted(by:)",
                    "title" : "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hashedauthenticationcode\/sorted(using:)-56ekd",
                    "title" : "func sorted<S, Comparator>(using: S) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hashedauthenticationcode\/sorted(using:)-56hbe",
                    "title" : "func sorted<Comparator>(using: Comparator) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hashedauthenticationcode\/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                    "title" : "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hashedauthenticationcode\/split(separator:maxsplits:omittingemptysubsequences:)",
                    "title" : "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hashedauthenticationcode\/starts(with:)",
                    "title" : "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hashedauthenticationcode\/starts(with:by:)",
                    "title" : "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hashedauthenticationcode\/suffix(_:)",
                    "title" : "func suffix(Int) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hashedauthenticationcode\/withcontiguousstorageifavailable(_:)",
                    "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/crypto\/hashedauthenticationcode\/sequence-implementations",
                "title" : "Sequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/crypto\/hashedauthenticationcode",
            "title" : "HashedAuthenticationCode",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/sha256\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/sha256\/finalize()",
                "title" : "func finalize() -> SHA256.Digest",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/crypto\/sha256\/update(bufferpointer:)",
                "title" : "func update(bufferPointer: UnsafeRawBufferPointer)",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/sha256\/digest",
                "title" : "SHA256.Digest",
                "type" : "typealias"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/sha256\/blockbytecount",
                "title" : "static let blockByteCount: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/crypto\/sha256\/bytecount",
                "title" : "static let byteCount: Int",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha256\/update(data:)",
                    "title" : "func update<D>(data: D)",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha256\/hash(data:)",
                    "title" : "static func hash<D>(data: D) -> Self.Digest",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/crypto\/sha256\/hashfunction-implementations",
                "title" : "HashFunction Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/crypto\/sha256",
            "title" : "SHA256",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/sha256digest\/description",
                "title" : "var description: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/crypto\/sha256digest\/hashvalue",
                "title" : "var hashValue: Int",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/sha256digest\/hash(into:)",
                "title" : "func hash(into: inout Hasher)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/crypto\/sha256digest\/withunsafebytes(_:)",
                "title" : "func withUnsafeBytes<R>((UnsafeRawBufferPointer) throws -> R) rethrows -> R",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/sha256digest\/element",
                "title" : "SHA256Digest.Element",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/crypto\/sha256digest\/iterator",
                "title" : "SHA256Digest.Iterator",
                "type" : "typealias"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/sha256digest\/bytecount",
                "title" : "static var byteCount: Int",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha256digest\/==(_:_:)-1a1su",
                    "title" : "static func == <D>(Self, D) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha256digest\/==(_:_:)-1k7o1",
                    "title" : "static func == (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/crypto\/sha256digest\/digest-implementations",
                "title" : "Digest Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha256digest\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/crypto\/sha256digest\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha256digest\/lazy",
                    "title" : "var lazy: LazySequence<Self>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha256digest\/publisher",
                    "title" : "var publisher: Publishers.Sequence<Self, Never>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha256digest\/underestimatedcount",
                    "title" : "var underestimatedCount: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha256digest\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha256digest\/compactmap(_:)",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha256digest\/compare(_:_:)",
                    "title" : "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha256digest\/contains(_:)",
                    "title" : "func contains(Self.Element) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha256digest\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha256digest\/count(where:)",
                    "title" : "func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha256digest\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha256digest\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> DropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha256digest\/droplast(_:)",
                    "title" : "func dropLast(Int) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha256digest\/elementsequal(_:)",
                    "title" : "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha256digest\/elementsequal(_:by:)",
                    "title" : "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha256digest\/enumerated()",
                    "title" : "func enumerated() -> EnumeratedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha256digest\/filter(_:)-7380r",
                    "title" : "func filter(Predicate<Self.Element>) throws -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha256digest\/filter(_:)-8ivo9",
                    "title" : "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha256digest\/first(where:)",
                    "title" : "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha256digest\/flatmap(_:)-1cvsi",
                    "title" : "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha256digest\/flatmap(_:)-388z3",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha256digest\/foreach(_:)",
                    "title" : "func forEach((Self.Element) throws -> Void) rethrows",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha256digest\/formatted(_:)",
                    "title" : "func formatted<S>(S) -> S.FormatOutput",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha256digest\/lexicographicallyprecedes(_:)",
                    "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha256digest\/lexicographicallyprecedes(_:by:)",
                    "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha256digest\/makeiterator()",
                    "title" : "func makeIterator() -> Array<UInt8>.Iterator",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha256digest\/map(_:)",
                    "title" : "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha256digest\/max()",
                    "title" : "func max() -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha256digest\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha256digest\/min()",
                    "title" : "func min() -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha256digest\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha256digest\/prefix(_:)",
                    "title" : "func prefix(Int) -> PrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha256digest\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha256digest\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha256digest\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha256digest\/reversed()",
                    "title" : "func reversed() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha256digest\/shuffled()",
                    "title" : "func shuffled() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha256digest\/shuffled(using:)",
                    "title" : "func shuffled<T>(using: inout T) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha256digest\/sorted()",
                    "title" : "func sorted() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha256digest\/sorted(by:)",
                    "title" : "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha256digest\/sorted(using:)-251tp",
                    "title" : "func sorted<Comparator>(using: Comparator) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha256digest\/sorted(using:)-752jl",
                    "title" : "func sorted<S, Comparator>(using: S) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha256digest\/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                    "title" : "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha256digest\/split(separator:maxsplits:omittingemptysubsequences:)",
                    "title" : "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha256digest\/starts(with:)",
                    "title" : "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha256digest\/starts(with:by:)",
                    "title" : "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha256digest\/suffix(_:)",
                    "title" : "func suffix(Int) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha256digest\/withcontiguousstorageifavailable(_:)",
                    "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/crypto\/sha256digest\/sequence-implementations",
                "title" : "Sequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/crypto\/sha256digest",
            "title" : "SHA256Digest",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/sha384\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/sha384\/finalize()",
                "title" : "func finalize() -> SHA384.Digest",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/crypto\/sha384\/update(bufferpointer:)",
                "title" : "func update(bufferPointer: UnsafeRawBufferPointer)",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/sha384\/digest",
                "title" : "SHA384.Digest",
                "type" : "typealias"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/sha384\/blockbytecount",
                "title" : "static let blockByteCount: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/crypto\/sha384\/bytecount",
                "title" : "static let byteCount: Int",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha384\/update(data:)",
                    "title" : "func update<D>(data: D)",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha384\/hash(data:)",
                    "title" : "static func hash<D>(data: D) -> Self.Digest",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/crypto\/sha384\/hashfunction-implementations",
                "title" : "HashFunction Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/crypto\/sha384",
            "title" : "SHA384",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/sha384digest\/description",
                "title" : "var description: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/crypto\/sha384digest\/hashvalue",
                "title" : "var hashValue: Int",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/sha384digest\/hash(into:)",
                "title" : "func hash(into: inout Hasher)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/crypto\/sha384digest\/withunsafebytes(_:)",
                "title" : "func withUnsafeBytes<R>((UnsafeRawBufferPointer) throws -> R) rethrows -> R",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/sha384digest\/element",
                "title" : "SHA384Digest.Element",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/crypto\/sha384digest\/iterator",
                "title" : "SHA384Digest.Iterator",
                "type" : "typealias"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/sha384digest\/bytecount",
                "title" : "static var byteCount: Int",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha384digest\/==(_:_:)-1a5fs",
                    "title" : "static func == <D>(Self, D) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha384digest\/==(_:_:)-6nv6i",
                    "title" : "static func == (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/crypto\/sha384digest\/digest-implementations",
                "title" : "Digest Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha384digest\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/crypto\/sha384digest\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha384digest\/lazy",
                    "title" : "var lazy: LazySequence<Self>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha384digest\/publisher",
                    "title" : "var publisher: Publishers.Sequence<Self, Never>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha384digest\/underestimatedcount",
                    "title" : "var underestimatedCount: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha384digest\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha384digest\/compactmap(_:)",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha384digest\/compare(_:_:)",
                    "title" : "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha384digest\/contains(_:)",
                    "title" : "func contains(Self.Element) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha384digest\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha384digest\/count(where:)",
                    "title" : "func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha384digest\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha384digest\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> DropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha384digest\/droplast(_:)",
                    "title" : "func dropLast(Int) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha384digest\/elementsequal(_:)",
                    "title" : "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha384digest\/elementsequal(_:by:)",
                    "title" : "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha384digest\/enumerated()",
                    "title" : "func enumerated() -> EnumeratedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha384digest\/filter(_:)-5zdtr",
                    "title" : "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha384digest\/filter(_:)-mpld",
                    "title" : "func filter(Predicate<Self.Element>) throws -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha384digest\/first(where:)",
                    "title" : "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha384digest\/flatmap(_:)-38d9w",
                    "title" : "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha384digest\/flatmap(_:)-4q0j2",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha384digest\/foreach(_:)",
                    "title" : "func forEach((Self.Element) throws -> Void) rethrows",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha384digest\/formatted(_:)",
                    "title" : "func formatted<S>(S) -> S.FormatOutput",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha384digest\/lexicographicallyprecedes(_:)",
                    "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha384digest\/lexicographicallyprecedes(_:by:)",
                    "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha384digest\/makeiterator()",
                    "title" : "func makeIterator() -> Array<UInt8>.Iterator",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha384digest\/map(_:)",
                    "title" : "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha384digest\/max()",
                    "title" : "func max() -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha384digest\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha384digest\/min()",
                    "title" : "func min() -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha384digest\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha384digest\/prefix(_:)",
                    "title" : "func prefix(Int) -> PrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha384digest\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha384digest\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha384digest\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha384digest\/reversed()",
                    "title" : "func reversed() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha384digest\/shuffled()",
                    "title" : "func shuffled() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha384digest\/shuffled(using:)",
                    "title" : "func shuffled<T>(using: inout T) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha384digest\/sorted()",
                    "title" : "func sorted() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha384digest\/sorted(by:)",
                    "title" : "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha384digest\/sorted(using:)-2wxg6",
                    "title" : "func sorted<Comparator>(using: Comparator) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha384digest\/sorted(using:)-43bfs",
                    "title" : "func sorted<S, Comparator>(using: S) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha384digest\/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                    "title" : "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha384digest\/split(separator:maxsplits:omittingemptysubsequences:)",
                    "title" : "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha384digest\/starts(with:)",
                    "title" : "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha384digest\/starts(with:by:)",
                    "title" : "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha384digest\/suffix(_:)",
                    "title" : "func suffix(Int) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha384digest\/withcontiguousstorageifavailable(_:)",
                    "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/crypto\/sha384digest\/sequence-implementations",
                "title" : "Sequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/crypto\/sha384digest",
            "title" : "SHA384Digest",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/sha512\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/sha512\/finalize()",
                "title" : "func finalize() -> SHA512.Digest",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/crypto\/sha512\/update(bufferpointer:)",
                "title" : "func update(bufferPointer: UnsafeRawBufferPointer)",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/sha512\/digest",
                "title" : "SHA512.Digest",
                "type" : "typealias"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/sha512\/blockbytecount",
                "title" : "static let blockByteCount: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/crypto\/sha512\/bytecount",
                "title" : "static let byteCount: Int",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha512\/update(data:)",
                    "title" : "func update<D>(data: D)",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha512\/hash(data:)",
                    "title" : "static func hash<D>(data: D) -> Self.Digest",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/crypto\/sha512\/hashfunction-implementations",
                "title" : "HashFunction Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/crypto\/sha512",
            "title" : "SHA512",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/sha512digest\/description",
                "title" : "var description: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/crypto\/sha512digest\/hashvalue",
                "title" : "var hashValue: Int",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/sha512digest\/hash(into:)",
                "title" : "func hash(into: inout Hasher)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/crypto\/sha512digest\/withunsafebytes(_:)",
                "title" : "func withUnsafeBytes<R>((UnsafeRawBufferPointer) throws -> R) rethrows -> R",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/sha512digest\/element",
                "title" : "SHA512Digest.Element",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/crypto\/sha512digest\/iterator",
                "title" : "SHA512Digest.Iterator",
                "type" : "typealias"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/sha512digest\/bytecount",
                "title" : "static var byteCount: Int",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha512digest\/==(_:_:)-4kvcm",
                    "title" : "static func == <D>(Self, D) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha512digest\/==(_:_:)-5jr32",
                    "title" : "static func == (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/crypto\/sha512digest\/digest-implementations",
                "title" : "Digest Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha512digest\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/crypto\/sha512digest\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha512digest\/lazy",
                    "title" : "var lazy: LazySequence<Self>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha512digest\/publisher",
                    "title" : "var publisher: Publishers.Sequence<Self, Never>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha512digest\/underestimatedcount",
                    "title" : "var underestimatedCount: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha512digest\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha512digest\/compactmap(_:)",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha512digest\/compare(_:_:)",
                    "title" : "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha512digest\/contains(_:)",
                    "title" : "func contains(Self.Element) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha512digest\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha512digest\/count(where:)",
                    "title" : "func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha512digest\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha512digest\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> DropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha512digest\/droplast(_:)",
                    "title" : "func dropLast(Int) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha512digest\/elementsequal(_:)",
                    "title" : "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha512digest\/elementsequal(_:by:)",
                    "title" : "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha512digest\/enumerated()",
                    "title" : "func enumerated() -> EnumeratedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha512digest\/filter(_:)-33qzh",
                    "title" : "func filter(Predicate<Self.Element>) throws -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha512digest\/filter(_:)-5y7ox",
                    "title" : "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha512digest\/first(where:)",
                    "title" : "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha512digest\/flatmap(_:)-4ddny",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha512digest\/flatmap(_:)-87l77",
                    "title" : "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha512digest\/foreach(_:)",
                    "title" : "func forEach((Self.Element) throws -> Void) rethrows",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha512digest\/formatted(_:)",
                    "title" : "func formatted<S>(S) -> S.FormatOutput",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha512digest\/lexicographicallyprecedes(_:)",
                    "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha512digest\/lexicographicallyprecedes(_:by:)",
                    "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha512digest\/makeiterator()",
                    "title" : "func makeIterator() -> Array<UInt8>.Iterator",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha512digest\/map(_:)",
                    "title" : "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha512digest\/max()",
                    "title" : "func max() -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha512digest\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha512digest\/min()",
                    "title" : "func min() -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha512digest\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha512digest\/prefix(_:)",
                    "title" : "func prefix(Int) -> PrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha512digest\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha512digest\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha512digest\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha512digest\/reversed()",
                    "title" : "func reversed() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha512digest\/shuffled()",
                    "title" : "func shuffled() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha512digest\/shuffled(using:)",
                    "title" : "func shuffled<T>(using: inout T) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha512digest\/sorted()",
                    "title" : "func sorted() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha512digest\/sorted(by:)",
                    "title" : "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha512digest\/sorted(using:)-3pdpv",
                    "title" : "func sorted<Comparator>(using: Comparator) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha512digest\/sorted(using:)-4ho75",
                    "title" : "func sorted<S, Comparator>(using: S) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha512digest\/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                    "title" : "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha512digest\/split(separator:maxsplits:omittingemptysubsequences:)",
                    "title" : "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha512digest\/starts(with:)",
                    "title" : "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha512digest\/starts(with:by:)",
                    "title" : "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha512digest\/suffix(_:)",
                    "title" : "func suffix(Int) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sha512digest\/withcontiguousstorageifavailable(_:)",
                    "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/crypto\/sha512digest\/sequence-implementations",
                "title" : "Sequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/crypto\/sha512digest",
            "title" : "SHA512Digest",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Operators",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/sharedsecret\/==(_:_:)-49d47",
                "title" : "static func == <D>(SharedSecret, D) -> Bool",
                "type" : "op"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/sharedsecret\/hkdfderivedsymmetrickey(using:salt:sharedinfo:outputbytecount:)",
                "title" : "func hkdfDerivedSymmetricKey<H, Salt, SI>(using: H.Type, salt: Salt, sharedInfo: SI, outputByteCount: Int) -> SymmetricKey",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/crypto\/sharedsecret\/withunsafebytes(_:)",
                "title" : "func withUnsafeBytes<R>((UnsafeRawBufferPointer) throws -> R) rethrows -> R",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/crypto\/sharedsecret\/x963derivedsymmetrickey(using:sharedinfo:outputbytecount:)",
                "title" : "func x963DerivedSymmetricKey<H, SI>(using: H.Type, sharedInfo: SI, outputByteCount: Int) -> SymmetricKey",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sharedsecret\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/crypto\/sharedsecret\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sharedsecret\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sharedsecret\/==(_:_:)-4s86y",
                    "title" : "static func == (SharedSecret, SharedSecret) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/crypto\/sharedsecret\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sharedsecret\/hashvalue",
                    "title" : "var hashValue: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/sharedsecret\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/crypto\/sharedsecret\/hashable-implementations",
                "title" : "Hashable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/crypto\/sharedsecret",
            "title" : "SharedSecret",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/symmetrickey\/init(data:)",
                "title" : "init<D>(data: D)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/crypto\/symmetrickey\/init(size:)",
                "title" : "init(size: SymmetricKeySize)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/symmetrickey\/bitcount",
                "title" : "var bitCount: Int",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/symmetrickey\/withunsafebytes(_:)",
                "title" : "func withUnsafeBytes<R>((UnsafeRawBufferPointer) throws -> R) rethrows -> R",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/symmetrickey\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/crypto\/symmetrickey\/==(_:_:)",
                    "title" : "static func == (SymmetricKey, SymmetricKey) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/crypto\/symmetrickey\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/crypto\/symmetrickey",
            "title" : "SymmetricKey",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/symmetrickeysize\/init(bitcount:)",
                "title" : "init(bitCount: Int)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/symmetrickeysize\/bitcount",
                "title" : "let bitCount: Int",
                "type" : "property"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/symmetrickeysize\/bits128",
                "title" : "static var bits128: SymmetricKeySize",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/crypto\/symmetrickeysize\/bits192",
                "title" : "static var bits192: SymmetricKeySize",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/crypto\/symmetrickeysize\/bits256",
                "title" : "static var bits256: SymmetricKeySize",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/crypto\/symmetrickeysize",
            "title" : "SymmetricKeySize",
            "type" : "struct"
          },
          {
            "title" : "Enumerations",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Structures",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/aes\/gcm\/nonce\/init()",
                        "title" : "init()",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/crypto\/aes\/gcm\/nonce\/init(data:)",
                        "title" : "init<D>(data: D) throws",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/aes\/gcm\/nonce\/makeiterator()",
                        "title" : "func makeIterator() -> Array<UInt8>.Iterator",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/aes\/gcm\/nonce\/withunsafebytes(_:)",
                        "title" : "func withUnsafeBytes<R>((UnsafeRawBufferPointer) throws -> R) rethrows -> R",
                        "type" : "method"
                      },
                      {
                        "title" : "Type Aliases",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/aes\/gcm\/nonce\/element",
                        "title" : "AES.GCM.Nonce.Element",
                        "type" : "typealias"
                      },
                      {
                        "path" : "\/documentation\/crypto\/aes\/gcm\/nonce\/iterator",
                        "title" : "AES.GCM.Nonce.Iterator",
                        "type" : "typealias"
                      },
                      {
                        "title" : "Default Implementations",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Instance Properties",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/crypto\/aes\/gcm\/nonce\/lazy",
                            "title" : "var lazy: LazySequence<Self>",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/crypto\/aes\/gcm\/nonce\/publisher",
                            "title" : "var publisher: Publishers.Sequence<Self, Never>",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/crypto\/aes\/gcm\/nonce\/underestimatedcount",
                            "title" : "var underestimatedCount: Int",
                            "type" : "property"
                          },
                          {
                            "title" : "Instance Methods",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/crypto\/aes\/gcm\/nonce\/allsatisfy(_:)",
                            "title" : "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/crypto\/aes\/gcm\/nonce\/compactmap(_:)",
                            "title" : "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/crypto\/aes\/gcm\/nonce\/compare(_:_:)",
                            "title" : "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/crypto\/aes\/gcm\/nonce\/contains(_:)",
                            "title" : "func contains(Self.Element) -> Bool",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/crypto\/aes\/gcm\/nonce\/contains(where:)",
                            "title" : "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/crypto\/aes\/gcm\/nonce\/count(where:)",
                            "title" : "func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/crypto\/aes\/gcm\/nonce\/drop(while:)",
                            "title" : "func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/crypto\/aes\/gcm\/nonce\/dropfirst(_:)",
                            "title" : "func dropFirst(Int) -> DropFirstSequence<Self>",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/crypto\/aes\/gcm\/nonce\/droplast(_:)",
                            "title" : "func dropLast(Int) -> [Self.Element]",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/crypto\/aes\/gcm\/nonce\/elementsequal(_:)",
                            "title" : "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/crypto\/aes\/gcm\/nonce\/elementsequal(_:by:)",
                            "title" : "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/crypto\/aes\/gcm\/nonce\/enumerated()",
                            "title" : "func enumerated() -> EnumeratedSequence<Self>",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/crypto\/aes\/gcm\/nonce\/filter(_:)-32gd6",
                            "title" : "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/crypto\/aes\/gcm\/nonce\/filter(_:)-5sc7n",
                            "title" : "func filter(Predicate<Self.Element>) throws -> [Self.Element]",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/crypto\/aes\/gcm\/nonce\/first(where:)",
                            "title" : "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/crypto\/aes\/gcm\/nonce\/flatmap(_:)-4if6r",
                            "title" : "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/crypto\/aes\/gcm\/nonce\/flatmap(_:)-4ijgb",
                            "title" : "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/crypto\/aes\/gcm\/nonce\/foreach(_:)",
                            "title" : "func forEach((Self.Element) throws -> Void) rethrows",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/crypto\/aes\/gcm\/nonce\/formatted(_:)",
                            "title" : "func formatted<S>(S) -> S.FormatOutput",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/crypto\/aes\/gcm\/nonce\/lexicographicallyprecedes(_:)",
                            "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/crypto\/aes\/gcm\/nonce\/lexicographicallyprecedes(_:by:)",
                            "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/crypto\/aes\/gcm\/nonce\/map(_:)",
                            "title" : "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/crypto\/aes\/gcm\/nonce\/max()",
                            "title" : "func max() -> Self.Element?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/crypto\/aes\/gcm\/nonce\/max(by:)",
                            "title" : "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/crypto\/aes\/gcm\/nonce\/min()",
                            "title" : "func min() -> Self.Element?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/crypto\/aes\/gcm\/nonce\/min(by:)",
                            "title" : "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/crypto\/aes\/gcm\/nonce\/prefix(_:)",
                            "title" : "func prefix(Int) -> PrefixSequence<Self>",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/crypto\/aes\/gcm\/nonce\/prefix(while:)",
                            "title" : "func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/crypto\/aes\/gcm\/nonce\/reduce(_:_:)",
                            "title" : "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/crypto\/aes\/gcm\/nonce\/reduce(into:_:)",
                            "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/crypto\/aes\/gcm\/nonce\/reversed()",
                            "title" : "func reversed() -> [Self.Element]",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/crypto\/aes\/gcm\/nonce\/shuffled()",
                            "title" : "func shuffled() -> [Self.Element]",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/crypto\/aes\/gcm\/nonce\/shuffled(using:)",
                            "title" : "func shuffled<T>(using: inout T) -> [Self.Element]",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/crypto\/aes\/gcm\/nonce\/sorted()",
                            "title" : "func sorted() -> [Self.Element]",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/crypto\/aes\/gcm\/nonce\/sorted(by:)",
                            "title" : "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/crypto\/aes\/gcm\/nonce\/sorted(using:)-1cf8s",
                            "title" : "func sorted<S, Comparator>(using: S) -> [Self.Element]",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/crypto\/aes\/gcm\/nonce\/sorted(using:)-6buj2",
                            "title" : "func sorted<Comparator>(using: Comparator) -> [Self.Element]",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/crypto\/aes\/gcm\/nonce\/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                            "title" : "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/crypto\/aes\/gcm\/nonce\/split(separator:maxsplits:omittingemptysubsequences:)",
                            "title" : "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/crypto\/aes\/gcm\/nonce\/starts(with:)",
                            "title" : "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/crypto\/aes\/gcm\/nonce\/starts(with:by:)",
                            "title" : "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/crypto\/aes\/gcm\/nonce\/suffix(_:)",
                            "title" : "func suffix(Int) -> [Self.Element]",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/crypto\/aes\/gcm\/nonce\/withcontiguousstorageifavailable(_:)",
                            "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                            "type" : "method"
                          }
                        ],
                        "path" : "\/documentation\/crypto\/aes\/gcm\/nonce\/sequence-implementations",
                        "title" : "Sequence Implementations",
                        "type" : "symbol"
                      }
                    ],
                    "path" : "\/documentation\/crypto\/aes\/gcm\/nonce",
                    "title" : "AES.GCM.Nonce",
                    "type" : "struct"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/aes\/gcm\/sealedbox\/init(combined:)",
                        "title" : "init<D>(combined: D) throws",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/crypto\/aes\/gcm\/sealedbox\/init(nonce:ciphertext:tag:)",
                        "title" : "init<C, T>(nonce: AES.GCM.Nonce, ciphertext: C, tag: T) throws",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/aes\/gcm\/sealedbox\/ciphertext",
                        "title" : "var ciphertext: Data",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/aes\/gcm\/sealedbox\/combined",
                        "title" : "var combined: Data?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/aes\/gcm\/sealedbox\/nonce",
                        "title" : "var nonce: AES.GCM.Nonce",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/aes\/gcm\/sealedbox\/tag",
                        "title" : "var tag: Data",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/crypto\/aes\/gcm\/sealedbox",
                    "title" : "AES.GCM.SealedBox",
                    "type" : "struct"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/aes\/gcm\/open(_:using:)",
                    "title" : "static func open(AES.GCM.SealedBox, using: SymmetricKey) throws -> Data",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/aes\/gcm\/open(_:using:authenticating:)",
                    "title" : "static func open<AuthenticatedData>(AES.GCM.SealedBox, using: SymmetricKey, authenticating: AuthenticatedData) throws -> Data",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/aes\/gcm\/seal(_:using:nonce:)",
                    "title" : "static func seal<Plaintext>(Plaintext, using: SymmetricKey, nonce: AES.GCM.Nonce?) throws -> AES.GCM.SealedBox",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/aes\/gcm\/seal(_:using:nonce:authenticating:)",
                    "title" : "static func seal<Plaintext, AuthenticatedData>(Plaintext, using: SymmetricKey, nonce: AES.GCM.Nonce?, authenticating: AuthenticatedData) throws -> AES.GCM.SealedBox",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/crypto\/aes\/gcm",
                "title" : "AES.GCM",
                "type" : "enum"
              },
              {
                "children" : [
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/aes\/keywrap\/unwrap(_:using:)",
                    "title" : "static func unwrap<WrappedKey>(WrappedKey, using: SymmetricKey) throws -> SymmetricKey",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/aes\/keywrap\/wrap(_:using:)",
                    "title" : "static func wrap(SymmetricKey, using: SymmetricKey) throws -> Data",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/crypto\/aes\/keywrap",
                "title" : "AES.KeyWrap",
                "type" : "enum"
              }
            ],
            "path" : "\/documentation\/crypto\/aes",
            "title" : "AES",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/chachapoly\/nonce\/init()",
                    "title" : "init()",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/crypto\/chachapoly\/nonce\/init(data:)",
                    "title" : "init<D>(data: D) throws",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/chachapoly\/nonce\/makeiterator()",
                    "title" : "func makeIterator() -> Array<UInt8>.Iterator",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/chachapoly\/nonce\/withunsafebytes(_:)",
                    "title" : "func withUnsafeBytes<R>((UnsafeRawBufferPointer) throws -> R) rethrows -> R",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/chachapoly\/nonce\/element",
                    "title" : "ChaChaPoly.Nonce.Element",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/crypto\/chachapoly\/nonce\/iterator",
                    "title" : "ChaChaPoly.Nonce.Iterator",
                    "type" : "typealias"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/chachapoly\/nonce\/lazy",
                        "title" : "var lazy: LazySequence<Self>",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/chachapoly\/nonce\/publisher",
                        "title" : "var publisher: Publishers.Sequence<Self, Never>",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/chachapoly\/nonce\/underestimatedcount",
                        "title" : "var underestimatedCount: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/chachapoly\/nonce\/allsatisfy(_:)",
                        "title" : "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/chachapoly\/nonce\/compactmap(_:)",
                        "title" : "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/chachapoly\/nonce\/compare(_:_:)",
                        "title" : "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/chachapoly\/nonce\/contains(_:)",
                        "title" : "func contains(Self.Element) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/chachapoly\/nonce\/contains(where:)",
                        "title" : "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/chachapoly\/nonce\/count(where:)",
                        "title" : "func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/chachapoly\/nonce\/drop(while:)",
                        "title" : "func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/chachapoly\/nonce\/dropfirst(_:)",
                        "title" : "func dropFirst(Int) -> DropFirstSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/chachapoly\/nonce\/droplast(_:)",
                        "title" : "func dropLast(Int) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/chachapoly\/nonce\/elementsequal(_:)",
                        "title" : "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/chachapoly\/nonce\/elementsequal(_:by:)",
                        "title" : "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/chachapoly\/nonce\/enumerated()",
                        "title" : "func enumerated() -> EnumeratedSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/chachapoly\/nonce\/filter(_:)-6eh9u",
                        "title" : "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/chachapoly\/nonce\/filter(_:)-7txam",
                        "title" : "func filter(Predicate<Self.Element>) throws -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/chachapoly\/nonce\/first(where:)",
                        "title" : "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/chachapoly\/nonce\/flatmap(_:)-43os6",
                        "title" : "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/chachapoly\/nonce\/flatmap(_:)-5xyhv",
                        "title" : "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/chachapoly\/nonce\/foreach(_:)",
                        "title" : "func forEach((Self.Element) throws -> Void) rethrows",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/chachapoly\/nonce\/formatted(_:)",
                        "title" : "func formatted<S>(S) -> S.FormatOutput",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/chachapoly\/nonce\/lexicographicallyprecedes(_:)",
                        "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/chachapoly\/nonce\/lexicographicallyprecedes(_:by:)",
                        "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/chachapoly\/nonce\/map(_:)",
                        "title" : "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/chachapoly\/nonce\/max()",
                        "title" : "func max() -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/chachapoly\/nonce\/max(by:)",
                        "title" : "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/chachapoly\/nonce\/min()",
                        "title" : "func min() -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/chachapoly\/nonce\/min(by:)",
                        "title" : "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/chachapoly\/nonce\/prefix(_:)",
                        "title" : "func prefix(Int) -> PrefixSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/chachapoly\/nonce\/prefix(while:)",
                        "title" : "func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/chachapoly\/nonce\/reduce(_:_:)",
                        "title" : "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/chachapoly\/nonce\/reduce(into:_:)",
                        "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/chachapoly\/nonce\/reversed()",
                        "title" : "func reversed() -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/chachapoly\/nonce\/shuffled()",
                        "title" : "func shuffled() -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/chachapoly\/nonce\/shuffled(using:)",
                        "title" : "func shuffled<T>(using: inout T) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/chachapoly\/nonce\/sorted()",
                        "title" : "func sorted() -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/chachapoly\/nonce\/sorted(by:)",
                        "title" : "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/chachapoly\/nonce\/sorted(using:)-1cra1",
                        "title" : "func sorted<S, Comparator>(using: S) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/chachapoly\/nonce\/sorted(using:)-9sem2",
                        "title" : "func sorted<Comparator>(using: Comparator) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/chachapoly\/nonce\/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                        "title" : "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/chachapoly\/nonce\/split(separator:maxsplits:omittingemptysubsequences:)",
                        "title" : "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/chachapoly\/nonce\/starts(with:)",
                        "title" : "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/chachapoly\/nonce\/starts(with:by:)",
                        "title" : "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/chachapoly\/nonce\/suffix(_:)",
                        "title" : "func suffix(Int) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/chachapoly\/nonce\/withcontiguousstorageifavailable(_:)",
                        "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/crypto\/chachapoly\/nonce\/sequence-implementations",
                    "title" : "Sequence Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/crypto\/chachapoly\/nonce",
                "title" : "ChaChaPoly.Nonce",
                "type" : "struct"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/chachapoly\/sealedbox\/init(combined:)",
                    "title" : "init<D>(combined: D) throws",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/crypto\/chachapoly\/sealedbox\/init(nonce:ciphertext:tag:)",
                    "title" : "init<C, T>(nonce: ChaChaPoly.Nonce, ciphertext: C, tag: T) throws",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/chachapoly\/sealedbox\/ciphertext",
                    "title" : "var ciphertext: Data",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/crypto\/chachapoly\/sealedbox\/combined",
                    "title" : "let combined: Data",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/crypto\/chachapoly\/sealedbox\/nonce",
                    "title" : "var nonce: ChaChaPoly.Nonce",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/crypto\/chachapoly\/sealedbox\/tag",
                    "title" : "var tag: Data",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/crypto\/chachapoly\/sealedbox",
                "title" : "ChaChaPoly.SealedBox",
                "type" : "struct"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/chachapoly\/open(_:using:)",
                "title" : "static func open(ChaChaPoly.SealedBox, using: SymmetricKey) throws -> Data",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/crypto\/chachapoly\/open(_:using:authenticating:)",
                "title" : "static func open<AuthenticatedData>(ChaChaPoly.SealedBox, using: SymmetricKey, authenticating: AuthenticatedData) throws -> Data",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/crypto\/chachapoly\/seal(_:using:nonce:)",
                "title" : "static func seal<Plaintext>(Plaintext, using: SymmetricKey, nonce: ChaChaPoly.Nonce?) throws -> ChaChaPoly.SealedBox",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/crypto\/chachapoly\/seal(_:using:nonce:authenticating:)",
                "title" : "static func seal<Plaintext, AuthenticatedData>(Plaintext, using: SymmetricKey, nonce: ChaChaPoly.Nonce?, authenticating: AuthenticatedData) throws -> ChaChaPoly.SealedBox",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/crypto\/chachapoly",
            "title" : "ChaChaPoly",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Operators",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/cryptokitasn1error\/==(_:_:)",
                "title" : "static func == (CryptoKitASN1Error, CryptoKitASN1Error) -> Bool",
                "type" : "op"
              },
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/cryptokitasn1error\/invalidasn1integerencoding",
                "title" : "case invalidASN1IntegerEncoding",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/crypto\/cryptokitasn1error\/invalidasn1object",
                "title" : "case invalidASN1Object",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/crypto\/cryptokitasn1error\/invalidfieldidentifier",
                "title" : "case invalidFieldIdentifier",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/crypto\/cryptokitasn1error\/invalidobjectidentifier",
                "title" : "case invalidObjectIdentifier",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/crypto\/cryptokitasn1error\/invalidpemdocument",
                "title" : "case invalidPEMDocument",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/crypto\/cryptokitasn1error\/truncatedasn1field",
                "title" : "case truncatedASN1Field",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/crypto\/cryptokitasn1error\/unexpectedfieldtype",
                "title" : "case unexpectedFieldType",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/crypto\/cryptokitasn1error\/unsupportedfieldlength",
                "title" : "case unsupportedFieldLength",
                "type" : "case"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/cryptokitasn1error\/hashvalue",
                "title" : "var hashValue: Int",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/cryptokitasn1error\/hash(into:)",
                "title" : "func hash(into: inout Hasher)",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/cryptokitasn1error\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/crypto\/cryptokitasn1error\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/cryptokitasn1error\/localizeddescription",
                    "title" : "var localizedDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/crypto\/cryptokitasn1error\/error-implementations",
                "title" : "Error Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/crypto\/cryptokitasn1error",
            "title" : "CryptoKitASN1Error",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/cryptokiterror\/authenticationfailure",
                "title" : "case authenticationFailure",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/crypto\/cryptokiterror\/incorrectkeysize",
                "title" : "case incorrectKeySize",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/crypto\/cryptokiterror\/incorrectparametersize",
                "title" : "case incorrectParameterSize",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/crypto\/cryptokiterror\/invalidparameter",
                "title" : "case invalidParameter",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/crypto\/cryptokiterror\/underlyingcorecryptoerror(error:)",
                "title" : "case underlyingCoreCryptoError(error: Int32)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/crypto\/cryptokiterror\/unwrapfailure",
                "title" : "case unwrapFailure",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/crypto\/cryptokiterror\/wrapfailure",
                "title" : "case wrapFailure",
                "type" : "case"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/cryptokiterror\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/crypto\/cryptokiterror\/==(_:_:)",
                    "title" : "static func == (CryptoKitError, CryptoKitError) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/crypto\/cryptokiterror\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/cryptokiterror\/localizeddescription",
                    "title" : "var localizedDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/crypto\/cryptokiterror\/error-implementations",
                "title" : "Error Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/cryptokiterror\/hashvalue",
                    "title" : "var hashValue: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/cryptokiterror\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/crypto\/cryptokiterror\/hashable-implementations",
                "title" : "Hashable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/crypto\/cryptokiterror",
            "title" : "CryptoKitError",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Structures",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/curve25519\/keyagreement\/privatekey\/init()",
                        "title" : "init()",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/crypto\/curve25519\/keyagreement\/privatekey\/init(rawrepresentation:)",
                        "title" : "init<D>(rawRepresentation: D) throws",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/curve25519\/keyagreement\/privatekey\/publickey-swift.property",
                        "title" : "var publicKey: Curve25519.KeyAgreement.PublicKey",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/curve25519\/keyagreement\/privatekey\/rawrepresentation",
                        "title" : "var rawRepresentation: Data",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/curve25519\/keyagreement\/privatekey\/sharedsecretfromkeyagreement(with:)",
                        "title" : "func sharedSecretFromKeyAgreement(with: Curve25519.KeyAgreement.PublicKey) throws -> SharedSecret",
                        "type" : "method"
                      },
                      {
                        "title" : "Type Aliases",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/curve25519\/keyagreement\/privatekey\/publickey-swift.typealias",
                        "title" : "Curve25519.KeyAgreement.PrivateKey.PublicKey",
                        "type" : "typealias"
                      }
                    ],
                    "path" : "\/documentation\/crypto\/curve25519\/keyagreement\/privatekey",
                    "title" : "Curve25519.KeyAgreement.PrivateKey",
                    "type" : "struct"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/curve25519\/keyagreement\/publickey\/init(rawrepresentation:)",
                        "title" : "init<D>(rawRepresentation: D) throws",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/curve25519\/keyagreement\/publickey\/rawrepresentation",
                        "title" : "var rawRepresentation: Data",
                        "type" : "property"
                      },
                      {
                        "title" : "Type Aliases",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/curve25519\/keyagreement\/publickey\/hpkeephemeralprivatekey",
                        "title" : "Curve25519.KeyAgreement.PublicKey.HPKEEphemeralPrivateKey",
                        "type" : "typealias"
                      },
                      {
                        "title" : "Default Implementations",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Type Aliases",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/crypto\/curve25519\/keyagreement\/publickey\/ephemeralprivatekey",
                            "title" : "Curve25519.KeyAgreement.PublicKey.EphemeralPrivateKey",
                            "type" : "typealias"
                          }
                        ],
                        "path" : "\/documentation\/crypto\/curve25519\/keyagreement\/publickey\/hpkediffiehellmanpublickey-implementations",
                        "title" : "HPKEDiffieHellmanPublicKey Implementations",
                        "type" : "symbol"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Initializers",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/crypto\/curve25519\/keyagreement\/publickey\/init(_:kem:)",
                            "title" : "init<D>(D, kem: HPKE.KEM) throws",
                            "type" : "init"
                          },
                          {
                            "title" : "Instance Methods",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/crypto\/curve25519\/keyagreement\/publickey\/hpkerepresentation(kem:)",
                            "title" : "func hpkeRepresentation(kem: HPKE.KEM) throws -> Data",
                            "type" : "method"
                          }
                        ],
                        "path" : "\/documentation\/crypto\/curve25519\/keyagreement\/publickey\/hpkepublickeyserialization-implementations",
                        "title" : "HPKEPublicKeySerialization Implementations",
                        "type" : "symbol"
                      }
                    ],
                    "path" : "\/documentation\/crypto\/curve25519\/keyagreement\/publickey",
                    "title" : "Curve25519.KeyAgreement.PublicKey",
                    "type" : "struct"
                  }
                ],
                "path" : "\/documentation\/crypto\/curve25519\/keyagreement",
                "title" : "Curve25519.KeyAgreement",
                "type" : "enum"
              },
              {
                "children" : [
                  {
                    "title" : "Structures",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/curve25519\/signing\/privatekey\/init()",
                        "title" : "init()",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/crypto\/curve25519\/signing\/privatekey\/init(rawrepresentation:)",
                        "title" : "init<D>(rawRepresentation: D) throws",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/curve25519\/signing\/privatekey\/publickey",
                        "title" : "var publicKey: Curve25519.Signing.PublicKey",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/curve25519\/signing\/privatekey\/rawrepresentation",
                        "title" : "var rawRepresentation: Data",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/curve25519\/signing\/privatekey\/signature(for:)",
                        "title" : "func signature<D>(for: D) throws -> Data",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/crypto\/curve25519\/signing\/privatekey",
                    "title" : "Curve25519.Signing.PrivateKey",
                    "type" : "struct"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/curve25519\/signing\/publickey\/init(rawrepresentation:)",
                        "title" : "init<D>(rawRepresentation: D) throws",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/curve25519\/signing\/publickey\/rawrepresentation",
                        "title" : "var rawRepresentation: Data",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/curve25519\/signing\/publickey\/isvalidsignature(_:for:)",
                        "title" : "func isValidSignature<S, D>(S, for: D) -> Bool",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/crypto\/curve25519\/signing\/publickey",
                    "title" : "Curve25519.Signing.PublicKey",
                    "type" : "struct"
                  }
                ],
                "path" : "\/documentation\/crypto\/curve25519\/signing",
                "title" : "Curve25519.Signing",
                "type" : "enum"
              }
            ],
            "path" : "\/documentation\/crypto\/curve25519",
            "title" : "Curve25519",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Sending and receiving messages",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hpke\/sender\/init(recipientkey:ciphersuite:info:)",
                    "title" : "init<PK>(recipientKey: PK, ciphersuite: HPKE.Ciphersuite, info: Data) throws",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hpke\/sender\/init(recipientkey:ciphersuite:info:authenticatedby:)",
                    "title" : "init<SK>(recipientKey: SK.PublicKey, ciphersuite: HPKE.Ciphersuite, info: Data, authenticatedBy: SK) throws",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hpke\/sender\/init(recipientkey:ciphersuite:info:authenticatedby:presharedkey:presharedkeyidentifier:)",
                    "title" : "init<SK>(recipientKey: SK.PublicKey, ciphersuite: HPKE.Ciphersuite, info: Data, authenticatedBy: SK, presharedKey: SymmetricKey, presharedKeyIdentifier: Data) throws",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hpke\/sender\/init(recipientkey:ciphersuite:info:presharedkey:presharedkeyidentifier:)",
                    "title" : "init<PK>(recipientKey: PK, ciphersuite: HPKE.Ciphersuite, info: Data, presharedKey: SymmetricKey, presharedKeyIdentifier: Data) throws",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hpke\/sender\/encapsulatedkey",
                    "title" : "let encapsulatedKey: Data",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hpke\/sender\/exportsecret(context:outputbytecount:)",
                    "title" : "func exportSecret<Context>(context: Context, outputByteCount: Int) throws -> SymmetricKey",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hpke\/sender\/seal(_:)",
                    "title" : "func seal<M>(M) throws -> Data",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hpke\/sender\/seal(_:authenticating:)",
                    "title" : "func seal<M, AD>(M, authenticating: AD) throws -> Data",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/crypto\/hpke\/sender",
                "title" : "HPKE.Sender",
                "type" : "struct"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hpke\/recipient\/init(privatekey:ciphersuite:info:encapsulatedkey:)",
                    "title" : "init<SK>(privateKey: SK, ciphersuite: HPKE.Ciphersuite, info: Data, encapsulatedKey: Data) throws",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hpke\/recipient\/init(privatekey:ciphersuite:info:encapsulatedkey:authenticatedby:)",
                    "title" : "init<SK>(privateKey: SK, ciphersuite: HPKE.Ciphersuite, info: Data, encapsulatedKey: Data, authenticatedBy: SK.PublicKey) throws",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hpke\/recipient\/init(privatekey:ciphersuite:info:encapsulatedkey:authenticatedby:presharedkey:presharedkeyidentifier:)",
                    "title" : "init<SK>(privateKey: SK, ciphersuite: HPKE.Ciphersuite, info: Data, encapsulatedKey: Data, authenticatedBy: SK.PublicKey, presharedKey: SymmetricKey, presharedKeyIdentifier: Data) throws",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hpke\/recipient\/init(privatekey:ciphersuite:info:encapsulatedkey:presharedkey:presharedkeyidentifier:)",
                    "title" : "init<SK>(privateKey: SK, ciphersuite: HPKE.Ciphersuite, info: Data, encapsulatedKey: Data, presharedKey: SymmetricKey, presharedKeyIdentifier: Data) throws",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hpke\/recipient\/exportsecret(context:outputbytecount:)",
                    "title" : "func exportSecret<Context>(context: Context, outputByteCount: Int) throws -> SymmetricKey",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hpke\/recipient\/open(_:)",
                    "title" : "func open<C>(C) throws -> Data",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hpke\/recipient\/open(_:authenticating:)",
                    "title" : "func open<C, AD>(C, authenticating: AD) throws -> Data",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/crypto\/hpke\/recipient",
                "title" : "HPKE.Recipient",
                "type" : "struct"
              },
              {
                "title" : "Choosing cryptographic algorithms",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hpke\/ciphersuite\/init(kem:kdf:aead:)",
                    "title" : "init(kem: HPKE.KEM, kdf: HPKE.KDF, aead: HPKE.AEAD)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hpke\/ciphersuite\/aead",
                    "title" : "let aead: HPKE.AEAD",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hpke\/ciphersuite\/kdf",
                    "title" : "let kdf: HPKE.KDF",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hpke\/ciphersuite\/kem",
                    "title" : "let kem: HPKE.KEM",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hpke\/ciphersuite\/curve25519_sha256_chachapoly",
                    "title" : "static let Curve25519_SHA256_ChachaPoly: HPKE.Ciphersuite",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hpke\/ciphersuite\/p256_sha256_aes_gcm_256",
                    "title" : "static let P256_SHA256_AES_GCM_256: HPKE.Ciphersuite",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hpke\/ciphersuite\/p384_sha384_aes_gcm_256",
                    "title" : "static let P384_SHA384_AES_GCM_256: HPKE.Ciphersuite",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hpke\/ciphersuite\/p521_sha512_aes_gcm_256",
                    "title" : "static let P521_SHA512_AES_GCM_256: HPKE.Ciphersuite",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/crypto\/hpke\/ciphersuite",
                "title" : "HPKE.Ciphersuite",
                "type" : "struct"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hpke\/aead\/==(_:_:)",
                    "title" : "static func == (HPKE.AEAD, HPKE.AEAD) -> Bool",
                    "type" : "op"
                  },
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hpke\/aead\/aes_gcm_128",
                    "title" : "case AES_GCM_128",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hpke\/aead\/aes_gcm_256",
                    "title" : "case AES_GCM_256",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hpke\/aead\/chachapoly",
                    "title" : "case chaChaPoly",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hpke\/aead\/exportonly",
                    "title" : "case exportOnly",
                    "type" : "case"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hpke\/aead\/hashvalue",
                    "title" : "var hashValue: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hpke\/aead\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hpke\/aead\/allcases-swift.typealias",
                    "title" : "HPKE.AEAD.AllCases",
                    "type" : "typealias"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hpke\/aead\/allcases-swift.type.property",
                    "title" : "static var allCases: [HPKE.AEAD]",
                    "type" : "property"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/hpke\/aead\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/crypto\/hpke\/aead\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/crypto\/hpke\/aead",
                "title" : "HPKE.AEAD",
                "type" : "enum"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hpke\/kdf\/==(_:_:)",
                    "title" : "static func == (HPKE.KDF, HPKE.KDF) -> Bool",
                    "type" : "op"
                  },
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hpke\/kdf\/hkdf_sha256",
                    "title" : "case HKDF_SHA256",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hpke\/kdf\/hkdf_sha384",
                    "title" : "case HKDF_SHA384",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hpke\/kdf\/hkdf_sha512",
                    "title" : "case HKDF_SHA512",
                    "type" : "case"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hpke\/kdf\/hashvalue",
                    "title" : "var hashValue: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hpke\/kdf\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hpke\/kdf\/allcases-swift.typealias",
                    "title" : "HPKE.KDF.AllCases",
                    "type" : "typealias"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hpke\/kdf\/allcases-swift.type.property",
                    "title" : "static var allCases: [HPKE.KDF]",
                    "type" : "property"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/hpke\/kdf\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/crypto\/hpke\/kdf\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/crypto\/hpke\/kdf",
                "title" : "HPKE.KDF",
                "type" : "enum"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hpke\/kem\/==(_:_:)",
                    "title" : "static func == (HPKE.KEM, HPKE.KEM) -> Bool",
                    "type" : "op"
                  },
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hpke\/kem\/curve25519_hkdf_sha256",
                    "title" : "case Curve25519_HKDF_SHA256",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hpke\/kem\/p256_hkdf_sha256",
                    "title" : "case P256_HKDF_SHA256",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hpke\/kem\/p384_hkdf_sha384",
                    "title" : "case P384_HKDF_SHA384",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hpke\/kem\/p521_hkdf_sha512",
                    "title" : "case P521_HKDF_SHA512",
                    "type" : "case"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hpke\/kem\/hashvalue",
                    "title" : "var hashValue: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hpke\/kem\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hpke\/kem\/allcases-swift.typealias",
                    "title" : "HPKE.KEM.AllCases",
                    "type" : "typealias"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hpke\/kem\/allcases-swift.type.property",
                    "title" : "static var allCases: [HPKE.KEM]",
                    "type" : "property"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/hpke\/kem\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/crypto\/hpke\/kem\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/crypto\/hpke\/kem",
                "title" : "HPKE.KEM",
                "type" : "enum"
              },
              {
                "path" : "\/documentation\/crypto\/hpke\/dhkem",
                "title" : "HPKE.DHKEM",
                "type" : "enum"
              },
              {
                "title" : "Handling errors",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hpke\/errors\/==(_:_:)",
                    "title" : "static func == (HPKE.Errors, HPKE.Errors) -> Bool",
                    "type" : "op"
                  },
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hpke\/errors\/ciphertexttooshort",
                    "title" : "case ciphertextTooShort",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hpke\/errors\/expectedpsk",
                    "title" : "case expectedPSK",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hpke\/errors\/exportonlymode",
                    "title" : "case exportOnlyMode",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hpke\/errors\/inconsistentciphersuiteandkey",
                    "title" : "case inconsistentCiphersuiteAndKey",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hpke\/errors\/inconsistentpskinputs",
                    "title" : "case inconsistentPSKInputs",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hpke\/errors\/inconsistentparameters",
                    "title" : "case inconsistentParameters",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hpke\/errors\/outofrangesequencenumber",
                    "title" : "case outOfRangeSequenceNumber",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hpke\/errors\/unexpectedpsk",
                    "title" : "case unexpectedPSK",
                    "type" : "case"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hpke\/errors\/hashvalue",
                    "title" : "var hashValue: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/hpke\/errors\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/hpke\/errors\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/crypto\/hpke\/errors\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/hpke\/errors\/localizeddescription",
                        "title" : "var localizedDescription: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/crypto\/hpke\/errors\/error-implementations",
                    "title" : "Error Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/crypto\/hpke\/errors",
                "title" : "HPKE.Errors",
                "type" : "enum"
              }
            ],
            "path" : "\/documentation\/crypto\/hpke",
            "title" : "HPKE",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/insecure\/md5\/init()",
                    "title" : "init()",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/insecure\/md5\/finalize()",
                    "title" : "func finalize() -> Insecure.MD5.Digest",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/insecure\/md5\/update(bufferpointer:)",
                    "title" : "func update(bufferPointer: UnsafeRawBufferPointer)",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/insecure\/md5\/digest",
                    "title" : "Insecure.MD5.Digest",
                    "type" : "typealias"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/insecure\/md5\/blockbytecount",
                    "title" : "static let blockByteCount: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/crypto\/insecure\/md5\/bytecount",
                    "title" : "static let byteCount: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/md5\/update(data:)",
                        "title" : "func update<D>(data: D)",
                        "type" : "method"
                      },
                      {
                        "title" : "Type Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/md5\/hash(data:)",
                        "title" : "static func hash<D>(data: D) -> Self.Digest",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/crypto\/insecure\/md5\/hashfunction-implementations",
                    "title" : "HashFunction Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/crypto\/insecure\/md5",
                "title" : "Insecure.MD5",
                "type" : "struct"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/insecure\/md5digest\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/crypto\/insecure\/md5digest\/hashvalue",
                    "title" : "var hashValue: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/insecure\/md5digest\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/insecure\/md5digest\/withunsafebytes(_:)",
                    "title" : "func withUnsafeBytes<R>((UnsafeRawBufferPointer) throws -> R) rethrows -> R",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/insecure\/md5digest\/element",
                    "title" : "Insecure.MD5Digest.Element",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/crypto\/insecure\/md5digest\/iterator",
                    "title" : "Insecure.MD5Digest.Iterator",
                    "type" : "typealias"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/insecure\/md5digest\/bytecount",
                    "title" : "static var byteCount: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/md5digest\/==(_:_:)-4bgyt",
                        "title" : "static func == <D>(Self, D) -> Bool",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/md5digest\/==(_:_:)-4kdxb",
                        "title" : "static func == (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/crypto\/insecure\/md5digest\/digest-implementations",
                    "title" : "Digest Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/md5digest\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/crypto\/insecure\/md5digest\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/md5digest\/lazy",
                        "title" : "var lazy: LazySequence<Self>",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/md5digest\/publisher",
                        "title" : "var publisher: Publishers.Sequence<Self, Never>",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/md5digest\/underestimatedcount",
                        "title" : "var underestimatedCount: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/md5digest\/allsatisfy(_:)",
                        "title" : "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/md5digest\/compactmap(_:)",
                        "title" : "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/md5digest\/compare(_:_:)",
                        "title" : "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/md5digest\/contains(_:)",
                        "title" : "func contains(Self.Element) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/md5digest\/contains(where:)",
                        "title" : "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/md5digest\/count(where:)",
                        "title" : "func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/md5digest\/drop(while:)",
                        "title" : "func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/md5digest\/dropfirst(_:)",
                        "title" : "func dropFirst(Int) -> DropFirstSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/md5digest\/droplast(_:)",
                        "title" : "func dropLast(Int) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/md5digest\/elementsequal(_:)",
                        "title" : "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/md5digest\/elementsequal(_:by:)",
                        "title" : "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/md5digest\/enumerated()",
                        "title" : "func enumerated() -> EnumeratedSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/md5digest\/filter(_:)-50cy5",
                        "title" : "func filter(Predicate<Self.Element>) throws -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/md5digest\/filter(_:)-9qig7",
                        "title" : "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/md5digest\/first(where:)",
                        "title" : "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/md5digest\/flatmap(_:)-9eg6h",
                        "title" : "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/md5digest\/flatmap(_:)-g6s1",
                        "title" : "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/md5digest\/foreach(_:)",
                        "title" : "func forEach((Self.Element) throws -> Void) rethrows",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/md5digest\/formatted(_:)",
                        "title" : "func formatted<S>(S) -> S.FormatOutput",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/md5digest\/lexicographicallyprecedes(_:)",
                        "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/md5digest\/lexicographicallyprecedes(_:by:)",
                        "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/md5digest\/makeiterator()",
                        "title" : "func makeIterator() -> Array<UInt8>.Iterator",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/md5digest\/map(_:)",
                        "title" : "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/md5digest\/max()",
                        "title" : "func max() -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/md5digest\/max(by:)",
                        "title" : "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/md5digest\/min()",
                        "title" : "func min() -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/md5digest\/min(by:)",
                        "title" : "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/md5digest\/prefix(_:)",
                        "title" : "func prefix(Int) -> PrefixSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/md5digest\/prefix(while:)",
                        "title" : "func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/md5digest\/reduce(_:_:)",
                        "title" : "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/md5digest\/reduce(into:_:)",
                        "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/md5digest\/reversed()",
                        "title" : "func reversed() -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/md5digest\/shuffled()",
                        "title" : "func shuffled() -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/md5digest\/shuffled(using:)",
                        "title" : "func shuffled<T>(using: inout T) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/md5digest\/sorted()",
                        "title" : "func sorted() -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/md5digest\/sorted(by:)",
                        "title" : "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/md5digest\/sorted(using:)-25x4o",
                        "title" : "func sorted<Comparator>(using: Comparator) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/md5digest\/sorted(using:)-7t5uh",
                        "title" : "func sorted<S, Comparator>(using: S) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/md5digest\/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                        "title" : "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/md5digest\/split(separator:maxsplits:omittingemptysubsequences:)",
                        "title" : "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/md5digest\/starts(with:)",
                        "title" : "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/md5digest\/starts(with:by:)",
                        "title" : "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/md5digest\/suffix(_:)",
                        "title" : "func suffix(Int) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/md5digest\/withcontiguousstorageifavailable(_:)",
                        "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/crypto\/insecure\/md5digest\/sequence-implementations",
                    "title" : "Sequence Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/crypto\/insecure\/md5digest",
                "title" : "Insecure.MD5Digest",
                "type" : "struct"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/insecure\/sha1\/init()",
                    "title" : "init()",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/insecure\/sha1\/finalize()",
                    "title" : "func finalize() -> Insecure.SHA1.Digest",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/insecure\/sha1\/update(bufferpointer:)",
                    "title" : "func update(bufferPointer: UnsafeRawBufferPointer)",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/insecure\/sha1\/digest",
                    "title" : "Insecure.SHA1.Digest",
                    "type" : "typealias"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/insecure\/sha1\/blockbytecount",
                    "title" : "static let blockByteCount: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/crypto\/insecure\/sha1\/bytecount",
                    "title" : "static let byteCount: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/sha1\/update(data:)",
                        "title" : "func update<D>(data: D)",
                        "type" : "method"
                      },
                      {
                        "title" : "Type Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/sha1\/hash(data:)",
                        "title" : "static func hash<D>(data: D) -> Self.Digest",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/crypto\/insecure\/sha1\/hashfunction-implementations",
                    "title" : "HashFunction Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/crypto\/insecure\/sha1",
                "title" : "Insecure.SHA1",
                "type" : "struct"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/insecure\/sha1digest\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/crypto\/insecure\/sha1digest\/hashvalue",
                    "title" : "var hashValue: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/insecure\/sha1digest\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/crypto\/insecure\/sha1digest\/withunsafebytes(_:)",
                    "title" : "func withUnsafeBytes<R>((UnsafeRawBufferPointer) throws -> R) rethrows -> R",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/insecure\/sha1digest\/element",
                    "title" : "Insecure.SHA1Digest.Element",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/crypto\/insecure\/sha1digest\/iterator",
                    "title" : "Insecure.SHA1Digest.Iterator",
                    "type" : "typealias"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/insecure\/sha1digest\/bytecount",
                    "title" : "static var byteCount: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/sha1digest\/==(_:_:)-33sxh",
                        "title" : "static func == (Self, Self) -> Bool",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/sha1digest\/==(_:_:)-8cfsu",
                        "title" : "static func == <D>(Self, D) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/crypto\/insecure\/sha1digest\/digest-implementations",
                    "title" : "Digest Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/sha1digest\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/crypto\/insecure\/sha1digest\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/sha1digest\/lazy",
                        "title" : "var lazy: LazySequence<Self>",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/sha1digest\/publisher",
                        "title" : "var publisher: Publishers.Sequence<Self, Never>",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/sha1digest\/underestimatedcount",
                        "title" : "var underestimatedCount: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/sha1digest\/allsatisfy(_:)",
                        "title" : "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/sha1digest\/compactmap(_:)",
                        "title" : "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/sha1digest\/compare(_:_:)",
                        "title" : "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/sha1digest\/contains(_:)",
                        "title" : "func contains(Self.Element) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/sha1digest\/contains(where:)",
                        "title" : "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/sha1digest\/count(where:)",
                        "title" : "func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/sha1digest\/drop(while:)",
                        "title" : "func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/sha1digest\/dropfirst(_:)",
                        "title" : "func dropFirst(Int) -> DropFirstSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/sha1digest\/droplast(_:)",
                        "title" : "func dropLast(Int) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/sha1digest\/elementsequal(_:)",
                        "title" : "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/sha1digest\/elementsequal(_:by:)",
                        "title" : "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/sha1digest\/enumerated()",
                        "title" : "func enumerated() -> EnumeratedSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/sha1digest\/filter(_:)-2jng0",
                        "title" : "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/sha1digest\/filter(_:)-7xm7v",
                        "title" : "func filter(Predicate<Self.Element>) throws -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/sha1digest\/first(where:)",
                        "title" : "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/sha1digest\/flatmap(_:)-2c0d0",
                        "title" : "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/sha1digest\/flatmap(_:)-7zc70",
                        "title" : "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/sha1digest\/foreach(_:)",
                        "title" : "func forEach((Self.Element) throws -> Void) rethrows",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/sha1digest\/formatted(_:)",
                        "title" : "func formatted<S>(S) -> S.FormatOutput",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/sha1digest\/lexicographicallyprecedes(_:)",
                        "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/sha1digest\/lexicographicallyprecedes(_:by:)",
                        "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/sha1digest\/makeiterator()",
                        "title" : "func makeIterator() -> Array<UInt8>.Iterator",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/sha1digest\/map(_:)",
                        "title" : "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/sha1digest\/max()",
                        "title" : "func max() -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/sha1digest\/max(by:)",
                        "title" : "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/sha1digest\/min()",
                        "title" : "func min() -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/sha1digest\/min(by:)",
                        "title" : "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/sha1digest\/prefix(_:)",
                        "title" : "func prefix(Int) -> PrefixSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/sha1digest\/prefix(while:)",
                        "title" : "func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/sha1digest\/reduce(_:_:)",
                        "title" : "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/sha1digest\/reduce(into:_:)",
                        "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/sha1digest\/reversed()",
                        "title" : "func reversed() -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/sha1digest\/shuffled()",
                        "title" : "func shuffled() -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/sha1digest\/shuffled(using:)",
                        "title" : "func shuffled<T>(using: inout T) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/sha1digest\/sorted()",
                        "title" : "func sorted() -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/sha1digest\/sorted(by:)",
                        "title" : "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/sha1digest\/sorted(using:)-161n7",
                        "title" : "func sorted<Comparator>(using: Comparator) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/sha1digest\/sorted(using:)-7vm35",
                        "title" : "func sorted<S, Comparator>(using: S) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/sha1digest\/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                        "title" : "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/sha1digest\/split(separator:maxsplits:omittingemptysubsequences:)",
                        "title" : "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/sha1digest\/starts(with:)",
                        "title" : "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/sha1digest\/starts(with:by:)",
                        "title" : "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/sha1digest\/suffix(_:)",
                        "title" : "func suffix(Int) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/insecure\/sha1digest\/withcontiguousstorageifavailable(_:)",
                        "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/crypto\/insecure\/sha1digest\/sequence-implementations",
                    "title" : "Sequence Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/crypto\/insecure\/sha1digest",
                "title" : "Insecure.SHA1Digest",
                "type" : "struct"
              }
            ],
            "path" : "\/documentation\/crypto\/insecure",
            "title" : "Insecure",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/kem\/encapsulationresult\/init(sharedsecret:encapsulated:)",
                    "title" : "init(sharedSecret: SymmetricKey, encapsulated: Data)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/crypto\/kem\/encapsulationresult\/encapsulated",
                    "title" : "let encapsulated: Data",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/crypto\/kem\/encapsulationresult\/sharedsecret",
                    "title" : "let sharedSecret: SymmetricKey",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/crypto\/kem\/encapsulationresult",
                "title" : "KEM.EncapsulationResult",
                "type" : "struct"
              }
            ],
            "path" : "\/documentation\/crypto\/kem",
            "title" : "KEM",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Structures",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p256\/keyagreement\/privatekey\/init(compactrepresentable:)",
                        "title" : "init(compactRepresentable: Bool)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p256\/keyagreement\/privatekey\/init(derrepresentation:)",
                        "title" : "init<Bytes>(derRepresentation: Bytes) throws",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p256\/keyagreement\/privatekey\/init(pemrepresentation:)",
                        "title" : "init(pemRepresentation: String) throws",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p256\/keyagreement\/privatekey\/init(rawrepresentation:)",
                        "title" : "init<Bytes>(rawRepresentation: Bytes) throws",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p256\/keyagreement\/privatekey\/init(x963representation:)",
                        "title" : "init<Bytes>(x963Representation: Bytes) throws",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p256\/keyagreement\/privatekey\/derrepresentation",
                        "title" : "var derRepresentation: Data",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p256\/keyagreement\/privatekey\/pemrepresentation",
                        "title" : "var pemRepresentation: String",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p256\/keyagreement\/privatekey\/publickey-swift.property",
                        "title" : "var publicKey: P256.KeyAgreement.PublicKey",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p256\/keyagreement\/privatekey\/rawrepresentation",
                        "title" : "var rawRepresentation: Data",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p256\/keyagreement\/privatekey\/x963representation",
                        "title" : "var x963Representation: Data",
                        "type" : "property"
                      },
                      {
                        "title" : "Default Implementations",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Instance Methods",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/crypto\/p256\/keyagreement\/privatekey\/sharedsecretfromkeyagreement(with:)",
                            "title" : "func sharedSecretFromKeyAgreement(with: P256.KeyAgreement.PublicKey) throws -> SharedSecret",
                            "type" : "method"
                          },
                          {
                            "title" : "Type Aliases",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/crypto\/p256\/keyagreement\/privatekey\/publickey-swift.typealias",
                            "title" : "P256.KeyAgreement.PrivateKey.PublicKey",
                            "type" : "typealias"
                          }
                        ],
                        "path" : "\/documentation\/crypto\/p256\/keyagreement\/privatekey\/diffiehellmankeyagreement-implementations",
                        "title" : "DiffieHellmanKeyAgreement Implementations",
                        "type" : "symbol"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Initializers",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/crypto\/p256\/keyagreement\/privatekey\/init()",
                            "title" : "init()",
                            "type" : "init"
                          }
                        ],
                        "path" : "\/documentation\/crypto\/p256\/keyagreement\/privatekey\/hpkediffiehellmanprivatekeygeneration-implementations",
                        "title" : "HPKEDiffieHellmanPrivateKeyGeneration Implementations",
                        "type" : "symbol"
                      }
                    ],
                    "path" : "\/documentation\/crypto\/p256\/keyagreement\/privatekey",
                    "title" : "P256.KeyAgreement.PrivateKey",
                    "type" : "struct"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p256\/keyagreement\/publickey\/init(compactrepresentation:)",
                        "title" : "init<Bytes>(compactRepresentation: Bytes) throws",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p256\/keyagreement\/publickey\/init(compressedrepresentation:)",
                        "title" : "init<Bytes>(compressedRepresentation: Bytes) throws",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p256\/keyagreement\/publickey\/init(derrepresentation:)",
                        "title" : "init<Bytes>(derRepresentation: Bytes) throws",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p256\/keyagreement\/publickey\/init(pemrepresentation:)",
                        "title" : "init(pemRepresentation: String) throws",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p256\/keyagreement\/publickey\/init(rawrepresentation:)",
                        "title" : "init<D>(rawRepresentation: D) throws",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p256\/keyagreement\/publickey\/init(x963representation:)",
                        "title" : "init<Bytes>(x963Representation: Bytes) throws",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p256\/keyagreement\/publickey\/compactrepresentation",
                        "title" : "var compactRepresentation: Data?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p256\/keyagreement\/publickey\/compressedrepresentation",
                        "title" : "var compressedRepresentation: Data",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p256\/keyagreement\/publickey\/derrepresentation",
                        "title" : "var derRepresentation: Data",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p256\/keyagreement\/publickey\/pemrepresentation",
                        "title" : "var pemRepresentation: String",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p256\/keyagreement\/publickey\/rawrepresentation",
                        "title" : "var rawRepresentation: Data",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p256\/keyagreement\/publickey\/x963representation",
                        "title" : "var x963Representation: Data",
                        "type" : "property"
                      },
                      {
                        "title" : "Type Aliases",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p256\/keyagreement\/publickey\/hpkeephemeralprivatekey",
                        "title" : "P256.KeyAgreement.PublicKey.HPKEEphemeralPrivateKey",
                        "type" : "typealias"
                      },
                      {
                        "title" : "Default Implementations",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Type Aliases",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/crypto\/p256\/keyagreement\/publickey\/ephemeralprivatekey",
                            "title" : "P256.KeyAgreement.PublicKey.EphemeralPrivateKey",
                            "type" : "typealias"
                          }
                        ],
                        "path" : "\/documentation\/crypto\/p256\/keyagreement\/publickey\/hpkediffiehellmanpublickey-implementations",
                        "title" : "HPKEDiffieHellmanPublicKey Implementations",
                        "type" : "symbol"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Initializers",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/crypto\/p256\/keyagreement\/publickey\/init(_:kem:)",
                            "title" : "init<D>(D, kem: HPKE.KEM) throws",
                            "type" : "init"
                          },
                          {
                            "title" : "Instance Methods",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/crypto\/p256\/keyagreement\/publickey\/hpkerepresentation(kem:)",
                            "title" : "func hpkeRepresentation(kem: HPKE.KEM) throws -> Data",
                            "type" : "method"
                          }
                        ],
                        "path" : "\/documentation\/crypto\/p256\/keyagreement\/publickey\/hpkepublickeyserialization-implementations",
                        "title" : "HPKEPublicKeySerialization Implementations",
                        "type" : "symbol"
                      }
                    ],
                    "path" : "\/documentation\/crypto\/p256\/keyagreement\/publickey",
                    "title" : "P256.KeyAgreement.PublicKey",
                    "type" : "struct"
                  }
                ],
                "path" : "\/documentation\/crypto\/p256\/keyagreement",
                "title" : "P256.KeyAgreement",
                "type" : "enum"
              },
              {
                "children" : [
                  {
                    "title" : "Structures",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p256\/signing\/ecdsasignature\/init(derrepresentation:)",
                        "title" : "init<D>(derRepresentation: D) throws",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p256\/signing\/ecdsasignature\/init(rawrepresentation:)",
                        "title" : "init<D>(rawRepresentation: D) throws",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p256\/signing\/ecdsasignature\/derrepresentation",
                        "title" : "var derRepresentation: Data",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p256\/signing\/ecdsasignature\/rawrepresentation",
                        "title" : "var rawRepresentation: Data",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p256\/signing\/ecdsasignature\/withunsafebytes(_:)",
                        "title" : "func withUnsafeBytes<R>((UnsafeRawBufferPointer) throws -> R) rethrows -> R",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/crypto\/p256\/signing\/ecdsasignature",
                    "title" : "P256.Signing.ECDSASignature",
                    "type" : "struct"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p256\/signing\/privatekey\/init(compactrepresentable:)",
                        "title" : "init(compactRepresentable: Bool)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p256\/signing\/privatekey\/init(derrepresentation:)",
                        "title" : "init<Bytes>(derRepresentation: Bytes) throws",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p256\/signing\/privatekey\/init(pemrepresentation:)",
                        "title" : "init(pemRepresentation: String) throws",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p256\/signing\/privatekey\/init(rawrepresentation:)",
                        "title" : "init<Bytes>(rawRepresentation: Bytes) throws",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p256\/signing\/privatekey\/init(x963representation:)",
                        "title" : "init<Bytes>(x963Representation: Bytes) throws",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p256\/signing\/privatekey\/derrepresentation",
                        "title" : "var derRepresentation: Data",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p256\/signing\/privatekey\/pemrepresentation",
                        "title" : "var pemRepresentation: String",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p256\/signing\/privatekey\/publickey",
                        "title" : "var publicKey: P256.Signing.PublicKey",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p256\/signing\/privatekey\/rawrepresentation",
                        "title" : "var rawRepresentation: Data",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p256\/signing\/privatekey\/x963representation",
                        "title" : "var x963Representation: Data",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p256\/signing\/privatekey\/signature(for:)-1iyzc",
                        "title" : "func signature<D>(for: D) throws -> P256.Signing.ECDSASignature",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p256\/signing\/privatekey\/signature(for:)-5h94p",
                        "title" : "func signature<D>(for: D) throws -> P256.Signing.ECDSASignature",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/crypto\/p256\/signing\/privatekey",
                    "title" : "P256.Signing.PrivateKey",
                    "type" : "struct"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p256\/signing\/publickey\/init(compactrepresentation:)",
                        "title" : "init<Bytes>(compactRepresentation: Bytes) throws",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p256\/signing\/publickey\/init(compressedrepresentation:)",
                        "title" : "init<Bytes>(compressedRepresentation: Bytes) throws",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p256\/signing\/publickey\/init(derrepresentation:)",
                        "title" : "init<Bytes>(derRepresentation: Bytes) throws",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p256\/signing\/publickey\/init(pemrepresentation:)",
                        "title" : "init(pemRepresentation: String) throws",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p256\/signing\/publickey\/init(rawrepresentation:)",
                        "title" : "init<D>(rawRepresentation: D) throws",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p256\/signing\/publickey\/init(x963representation:)",
                        "title" : "init<Bytes>(x963Representation: Bytes) throws",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p256\/signing\/publickey\/compactrepresentation",
                        "title" : "var compactRepresentation: Data?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p256\/signing\/publickey\/compressedrepresentation",
                        "title" : "var compressedRepresentation: Data",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p256\/signing\/publickey\/derrepresentation",
                        "title" : "var derRepresentation: Data",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p256\/signing\/publickey\/pemrepresentation",
                        "title" : "var pemRepresentation: String",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p256\/signing\/publickey\/rawrepresentation",
                        "title" : "var rawRepresentation: Data",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p256\/signing\/publickey\/x963representation",
                        "title" : "var x963Representation: Data",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p256\/signing\/publickey\/isvalidsignature(_:for:)-2rsb5",
                        "title" : "func isValidSignature<D>(P256.Signing.ECDSASignature, for: D) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p256\/signing\/publickey\/isvalidsignature(_:for:)-3da2m",
                        "title" : "func isValidSignature<D>(P256.Signing.ECDSASignature, for: D) -> Bool",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/crypto\/p256\/signing\/publickey",
                    "title" : "P256.Signing.PublicKey",
                    "type" : "struct"
                  }
                ],
                "path" : "\/documentation\/crypto\/p256\/signing",
                "title" : "P256.Signing",
                "type" : "enum"
              }
            ],
            "path" : "\/documentation\/crypto\/p256",
            "title" : "P256",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Structures",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p384\/keyagreement\/privatekey\/init(compactrepresentable:)",
                        "title" : "init(compactRepresentable: Bool)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p384\/keyagreement\/privatekey\/init(derrepresentation:)",
                        "title" : "init<Bytes>(derRepresentation: Bytes) throws",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p384\/keyagreement\/privatekey\/init(pemrepresentation:)",
                        "title" : "init(pemRepresentation: String) throws",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p384\/keyagreement\/privatekey\/init(rawrepresentation:)",
                        "title" : "init<Bytes>(rawRepresentation: Bytes) throws",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p384\/keyagreement\/privatekey\/init(x963representation:)",
                        "title" : "init<Bytes>(x963Representation: Bytes) throws",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p384\/keyagreement\/privatekey\/derrepresentation",
                        "title" : "var derRepresentation: Data",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p384\/keyagreement\/privatekey\/pemrepresentation",
                        "title" : "var pemRepresentation: String",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p384\/keyagreement\/privatekey\/publickey-swift.property",
                        "title" : "var publicKey: P384.KeyAgreement.PublicKey",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p384\/keyagreement\/privatekey\/rawrepresentation",
                        "title" : "var rawRepresentation: Data",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p384\/keyagreement\/privatekey\/x963representation",
                        "title" : "var x963Representation: Data",
                        "type" : "property"
                      },
                      {
                        "title" : "Default Implementations",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Instance Methods",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/crypto\/p384\/keyagreement\/privatekey\/sharedsecretfromkeyagreement(with:)",
                            "title" : "func sharedSecretFromKeyAgreement(with: P384.KeyAgreement.PublicKey) throws -> SharedSecret",
                            "type" : "method"
                          },
                          {
                            "title" : "Type Aliases",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/crypto\/p384\/keyagreement\/privatekey\/publickey-swift.typealias",
                            "title" : "P384.KeyAgreement.PrivateKey.PublicKey",
                            "type" : "typealias"
                          }
                        ],
                        "path" : "\/documentation\/crypto\/p384\/keyagreement\/privatekey\/diffiehellmankeyagreement-implementations",
                        "title" : "DiffieHellmanKeyAgreement Implementations",
                        "type" : "symbol"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Initializers",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/crypto\/p384\/keyagreement\/privatekey\/init()",
                            "title" : "init()",
                            "type" : "init"
                          }
                        ],
                        "path" : "\/documentation\/crypto\/p384\/keyagreement\/privatekey\/hpkediffiehellmanprivatekeygeneration-implementations",
                        "title" : "HPKEDiffieHellmanPrivateKeyGeneration Implementations",
                        "type" : "symbol"
                      }
                    ],
                    "path" : "\/documentation\/crypto\/p384\/keyagreement\/privatekey",
                    "title" : "P384.KeyAgreement.PrivateKey",
                    "type" : "struct"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p384\/keyagreement\/publickey\/init(compactrepresentation:)",
                        "title" : "init<Bytes>(compactRepresentation: Bytes) throws",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p384\/keyagreement\/publickey\/init(compressedrepresentation:)",
                        "title" : "init<Bytes>(compressedRepresentation: Bytes) throws",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p384\/keyagreement\/publickey\/init(derrepresentation:)",
                        "title" : "init<Bytes>(derRepresentation: Bytes) throws",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p384\/keyagreement\/publickey\/init(pemrepresentation:)",
                        "title" : "init(pemRepresentation: String) throws",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p384\/keyagreement\/publickey\/init(rawrepresentation:)",
                        "title" : "init<D>(rawRepresentation: D) throws",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p384\/keyagreement\/publickey\/init(x963representation:)",
                        "title" : "init<Bytes>(x963Representation: Bytes) throws",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p384\/keyagreement\/publickey\/compactrepresentation",
                        "title" : "var compactRepresentation: Data?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p384\/keyagreement\/publickey\/compressedrepresentation",
                        "title" : "var compressedRepresentation: Data",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p384\/keyagreement\/publickey\/derrepresentation",
                        "title" : "var derRepresentation: Data",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p384\/keyagreement\/publickey\/pemrepresentation",
                        "title" : "var pemRepresentation: String",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p384\/keyagreement\/publickey\/rawrepresentation",
                        "title" : "var rawRepresentation: Data",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p384\/keyagreement\/publickey\/x963representation",
                        "title" : "var x963Representation: Data",
                        "type" : "property"
                      },
                      {
                        "title" : "Default Implementations",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Type Aliases",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/crypto\/p384\/keyagreement\/publickey\/ephemeralprivatekey",
                            "title" : "P384.KeyAgreement.PublicKey.EphemeralPrivateKey",
                            "type" : "typealias"
                          }
                        ],
                        "path" : "\/documentation\/crypto\/p384\/keyagreement\/publickey\/hpkediffiehellmanpublickey-implementations",
                        "title" : "HPKEDiffieHellmanPublicKey Implementations",
                        "type" : "symbol"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Initializers",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/crypto\/p384\/keyagreement\/publickey\/init(_:kem:)",
                            "title" : "init<D>(D, kem: HPKE.KEM) throws",
                            "type" : "init"
                          },
                          {
                            "title" : "Instance Methods",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/crypto\/p384\/keyagreement\/publickey\/hpkerepresentation(kem:)",
                            "title" : "func hpkeRepresentation(kem: HPKE.KEM) throws -> Data",
                            "type" : "method"
                          }
                        ],
                        "path" : "\/documentation\/crypto\/p384\/keyagreement\/publickey\/hpkepublickeyserialization-implementations",
                        "title" : "HPKEPublicKeySerialization Implementations",
                        "type" : "symbol"
                      }
                    ],
                    "path" : "\/documentation\/crypto\/p384\/keyagreement\/publickey",
                    "title" : "P384.KeyAgreement.PublicKey",
                    "type" : "struct"
                  }
                ],
                "path" : "\/documentation\/crypto\/p384\/keyagreement",
                "title" : "P384.KeyAgreement",
                "type" : "enum"
              },
              {
                "children" : [
                  {
                    "title" : "Structures",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p384\/signing\/ecdsasignature\/init(derrepresentation:)",
                        "title" : "init<D>(derRepresentation: D) throws",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p384\/signing\/ecdsasignature\/init(rawrepresentation:)",
                        "title" : "init<D>(rawRepresentation: D) throws",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p384\/signing\/ecdsasignature\/derrepresentation",
                        "title" : "var derRepresentation: Data",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p384\/signing\/ecdsasignature\/rawrepresentation",
                        "title" : "var rawRepresentation: Data",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p384\/signing\/ecdsasignature\/withunsafebytes(_:)",
                        "title" : "func withUnsafeBytes<R>((UnsafeRawBufferPointer) throws -> R) rethrows -> R",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/crypto\/p384\/signing\/ecdsasignature",
                    "title" : "P384.Signing.ECDSASignature",
                    "type" : "struct"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p384\/signing\/privatekey\/init(compactrepresentable:)",
                        "title" : "init(compactRepresentable: Bool)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p384\/signing\/privatekey\/init(derrepresentation:)",
                        "title" : "init<Bytes>(derRepresentation: Bytes) throws",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p384\/signing\/privatekey\/init(pemrepresentation:)",
                        "title" : "init(pemRepresentation: String) throws",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p384\/signing\/privatekey\/init(rawrepresentation:)",
                        "title" : "init<Bytes>(rawRepresentation: Bytes) throws",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p384\/signing\/privatekey\/init(x963representation:)",
                        "title" : "init<Bytes>(x963Representation: Bytes) throws",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p384\/signing\/privatekey\/derrepresentation",
                        "title" : "var derRepresentation: Data",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p384\/signing\/privatekey\/pemrepresentation",
                        "title" : "var pemRepresentation: String",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p384\/signing\/privatekey\/publickey",
                        "title" : "var publicKey: P384.Signing.PublicKey",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p384\/signing\/privatekey\/rawrepresentation",
                        "title" : "var rawRepresentation: Data",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p384\/signing\/privatekey\/x963representation",
                        "title" : "var x963Representation: Data",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p384\/signing\/privatekey\/signature(for:)-8nncg",
                        "title" : "func signature<D>(for: D) throws -> P384.Signing.ECDSASignature",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p384\/signing\/privatekey\/signature(for:)-wrsj",
                        "title" : "func signature<D>(for: D) throws -> P384.Signing.ECDSASignature",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/crypto\/p384\/signing\/privatekey",
                    "title" : "P384.Signing.PrivateKey",
                    "type" : "struct"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p384\/signing\/publickey\/init(compactrepresentation:)",
                        "title" : "init<Bytes>(compactRepresentation: Bytes) throws",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p384\/signing\/publickey\/init(compressedrepresentation:)",
                        "title" : "init<Bytes>(compressedRepresentation: Bytes) throws",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p384\/signing\/publickey\/init(derrepresentation:)",
                        "title" : "init<Bytes>(derRepresentation: Bytes) throws",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p384\/signing\/publickey\/init(pemrepresentation:)",
                        "title" : "init(pemRepresentation: String) throws",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p384\/signing\/publickey\/init(rawrepresentation:)",
                        "title" : "init<D>(rawRepresentation: D) throws",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p384\/signing\/publickey\/init(x963representation:)",
                        "title" : "init<Bytes>(x963Representation: Bytes) throws",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p384\/signing\/publickey\/compactrepresentation",
                        "title" : "var compactRepresentation: Data?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p384\/signing\/publickey\/compressedrepresentation",
                        "title" : "var compressedRepresentation: Data",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p384\/signing\/publickey\/derrepresentation",
                        "title" : "var derRepresentation: Data",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p384\/signing\/publickey\/pemrepresentation",
                        "title" : "var pemRepresentation: String",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p384\/signing\/publickey\/rawrepresentation",
                        "title" : "var rawRepresentation: Data",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p384\/signing\/publickey\/x963representation",
                        "title" : "var x963Representation: Data",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p384\/signing\/publickey\/isvalidsignature(_:for:)-1hrtv",
                        "title" : "func isValidSignature<D>(P384.Signing.ECDSASignature, for: D) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p384\/signing\/publickey\/isvalidsignature(_:for:)-2zf75",
                        "title" : "func isValidSignature<D>(P384.Signing.ECDSASignature, for: D) -> Bool",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/crypto\/p384\/signing\/publickey",
                    "title" : "P384.Signing.PublicKey",
                    "type" : "struct"
                  }
                ],
                "path" : "\/documentation\/crypto\/p384\/signing",
                "title" : "P384.Signing",
                "type" : "enum"
              }
            ],
            "path" : "\/documentation\/crypto\/p384",
            "title" : "P384",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Structures",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p521\/keyagreement\/privatekey\/init(compactrepresentable:)",
                        "title" : "init(compactRepresentable: Bool)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p521\/keyagreement\/privatekey\/init(derrepresentation:)",
                        "title" : "init<Bytes>(derRepresentation: Bytes) throws",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p521\/keyagreement\/privatekey\/init(pemrepresentation:)",
                        "title" : "init(pemRepresentation: String) throws",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p521\/keyagreement\/privatekey\/init(rawrepresentation:)",
                        "title" : "init<Bytes>(rawRepresentation: Bytes) throws",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p521\/keyagreement\/privatekey\/init(x963representation:)",
                        "title" : "init<Bytes>(x963Representation: Bytes) throws",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p521\/keyagreement\/privatekey\/derrepresentation",
                        "title" : "var derRepresentation: Data",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p521\/keyagreement\/privatekey\/pemrepresentation",
                        "title" : "var pemRepresentation: String",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p521\/keyagreement\/privatekey\/publickey-swift.property",
                        "title" : "var publicKey: P521.KeyAgreement.PublicKey",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p521\/keyagreement\/privatekey\/rawrepresentation",
                        "title" : "var rawRepresentation: Data",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p521\/keyagreement\/privatekey\/x963representation",
                        "title" : "var x963Representation: Data",
                        "type" : "property"
                      },
                      {
                        "title" : "Default Implementations",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Instance Methods",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/crypto\/p521\/keyagreement\/privatekey\/sharedsecretfromkeyagreement(with:)",
                            "title" : "func sharedSecretFromKeyAgreement(with: P521.KeyAgreement.PublicKey) throws -> SharedSecret",
                            "type" : "method"
                          },
                          {
                            "title" : "Type Aliases",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/crypto\/p521\/keyagreement\/privatekey\/publickey-swift.typealias",
                            "title" : "P521.KeyAgreement.PrivateKey.PublicKey",
                            "type" : "typealias"
                          }
                        ],
                        "path" : "\/documentation\/crypto\/p521\/keyagreement\/privatekey\/diffiehellmankeyagreement-implementations",
                        "title" : "DiffieHellmanKeyAgreement Implementations",
                        "type" : "symbol"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Initializers",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/crypto\/p521\/keyagreement\/privatekey\/init()",
                            "title" : "init()",
                            "type" : "init"
                          }
                        ],
                        "path" : "\/documentation\/crypto\/p521\/keyagreement\/privatekey\/hpkediffiehellmanprivatekeygeneration-implementations",
                        "title" : "HPKEDiffieHellmanPrivateKeyGeneration Implementations",
                        "type" : "symbol"
                      }
                    ],
                    "path" : "\/documentation\/crypto\/p521\/keyagreement\/privatekey",
                    "title" : "P521.KeyAgreement.PrivateKey",
                    "type" : "struct"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p521\/keyagreement\/publickey\/init(compactrepresentation:)",
                        "title" : "init<Bytes>(compactRepresentation: Bytes) throws",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p521\/keyagreement\/publickey\/init(compressedrepresentation:)",
                        "title" : "init<Bytes>(compressedRepresentation: Bytes) throws",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p521\/keyagreement\/publickey\/init(derrepresentation:)",
                        "title" : "init<Bytes>(derRepresentation: Bytes) throws",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p521\/keyagreement\/publickey\/init(pemrepresentation:)",
                        "title" : "init(pemRepresentation: String) throws",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p521\/keyagreement\/publickey\/init(rawrepresentation:)",
                        "title" : "init<D>(rawRepresentation: D) throws",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p521\/keyagreement\/publickey\/init(x963representation:)",
                        "title" : "init<Bytes>(x963Representation: Bytes) throws",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p521\/keyagreement\/publickey\/compactrepresentation",
                        "title" : "var compactRepresentation: Data?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p521\/keyagreement\/publickey\/compressedrepresentation",
                        "title" : "var compressedRepresentation: Data",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p521\/keyagreement\/publickey\/derrepresentation",
                        "title" : "var derRepresentation: Data",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p521\/keyagreement\/publickey\/pemrepresentation",
                        "title" : "var pemRepresentation: String",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p521\/keyagreement\/publickey\/rawrepresentation",
                        "title" : "var rawRepresentation: Data",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p521\/keyagreement\/publickey\/x963representation",
                        "title" : "var x963Representation: Data",
                        "type" : "property"
                      },
                      {
                        "title" : "Type Aliases",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p521\/keyagreement\/publickey\/hpkeephemeralprivatekey",
                        "title" : "P521.KeyAgreement.PublicKey.HPKEEphemeralPrivateKey",
                        "type" : "typealias"
                      },
                      {
                        "title" : "Default Implementations",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Type Aliases",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/crypto\/p521\/keyagreement\/publickey\/ephemeralprivatekey",
                            "title" : "P521.KeyAgreement.PublicKey.EphemeralPrivateKey",
                            "type" : "typealias"
                          }
                        ],
                        "path" : "\/documentation\/crypto\/p521\/keyagreement\/publickey\/hpkediffiehellmanpublickey-implementations",
                        "title" : "HPKEDiffieHellmanPublicKey Implementations",
                        "type" : "symbol"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Initializers",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/crypto\/p521\/keyagreement\/publickey\/init(_:kem:)",
                            "title" : "init<D>(D, kem: HPKE.KEM) throws",
                            "type" : "init"
                          },
                          {
                            "title" : "Instance Methods",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/crypto\/p521\/keyagreement\/publickey\/hpkerepresentation(kem:)",
                            "title" : "func hpkeRepresentation(kem: HPKE.KEM) throws -> Data",
                            "type" : "method"
                          }
                        ],
                        "path" : "\/documentation\/crypto\/p521\/keyagreement\/publickey\/hpkepublickeyserialization-implementations",
                        "title" : "HPKEPublicKeySerialization Implementations",
                        "type" : "symbol"
                      }
                    ],
                    "path" : "\/documentation\/crypto\/p521\/keyagreement\/publickey",
                    "title" : "P521.KeyAgreement.PublicKey",
                    "type" : "struct"
                  }
                ],
                "path" : "\/documentation\/crypto\/p521\/keyagreement",
                "title" : "P521.KeyAgreement",
                "type" : "enum"
              },
              {
                "children" : [
                  {
                    "title" : "Structures",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p521\/signing\/ecdsasignature\/init(derrepresentation:)",
                        "title" : "init<D>(derRepresentation: D) throws",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p521\/signing\/ecdsasignature\/init(rawrepresentation:)",
                        "title" : "init<D>(rawRepresentation: D) throws",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p521\/signing\/ecdsasignature\/derrepresentation",
                        "title" : "var derRepresentation: Data",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p521\/signing\/ecdsasignature\/rawrepresentation",
                        "title" : "var rawRepresentation: Data",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p521\/signing\/ecdsasignature\/withunsafebytes(_:)",
                        "title" : "func withUnsafeBytes<R>((UnsafeRawBufferPointer) throws -> R) rethrows -> R",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/crypto\/p521\/signing\/ecdsasignature",
                    "title" : "P521.Signing.ECDSASignature",
                    "type" : "struct"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p521\/signing\/privatekey\/init(compactrepresentable:)",
                        "title" : "init(compactRepresentable: Bool)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p521\/signing\/privatekey\/init(derrepresentation:)",
                        "title" : "init<Bytes>(derRepresentation: Bytes) throws",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p521\/signing\/privatekey\/init(pemrepresentation:)",
                        "title" : "init(pemRepresentation: String) throws",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p521\/signing\/privatekey\/init(rawrepresentation:)",
                        "title" : "init<Bytes>(rawRepresentation: Bytes) throws",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p521\/signing\/privatekey\/init(x963representation:)",
                        "title" : "init<Bytes>(x963Representation: Bytes) throws",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p521\/signing\/privatekey\/derrepresentation",
                        "title" : "var derRepresentation: Data",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p521\/signing\/privatekey\/pemrepresentation",
                        "title" : "var pemRepresentation: String",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p521\/signing\/privatekey\/publickey",
                        "title" : "var publicKey: P521.Signing.PublicKey",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p521\/signing\/privatekey\/rawrepresentation",
                        "title" : "var rawRepresentation: Data",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p521\/signing\/privatekey\/x963representation",
                        "title" : "var x963Representation: Data",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p521\/signing\/privatekey\/signature(for:)-34g01",
                        "title" : "func signature<D>(for: D) throws -> P521.Signing.ECDSASignature",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p521\/signing\/privatekey\/signature(for:)-7rxva",
                        "title" : "func signature<D>(for: D) throws -> P521.Signing.ECDSASignature",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/crypto\/p521\/signing\/privatekey",
                    "title" : "P521.Signing.PrivateKey",
                    "type" : "struct"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p521\/signing\/publickey\/init(compactrepresentation:)",
                        "title" : "init<Bytes>(compactRepresentation: Bytes) throws",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p521\/signing\/publickey\/init(compressedrepresentation:)",
                        "title" : "init<Bytes>(compressedRepresentation: Bytes) throws",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p521\/signing\/publickey\/init(derrepresentation:)",
                        "title" : "init<Bytes>(derRepresentation: Bytes) throws",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p521\/signing\/publickey\/init(pemrepresentation:)",
                        "title" : "init(pemRepresentation: String) throws",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p521\/signing\/publickey\/init(rawrepresentation:)",
                        "title" : "init<D>(rawRepresentation: D) throws",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p521\/signing\/publickey\/init(x963representation:)",
                        "title" : "init<Bytes>(x963Representation: Bytes) throws",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p521\/signing\/publickey\/compactrepresentation",
                        "title" : "var compactRepresentation: Data?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p521\/signing\/publickey\/compressedrepresentation",
                        "title" : "var compressedRepresentation: Data",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p521\/signing\/publickey\/derrepresentation",
                        "title" : "var derRepresentation: Data",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p521\/signing\/publickey\/pemrepresentation",
                        "title" : "var pemRepresentation: String",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p521\/signing\/publickey\/rawrepresentation",
                        "title" : "var rawRepresentation: Data",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p521\/signing\/publickey\/x963representation",
                        "title" : "var x963Representation: Data",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p521\/signing\/publickey\/isvalidsignature(_:for:)-5kwev",
                        "title" : "func isValidSignature<D>(P521.Signing.ECDSASignature, for: D) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/crypto\/p521\/signing\/publickey\/isvalidsignature(_:for:)-dhjh",
                        "title" : "func isValidSignature<D>(P521.Signing.ECDSASignature, for: D) -> Bool",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/crypto\/p521\/signing\/publickey",
                    "title" : "P521.Signing.PublicKey",
                    "type" : "struct"
                  }
                ],
                "path" : "\/documentation\/crypto\/p521\/signing",
                "title" : "P521.Signing",
                "type" : "enum"
              }
            ],
            "path" : "\/documentation\/crypto\/p521",
            "title" : "P521",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/crypto\/secureenclave\/isavailable",
                "title" : "static var isAvailable: Bool",
                "type" : "property"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumerations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Structures",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Initializers",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/crypto\/secureenclave\/p256\/keyagreement\/privatekey\/init(compactrepresentable:accesscontrol:authenticationcontext:)",
                            "title" : "init(compactRepresentable: Bool, accessControl: SecAccessControl, authenticationContext: LAContext?) throws",
                            "type" : "init"
                          },
                          {
                            "path" : "\/documentation\/crypto\/secureenclave\/p256\/keyagreement\/privatekey\/init(datarepresentation:authenticationcontext:)",
                            "title" : "init(dataRepresentation: Data, authenticationContext: LAContext?) throws",
                            "type" : "init"
                          },
                          {
                            "title" : "Instance Properties",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/crypto\/secureenclave\/p256\/keyagreement\/privatekey\/datarepresentation",
                            "title" : "let dataRepresentation: Data",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/crypto\/secureenclave\/p256\/keyagreement\/privatekey\/publickey-swift.property",
                            "title" : "let publicKey: P256.KeyAgreement.PublicKey",
                            "type" : "property"
                          },
                          {
                            "title" : "Default Implementations",
                            "type" : "groupMarker"
                          },
                          {
                            "children" : [
                              {
                                "title" : "Instance Methods",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/crypto\/secureenclave\/p256\/keyagreement\/privatekey\/sharedsecretfromkeyagreement(with:)",
                                "title" : "func sharedSecretFromKeyAgreement(with: P256.KeyAgreement.PublicKey) throws -> SharedSecret",
                                "type" : "method"
                              },
                              {
                                "title" : "Type Aliases",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/crypto\/secureenclave\/p256\/keyagreement\/privatekey\/publickey-swift.typealias",
                                "title" : "SecureEnclave.P256.KeyAgreement.PrivateKey.PublicKey",
                                "type" : "typealias"
                              }
                            ],
                            "path" : "\/documentation\/crypto\/secureenclave\/p256\/keyagreement\/privatekey\/diffiehellmankeyagreement-implementations",
                            "title" : "DiffieHellmanKeyAgreement Implementations",
                            "type" : "symbol"
                          }
                        ],
                        "path" : "\/documentation\/crypto\/secureenclave\/p256\/keyagreement\/privatekey",
                        "title" : "SecureEnclave.P256.KeyAgreement.PrivateKey",
                        "type" : "struct"
                      }
                    ],
                    "path" : "\/documentation\/crypto\/secureenclave\/p256\/keyagreement",
                    "title" : "SecureEnclave.P256.KeyAgreement",
                    "type" : "enum"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Structures",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Initializers",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/crypto\/secureenclave\/p256\/signing\/privatekey\/init(compactrepresentable:accesscontrol:authenticationcontext:)",
                            "title" : "init(compactRepresentable: Bool, accessControl: SecAccessControl, authenticationContext: LAContext?) throws",
                            "type" : "init"
                          },
                          {
                            "path" : "\/documentation\/crypto\/secureenclave\/p256\/signing\/privatekey\/init(datarepresentation:authenticationcontext:)",
                            "title" : "init(dataRepresentation: Data, authenticationContext: LAContext?) throws",
                            "type" : "init"
                          },
                          {
                            "title" : "Instance Properties",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/crypto\/secureenclave\/p256\/signing\/privatekey\/datarepresentation",
                            "title" : "let dataRepresentation: Data",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/crypto\/secureenclave\/p256\/signing\/privatekey\/publickey",
                            "title" : "let publicKey: P256.Signing.PublicKey",
                            "type" : "property"
                          },
                          {
                            "title" : "Instance Methods",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/crypto\/secureenclave\/p256\/signing\/privatekey\/signature(for:)-3xogs",
                            "title" : "func signature<D>(for: D) throws -> P256.Signing.ECDSASignature",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/crypto\/secureenclave\/p256\/signing\/privatekey\/signature(for:)-76j0u",
                            "title" : "func signature<D>(for: D) throws -> P256.Signing.ECDSASignature",
                            "type" : "method"
                          }
                        ],
                        "path" : "\/documentation\/crypto\/secureenclave\/p256\/signing\/privatekey",
                        "title" : "SecureEnclave.P256.Signing.PrivateKey",
                        "type" : "struct"
                      }
                    ],
                    "path" : "\/documentation\/crypto\/secureenclave\/p256\/signing",
                    "title" : "SecureEnclave.P256.Signing",
                    "type" : "enum"
                  }
                ],
                "path" : "\/documentation\/crypto\/secureenclave\/p256",
                "title" : "SecureEnclave.P256",
                "type" : "enum"
              }
            ],
            "path" : "\/documentation\/crypto\/secureenclave",
            "title" : "SecureEnclave",
            "type" : "enum"
          }
        ],
        "path" : "\/documentation\/crypto",
        "title" : "Crypto",
        "type" : "module"
      },
      {
        "path" : "\/documentation\/internalcollectionsutilities",
        "title" : "InternalCollectionsUtilities",
        "type" : "module"
      },
      {
        "children" : [
          {
            "title" : "Protocols",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/logging\/loghandler\/loglevel",
                "title" : "var logLevel: Logger.Level",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/logging\/loghandler\/metadata",
                "title" : "var metadata: Logger.Metadata",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/logging\/loghandler\/metadataprovider-7hq13",
                        "title" : "var metadataProvider: Logger.MetadataProvider?",
                        "type" : "property"
                      }
                    ],
                    "title" : "LogHandler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/logging\/loghandler\/metadataprovider-1vq31",
                "title" : "var metadataProvider: Logger.MetadataProvider?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/logging\/loghandler\/log(level:message:metadata:file:function:line:)-1xdau",
                        "title" : "func log(level: Logging.Logger.Level, message: Logging.Logger.Message, metadata: Logging.Logger.Metadata?, file: String, function: String, line: UInt)",
                        "type" : "method"
                      }
                    ],
                    "title" : "LogHandler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/logging\/loghandler\/log(level:message:metadata:file:function:line:)-89rya",
                "title" : "func log(level: Logging.Logger.Level, message: Logging.Logger.Message, metadata: Logging.Logger.Metadata?, file: String, function: String, line: UInt)",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/logging\/loghandler\/log(level:message:metadata:source:file:function:line:)-69pez",
                        "title" : "func log(level: Logger.Level, message: Logger.Message, metadata: Logger.Metadata?, source: String, file: String, function: String, line: UInt)",
                        "type" : "method"
                      }
                    ],
                    "title" : "LogHandler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/logging\/loghandler\/log(level:message:metadata:source:file:function:line:)-8kgt7",
                "title" : "func log(level: Logger.Level, message: Logger.Message, metadata: Logger.Metadata?, source: String, file: String, function: String, line: UInt)",
                "type" : "method"
              },
              {
                "title" : "Subscripts",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/logging\/loghandler\/subscript(metadatakey:)",
                "title" : "subscript(metadataKey _: String) -> Logger.Metadata.Value?",
                "type" : "subscript"
              }
            ],
            "path" : "\/documentation\/logging\/loghandler",
            "title" : "LogHandler",
            "type" : "protocol"
          },
          {
            "title" : "Structures",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/logging\/logger\/message\/init(stringliteral:)",
                    "title" : "init(stringLiteral: String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/logging\/logger\/message\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/logging\/logger\/message\/stringliteraltype",
                    "title" : "Logger.Message.StringLiteralType",
                    "type" : "typealias"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/logging\/logger\/message\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/logging\/logger\/message\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/logging\/logger\/message\/init(extendedgraphemeclusterliteral:)",
                        "title" : "init(extendedGraphemeClusterLiteral: Self.StringLiteralType)",
                        "type" : "init"
                      }
                    ],
                    "path" : "\/documentation\/logging\/logger\/message\/expressiblebyextendedgraphemeclusterliteral-implementations",
                    "title" : "ExpressibleByExtendedGraphemeClusterLiteral Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/logging\/logger\/message\/init(stringinterpolation:)",
                        "title" : "init(stringInterpolation: DefaultStringInterpolation)",
                        "type" : "init"
                      }
                    ],
                    "path" : "\/documentation\/logging\/logger\/message\/expressiblebystringinterpolation-implementations",
                    "title" : "ExpressibleByStringInterpolation Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/logging\/logger\/message\/init(unicodescalarliteral:)",
                        "title" : "init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)",
                        "type" : "init"
                      }
                    ],
                    "path" : "\/documentation\/logging\/logger\/message\/expressiblebyunicodescalarliteral-implementations",
                    "title" : "ExpressibleByUnicodeScalarLiteral Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/logging\/logger\/message",
                "title" : "Logger.Message",
                "type" : "struct"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/logging\/logger\/metadataprovider-swift.struct\/init(_:)",
                    "title" : "init(() -> Metadata)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/logging\/logger\/metadataprovider-swift.struct\/get()",
                    "title" : "func get() -> Metadata",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/logging\/logger\/metadataprovider-swift.struct\/multiplex(_:)",
                    "title" : "static func multiplex([Logger.MetadataProvider]) -> Logger.MetadataProvider?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/logging\/logger\/metadataprovider-swift.struct",
                "title" : "Logger.MetadataProvider",
                "type" : "struct"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/logging\/logger\/init(label:)",
                "title" : "init(label: String)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/logging\/logger\/init(label:factory:)-6iktu",
                "title" : "init(label: String, factory: (String, Logger.MetadataProvider?) -> any LogHandler)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/logging\/logger\/init(label:factory:)-9uiy2",
                "title" : "init(label: String, factory: (String) -> any LogHandler)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/logging\/logger\/init(label:metadataprovider:)",
                "title" : "init(label: String, metadataProvider: MetadataProvider)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/logging\/logger\/handler",
                "title" : "var handler: any LogHandler",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/logging\/logger\/label",
                "title" : "var label: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/logging\/logger\/loglevel",
                "title" : "var logLevel: Logger.Level",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/logging\/logger\/metadataprovider-swift.property",
                "title" : "var metadataProvider: Logger.MetadataProvider?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/logging\/logger\/critical(_:metadata:file:function:line:)",
                "title" : "func critical(@autoclosure () -> Logger.Message, metadata: @autoclosure () -> Logger.Metadata?, file: String, function: String, line: UInt)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/logging\/logger\/critical(_:metadata:source:file:function:line:)",
                "title" : "func critical(@autoclosure () -> Logger.Message, metadata: @autoclosure () -> Logger.Metadata?, source: @autoclosure () -> String?, file: String, function: String, line: UInt)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/logging\/logger\/debug(_:metadata:file:function:line:)",
                "title" : "func debug(@autoclosure () -> Logger.Message, metadata: @autoclosure () -> Logger.Metadata?, file: String, function: String, line: UInt)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/logging\/logger\/debug(_:metadata:source:file:function:line:)",
                "title" : "func debug(@autoclosure () -> Logger.Message, metadata: @autoclosure () -> Logger.Metadata?, source: @autoclosure () -> String?, file: String, function: String, line: UInt)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/logging\/logger\/error(_:metadata:file:function:line:)",
                "title" : "func error(@autoclosure () -> Logger.Message, metadata: @autoclosure () -> Logger.Metadata?, file: String, function: String, line: UInt)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/logging\/logger\/error(_:metadata:source:file:function:line:)",
                "title" : "func error(@autoclosure () -> Logger.Message, metadata: @autoclosure () -> Logger.Metadata?, source: @autoclosure () -> String?, file: String, function: String, line: UInt)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/logging\/logger\/info(_:metadata:file:function:line:)",
                "title" : "func info(@autoclosure () -> Logger.Message, metadata: @autoclosure () -> Logger.Metadata?, file: String, function: String, line: UInt)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/logging\/logger\/info(_:metadata:source:file:function:line:)",
                "title" : "func info(@autoclosure () -> Logger.Message, metadata: @autoclosure () -> Logger.Metadata?, source: @autoclosure () -> String?, file: String, function: String, line: UInt)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/logging\/logger\/log(level:_:metadata:file:function:line:)",
                "title" : "func log(level: Logger.Level, @autoclosure () -> Logger.Message, metadata: @autoclosure () -> Logger.Metadata?, file: String, function: String, line: UInt)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/logging\/logger\/log(level:_:metadata:source:file:function:line:)",
                "title" : "func log(level: Logger.Level, @autoclosure () -> Logger.Message, metadata: @autoclosure () -> Logger.Metadata?, source: @autoclosure () -> String?, file: String, function: String, line: UInt)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/logging\/logger\/notice(_:metadata:file:function:line:)",
                "title" : "func notice(@autoclosure () -> Logger.Message, metadata: @autoclosure () -> Logger.Metadata?, file: String, function: String, line: UInt)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/logging\/logger\/notice(_:metadata:source:file:function:line:)",
                "title" : "func notice(@autoclosure () -> Logger.Message, metadata: @autoclosure () -> Logger.Metadata?, source: @autoclosure () -> String?, file: String, function: String, line: UInt)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/logging\/logger\/trace(_:metadata:file:function:line:)",
                "title" : "func trace(@autoclosure () -> Logger.Message, metadata: @autoclosure () -> Logger.Metadata?, file: String, function: String, line: UInt)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/logging\/logger\/trace(_:metadata:source:file:function:line:)",
                "title" : "func trace(@autoclosure () -> Logger.Message, metadata: @autoclosure () -> Logger.Metadata?, source: @autoclosure () -> String?, file: String, function: String, line: UInt)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/logging\/logger\/warning(_:metadata:file:function:line:)",
                "title" : "func warning(@autoclosure () -> Logger.Message, metadata: @autoclosure () -> Logger.Metadata?, file: String, function: String, line: UInt)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/logging\/logger\/warning(_:metadata:source:file:function:line:)",
                "title" : "func warning(@autoclosure () -> Logger.Message, metadata: @autoclosure () -> Logger.Metadata?, source: @autoclosure () -> String?, file: String, function: String, line: UInt)",
                "type" : "method"
              },
              {
                "title" : "Subscripts",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/logging\/logger\/subscript(metadatakey:)",
                "title" : "subscript(metadataKey _: String) -> Logger.Metadata.Value?",
                "type" : "subscript"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/logging\/logger\/metadata",
                "title" : "Logger.Metadata",
                "type" : "typealias"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/logging\/logger\/level\/critical",
                    "title" : "case critical",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/logging\/logger\/level\/debug",
                    "title" : "case debug",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/logging\/logger\/level\/error",
                    "title" : "case error",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/logging\/logger\/level\/info",
                    "title" : "case info",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/logging\/logger\/level\/notice",
                    "title" : "case notice",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/logging\/logger\/level\/trace",
                    "title" : "case trace",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/logging\/logger\/level\/warning",
                    "title" : "case warning",
                    "type" : "case"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/logging\/logger\/level\/init(rawvalue:)",
                    "title" : "init?(rawValue: String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/logging\/logger\/level\/'...(_:)-181cj",
                        "title" : "static func ... (Self) -> PartialRangeThrough<Self>",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/logging\/logger\/level\/'...(_:)-9337t",
                        "title" : "static func ... (Self) -> PartialRangeFrom<Self>",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/logging\/logger\/level\/'...(_:_:)",
                        "title" : "static func ... (Self, Self) -> ClosedRange<Self>",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/logging\/logger\/level\/'.._(_:)",
                        "title" : "static func ..< (Self) -> PartialRangeUpTo<Self>",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/logging\/logger\/level\/'.._(_:_:)",
                        "title" : "static func ..< (Self, Self) -> Range<Self>",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/logging\/logger\/level\/_(_:_:)-88op7",
                        "title" : "static func > (Self, Self) -> Bool",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/logging\/logger\/level\/_(_:_:)-8ts75",
                        "title" : "static func < (Logger.Level, Logger.Level) -> Bool",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/logging\/logger\/level\/_=(_:_:)-27ncb",
                        "title" : "static func <= (Self, Self) -> Bool",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/logging\/logger\/level\/_=(_:_:)-50v7s",
                        "title" : "static func >= (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/logging\/logger\/level\/comparable-implementations",
                    "title" : "Comparable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/logging\/logger\/level\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/logging\/logger\/level\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/logging\/logger\/level\/init(from:)",
                        "title" : "init(from: any Decoder) throws",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/logging\/logger\/level\/hashvalue",
                        "title" : "var hashValue: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/logging\/logger\/level\/encode(to:)",
                        "title" : "func encode(to: any Encoder) throws",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/logging\/logger\/level\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/logging\/logger\/level\/rawrepresentable-implementations",
                    "title" : "RawRepresentable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/logging\/logger\/level",
                "title" : "Logger.Level",
                "type" : "enum"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/logging\/logger\/metadatavalue\/array(_:)",
                    "title" : "case array([Metadata.Value])",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/logging\/logger\/metadatavalue\/dictionary(_:)",
                    "title" : "case dictionary(Metadata)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/logging\/logger\/metadatavalue\/string(_:)",
                    "title" : "case string(String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/logging\/logger\/metadatavalue\/stringconvertible(_:)",
                    "title" : "case stringConvertible(any CustomStringConvertible & Sendable)",
                    "type" : "case"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/logging\/logger\/metadatavalue\/description",
                        "title" : "var description: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/logging\/logger\/metadatavalue\/customstringconvertible-implementations",
                    "title" : "CustomStringConvertible Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/logging\/logger\/metadatavalue\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/logging\/logger\/metadatavalue\/==(_:_:)",
                        "title" : "static func == (Logger.Metadata.Value, Logger.Metadata.Value) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/logging\/logger\/metadatavalue\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/logging\/logger\/metadatavalue\/init(arrayliteral:)",
                        "title" : "init(arrayLiteral: Logger.Metadata.Value...)",
                        "type" : "init"
                      },
                      {
                        "title" : "Type Aliases",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/logging\/logger\/metadatavalue\/arrayliteralelement",
                        "title" : "Logger.MetadataValue.ArrayLiteralElement",
                        "type" : "typealias"
                      }
                    ],
                    "path" : "\/documentation\/logging\/logger\/metadatavalue\/expressiblebyarrayliteral-implementations",
                    "title" : "ExpressibleByArrayLiteral Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/logging\/logger\/metadatavalue\/init(dictionaryliteral:)",
                        "title" : "init(dictionaryLiteral: (String, Logger.Metadata.Value)...)",
                        "type" : "init"
                      },
                      {
                        "title" : "Type Aliases",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/logging\/logger\/metadatavalue\/key",
                        "title" : "Logger.MetadataValue.Key",
                        "type" : "typealias"
                      },
                      {
                        "path" : "\/documentation\/logging\/logger\/metadatavalue\/value",
                        "title" : "Logger.MetadataValue.Value",
                        "type" : "typealias"
                      }
                    ],
                    "path" : "\/documentation\/logging\/logger\/metadatavalue\/expressiblebydictionaryliteral-implementations",
                    "title" : "ExpressibleByDictionaryLiteral Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/logging\/logger\/metadatavalue\/init(extendedgraphemeclusterliteral:)",
                        "title" : "init(extendedGraphemeClusterLiteral: Self.StringLiteralType)",
                        "type" : "init"
                      }
                    ],
                    "path" : "\/documentation\/logging\/logger\/metadatavalue\/expressiblebyextendedgraphemeclusterliteral-implementations",
                    "title" : "ExpressibleByExtendedGraphemeClusterLiteral Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/logging\/logger\/metadatavalue\/init(stringinterpolation:)",
                        "title" : "init(stringInterpolation: DefaultStringInterpolation)",
                        "type" : "init"
                      }
                    ],
                    "path" : "\/documentation\/logging\/logger\/metadatavalue\/expressiblebystringinterpolation-implementations",
                    "title" : "ExpressibleByStringInterpolation Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/logging\/logger\/metadatavalue\/init(stringliteral:)",
                        "title" : "init(stringLiteral: String)",
                        "type" : "init"
                      },
                      {
                        "title" : "Type Aliases",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/logging\/logger\/metadatavalue\/stringliteraltype",
                        "title" : "Logger.MetadataValue.StringLiteralType",
                        "type" : "typealias"
                      }
                    ],
                    "path" : "\/documentation\/logging\/logger\/metadatavalue\/expressiblebystringliteral-implementations",
                    "title" : "ExpressibleByStringLiteral Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/logging\/logger\/metadatavalue\/init(unicodescalarliteral:)",
                        "title" : "init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)",
                        "type" : "init"
                      }
                    ],
                    "path" : "\/documentation\/logging\/logger\/metadatavalue\/expressiblebyunicodescalarliteral-implementations",
                    "title" : "ExpressibleByUnicodeScalarLiteral Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/logging\/logger\/metadatavalue",
                "title" : "Logger.MetadataValue",
                "type" : "enum"
              }
            ],
            "path" : "\/documentation\/logging\/logger",
            "title" : "Logger",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/logging\/multiplexloghandler\/init(_:)",
                "title" : "init([any LogHandler])",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/logging\/multiplexloghandler\/init(_:metadataprovider:)",
                "title" : "init([any LogHandler], metadataProvider: Logger.MetadataProvider?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/logging\/multiplexloghandler\/loglevel",
                "title" : "var logLevel: Logger.Level",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/logging\/multiplexloghandler\/metadata",
                "title" : "var metadata: Logger.Metadata",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/logging\/multiplexloghandler\/metadataprovider",
                "title" : "var metadataProvider: Logger.MetadataProvider?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/logging\/multiplexloghandler\/log(level:message:metadata:source:file:function:line:)",
                "title" : "func log(level: Logger.Level, message: Logger.Message, metadata: Logger.Metadata?, source: String, file: String, function: String, line: UInt)",
                "type" : "method"
              },
              {
                "title" : "Subscripts",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/logging\/multiplexloghandler\/subscript(metadatakey:)",
                "title" : "subscript(metadataKey _: Logger.Metadata.Key) -> Logger.Metadata.Value?",
                "type" : "subscript"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/logging\/multiplexloghandler\/log(level:message:metadata:file:function:line:)",
                    "title" : "func log(level: Logging.Logger.Level, message: Logging.Logger.Message, metadata: Logging.Logger.Metadata?, file: String, function: String, line: UInt)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/logging\/multiplexloghandler\/loghandler-implementations",
                "title" : "LogHandler Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/logging\/multiplexloghandler",
            "title" : "MultiplexLogHandler",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/logging\/streamloghandler\/loglevel",
                "title" : "var logLevel: Logger.Level",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/logging\/streamloghandler\/metadata",
                "title" : "var metadata: Logger.Metadata",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/logging\/streamloghandler\/metadataprovider",
                "title" : "var metadataProvider: Logger.MetadataProvider?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/logging\/streamloghandler\/log(level:message:metadata:source:file:function:line:)",
                "title" : "func log(level: Logger.Level, message: Logger.Message, metadata: Logger.Metadata?, source: String, file: String, function: String, line: UInt)",
                "type" : "method"
              },
              {
                "title" : "Subscripts",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/logging\/streamloghandler\/subscript(metadatakey:)",
                "title" : "subscript(metadataKey _: String) -> Logger.Metadata.Value?",
                "type" : "subscript"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/logging\/streamloghandler\/standarderror(label:)",
                "title" : "static func standardError(label: String) -> StreamLogHandler",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/logging\/streamloghandler\/standarderror(label:metadataprovider:)",
                "title" : "static func standardError(label: String, metadataProvider: Logger.MetadataProvider?) -> StreamLogHandler",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/logging\/streamloghandler\/standardoutput(label:)",
                "title" : "static func standardOutput(label: String) -> StreamLogHandler",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/logging\/streamloghandler\/standardoutput(label:metadataprovider:)",
                "title" : "static func standardOutput(label: String, metadataProvider: Logger.MetadataProvider?) -> StreamLogHandler",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/logging\/streamloghandler\/log(level:message:metadata:file:function:line:)",
                    "title" : "func log(level: Logging.Logger.Level, message: Logging.Logger.Message, metadata: Logging.Logger.Metadata?, file: String, function: String, line: UInt)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/logging\/streamloghandler\/loghandler-implementations",
                "title" : "LogHandler Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/logging\/streamloghandler",
            "title" : "StreamLogHandler",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/logging\/swiftlognooploghandler\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/logging\/swiftlognooploghandler\/init(_:)",
                "title" : "init(String)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/logging\/swiftlognooploghandler\/loglevel",
                "title" : "var logLevel: Logger.Level",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/logging\/swiftlognooploghandler\/metadata",
                "title" : "var metadata: Logger.Metadata",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/logging\/swiftlognooploghandler\/log(level:message:metadata:file:function:line:)",
                "title" : "func log(level: Logger.Level, message: Logger.Message, metadata: Logger.Metadata?, file: String, function: String, line: UInt)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/logging\/swiftlognooploghandler\/log(level:message:metadata:source:file:function:line:)",
                "title" : "func log(level: Logger.Level, message: Logger.Message, metadata: Logger.Metadata?, source: String, file: String, function: String, line: UInt)",
                "type" : "method"
              },
              {
                "title" : "Subscripts",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/logging\/swiftlognooploghandler\/subscript(metadatakey:)",
                "title" : "subscript(metadataKey _: String) -> Logger.Metadata.Value?",
                "type" : "subscript"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/logging\/swiftlognooploghandler\/metadataprovider",
                    "title" : "var metadataProvider: Logger.MetadataProvider?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/logging\/swiftlognooploghandler\/loghandler-implementations",
                "title" : "LogHandler Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/logging\/swiftlognooploghandler",
            "title" : "SwiftLogNoOpLogHandler",
            "type" : "struct"
          },
          {
            "title" : "Enumerations",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/logging\/loggingsystem\/metadataprovider",
                "title" : "static var metadataProvider: Logger.MetadataProvider?",
                "type" : "property"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/logging\/loggingsystem\/bootstrap(_:)",
                "title" : "static func bootstrap((String) -> any LogHandler)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/logging\/loggingsystem\/bootstrap(_:metadataprovider:)",
                "title" : "static func bootstrap((String, Logger.MetadataProvider?) -> any LogHandler, metadataProvider: Logger.MetadataProvider?)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/logging\/loggingsystem",
            "title" : "LoggingSystem",
            "type" : "enum"
          }
        ],
        "path" : "\/documentation\/logging",
        "title" : "Logging",
        "type" : "module"
      },
      {
        "children" : [
          {
            "title" : "Classes",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/atomic\/init(value:)",
                "title" : "init(value: T)",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/atomic\/add(_:)",
                "title" : "func add(T) -> T",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/atomic\/compareandexchange(expected:desired:)",
                "title" : "func compareAndExchange(expected: T, desired: T) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/atomic\/exchange(with:)",
                "title" : "func exchange(with: T) -> T",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/atomic\/load()",
                "title" : "func load() -> T",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/atomic\/store(_:)",
                "title" : "func store(T)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/atomic\/sub(_:)",
                "title" : "func sub(T) -> T",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/nioconcurrencyhelpers\/atomic",
            "title" : "Atomic",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/atomicbox\/init(value:)",
                "title" : "init(value: T)",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/atomicbox\/compareandexchange(expected:desired:)",
                "title" : "func compareAndExchange(expected: T, desired: T) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/atomicbox\/exchange(with:)",
                "title" : "func exchange(with: T) -> T",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/atomicbox\/load()",
                "title" : "func load() -> T",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/atomicbox\/store(_:)",
                "title" : "func store(T)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/nioconcurrencyhelpers\/atomicbox",
            "title" : "AtomicBox",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/conditionlock\/init(value:)",
                "title" : "init(value: T)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/conditionlock\/value",
                "title" : "var value: T",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/conditionlock\/lock()",
                "title" : "func lock()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/conditionlock\/lock(whenvalue:)",
                "title" : "func lock(whenValue: T)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/conditionlock\/lock(whenvalue:timeoutseconds:)",
                "title" : "func lock(whenValue: T, timeoutSeconds: Double) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/conditionlock\/unlock()",
                "title" : "func unlock()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/conditionlock\/unlock(withvalue:)",
                "title" : "func unlock(withValue: T)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/nioconcurrencyhelpers\/conditionlock",
            "title" : "ConditionLock",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/lock\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/lock\/lock()",
                "title" : "func lock()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/lock\/unlock()",
                "title" : "func unlock()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/lock\/withlock(_:)",
                "title" : "func withLock<T>(() throws -> T) rethrows -> T",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/lock\/withlockvoid(_:)",
                "title" : "func withLockVoid(() throws -> Void) rethrows",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/nioconcurrencyhelpers\/lock",
            "title" : "Lock",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/nioatomic\/add(_:)",
                "title" : "func add(T) -> T",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/nioatomic\/compareandexchange(expected:desired:)",
                "title" : "func compareAndExchange(expected: T, desired: T) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/nioatomic\/exchange(with:)",
                "title" : "func exchange(with: T) -> T",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/nioatomic\/load()",
                "title" : "func load() -> T",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/nioatomic\/store(_:)",
                "title" : "func store(T)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/nioatomic\/sub(_:)",
                "title" : "func sub(T) -> T",
                "type" : "method"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/nioatomic\/makeatomic(value:)",
                "title" : "static func makeAtomic(value: T) -> NIOAtomic",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/nioconcurrencyhelpers\/nioatomic",
            "title" : "NIOAtomic",
            "type" : "class"
          },
          {
            "title" : "Protocols",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/atomicprimitive\/atomic_add",
                "title" : "static var atomic_add: (OpaquePointer, Self) -> Self",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/atomicprimitive\/atomic_compare_and_exchange",
                "title" : "static var atomic_compare_and_exchange: (OpaquePointer, Self, Self) -> Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/atomicprimitive\/atomic_create",
                "title" : "static var atomic_create: (Self) -> OpaquePointer",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/atomicprimitive\/atomic_destroy",
                "title" : "static var atomic_destroy: (OpaquePointer) -> Void",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/atomicprimitive\/atomic_exchange",
                "title" : "static var atomic_exchange: (OpaquePointer, Self) -> Self",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/atomicprimitive\/atomic_load",
                "title" : "static var atomic_load: (OpaquePointer) -> Self",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/atomicprimitive\/atomic_store",
                "title" : "static var atomic_store: (OpaquePointer, Self) -> Void",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/atomicprimitive\/atomic_sub",
                "title" : "static var atomic_sub: (OpaquePointer, Self) -> Self",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/nioconcurrencyhelpers\/atomicprimitive",
            "title" : "AtomicPrimitive",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/nioatomicprimitive\/atomicwrapper",
                "title" : "AtomicWrapper",
                "type" : "associatedtype"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/nioatomicprimitive\/nio_atomic_add",
                "title" : "static var nio_atomic_add: (UnsafeMutablePointer<AtomicWrapper>, Self) -> Self",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/nioatomicprimitive\/nio_atomic_compare_and_exchange",
                "title" : "static var nio_atomic_compare_and_exchange: (UnsafeMutablePointer<AtomicWrapper>, Self, Self) -> Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/nioatomicprimitive\/nio_atomic_create_with_existing_storage",
                "title" : "static var nio_atomic_create_with_existing_storage: (UnsafeMutablePointer<AtomicWrapper>, Self) -> Void",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/nioatomicprimitive\/nio_atomic_exchange",
                "title" : "static var nio_atomic_exchange: (UnsafeMutablePointer<AtomicWrapper>, Self) -> Self",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/nioatomicprimitive\/nio_atomic_load",
                "title" : "static var nio_atomic_load: (UnsafeMutablePointer<AtomicWrapper>) -> Self",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/nioatomicprimitive\/nio_atomic_store",
                "title" : "static var nio_atomic_store: (UnsafeMutablePointer<AtomicWrapper>, Self) -> Void",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/nioatomicprimitive\/nio_atomic_sub",
                "title" : "static var nio_atomic_sub: (UnsafeMutablePointer<AtomicWrapper>, Self) -> Self",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/nioconcurrencyhelpers\/nioatomicprimitive",
            "title" : "NIOAtomicPrimitive",
            "type" : "protocol"
          },
          {
            "title" : "Structures",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/niolock\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/niolock\/lock()",
                "title" : "func lock()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/niolock\/unlock()",
                "title" : "func unlock()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/niolock\/withlock(_:)",
                "title" : "func withLock<T>(() throws -> T) rethrows -> T",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/niolock\/withlockvoid(_:)",
                "title" : "func withLockVoid(() throws -> Void) rethrows",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/nioconcurrencyhelpers\/niolock",
            "title" : "NIOLock",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/nioconcurrencyhelpers\/niolockedvaluebox\/unsafe-swift.struct\/lock()",
                    "title" : "func lock()",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/nioconcurrencyhelpers\/niolockedvaluebox\/unsafe-swift.struct\/unlock()",
                    "title" : "func unlock()",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/nioconcurrencyhelpers\/niolockedvaluebox\/unsafe-swift.struct\/withvalueassuminglockisacquired(_:)",
                    "title" : "func withValueAssumingLockIsAcquired<Result>((_ value: inout Value) throws -> Result) rethrows -> Result",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/nioconcurrencyhelpers\/niolockedvaluebox\/unsafe-swift.struct",
                "title" : "NIOLockedValueBox.Unsafe",
                "type" : "struct"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/niolockedvaluebox\/init(_:)",
                "title" : "init(Value)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/niolockedvaluebox\/unsafe-swift.property",
                "title" : "var unsafe: Unsafe",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/niolockedvaluebox\/withlockedvalue(_:)",
                "title" : "func withLockedValue<T>((inout Value) throws -> T) rethrows -> T",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/nioconcurrencyhelpers\/niolockedvaluebox",
            "title" : "NIOLockedValueBox",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/unsafeembeddedatomic\/init(value:)",
                "title" : "init(value: T)",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/unsafeembeddedatomic\/add(_:)",
                "title" : "func add(T) -> T",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/unsafeembeddedatomic\/compareandexchange(expected:desired:)",
                "title" : "func compareAndExchange(expected: T, desired: T) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/unsafeembeddedatomic\/destroy()",
                "title" : "func destroy()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/unsafeembeddedatomic\/exchange(with:)",
                "title" : "func exchange(with: T) -> T",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/unsafeembeddedatomic\/load()",
                "title" : "func load() -> T",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/unsafeembeddedatomic\/store(_:)",
                "title" : "func store(T)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/nioconcurrencyhelpers\/unsafeembeddedatomic\/sub(_:)",
                "title" : "func sub(T) -> T",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/nioconcurrencyhelpers\/unsafeembeddedatomic",
            "title" : "UnsafeEmbeddedAtomic",
            "type" : "struct"
          }
        ],
        "path" : "\/documentation\/nioconcurrencyhelpers",
        "title" : "NIOConcurrencyHelpers",
        "type" : "module"
      },
      {
        "children" : [
          {
            "title" : "Classes",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/cloudviewmodel\/init(cloudcode:)",
                "title" : "init(cloudCode: T)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/cloudviewmodel\/cloudcode",
                "title" : "var cloudCode: T",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/cloudviewmodel\/error",
                "title" : "var error: ParseError?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/cloudviewmodel\/results",
                "title" : "var results: T.ReturnType?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/cloudviewmodel\/runfunction(options:)",
                "title" : "func runFunction(options: API.Options) async",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/cloudviewmodel\/startjob(options:)",
                "title" : "func startJob(options: API.Options) async",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/cloudviewmodel\/cloudcodetype",
                "title" : "CloudViewModel.CloudCodeType",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/cloudviewmodel\/objectwillchange",
                    "title" : "var objectWillChange: ObservableObjectPublisher",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/cloudviewmodel\/observableobject-implementations",
                "title" : "ObservableObject Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/cloudviewmodel",
            "title" : "CloudViewModel",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/init(serverurl:isdefault:notificationqueue:)",
                "title" : "init(serverURL: URL?, isDefault: Bool, notificationQueue: DispatchQueue) async throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/authenticationdelegate",
                "title" : "var authenticationDelegate: ParseLiveQueryDelegate?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/receivedelegate",
                "title" : "var receiveDelegate: ParseLiveQueryDelegate?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/status",
                "title" : "var status: ConnectionStatus",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/closeall()",
                "title" : "func closeAll() async",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/ispendingsubscription(_:)",
                "title" : "func isPendingSubscription<T>(Query<T>) async throws -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/issubscribed(_:)",
                "title" : "func isSubscribed<T>(Query<T>) async throws -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/open(isuserwantstoconnect:)",
                "title" : "func open(isUserWantsToConnect: Bool) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/open(isuserwantstoconnect:completion:)",
                "title" : "func open(isUserWantsToConnect: Bool, completion: (Error?) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/openpublisher(isuserwantstoconnect:)",
                "title" : "func openPublisher(isUserWantsToConnect: Bool) -> Future<Void, Error>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/removependingsubscription(_:)",
                "title" : "func removePendingSubscription<T>(Query<T>) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/sendping()",
                "title" : "func sendPing() async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/sendping(pongreceivehandler:)",
                "title" : "func sendPing(pongReceiveHandler: (Error?) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/sendpingpublisher()",
                "title" : "func sendPingPublisher() -> Future<Void, Error>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/subscribe(_:)",
                "title" : "func subscribe<T>(T) async throws -> T",
                "type" : "method"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/client",
                "title" : "static var client: ParseLiveQuery?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/defaultclient",
                "title" : "class var defaultClient: ParseLiveQuery?",
                "type" : "property"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselivequery\/connectionstatus\/_(_:_:)-3ydrw",
                    "title" : "static func < (`Self`, `Self`) -> Bool",
                    "type" : "op"
                  },
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselivequery\/connectionstatus\/connected",
                    "title" : "case connected",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselivequery\/connectionstatus\/connecting",
                    "title" : "case connecting",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselivequery\/connectionstatus\/disconnected",
                    "title" : "case disconnected",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselivequery\/connectionstatus\/socketestablished",
                    "title" : "case socketEstablished",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselivequery\/connectionstatus\/socketnotestablished",
                    "title" : "case socketNotEstablished",
                    "type" : "case"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parselivequery\/connectionstatus\/'...(_:)-6uyv",
                        "title" : "static func ... (Self) -> PartialRangeThrough<Self>",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parselivequery\/connectionstatus\/'...(_:)-99jnt",
                        "title" : "static func ... (Self) -> PartialRangeFrom<Self>",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parselivequery\/connectionstatus\/'...(_:_:)",
                        "title" : "static func ... (Self, Self) -> ClosedRange<Self>",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parselivequery\/connectionstatus\/'.._(_:)",
                        "title" : "static func ..< (Self) -> PartialRangeUpTo<Self>",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parselivequery\/connectionstatus\/'.._(_:_:)",
                        "title" : "static func ..< (Self, Self) -> Range<Self>",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parselivequery\/connectionstatus\/_(_:_:)-4vmc5",
                        "title" : "static func > (Self, Self) -> Bool",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parselivequery\/connectionstatus\/_=(_:_:)-1mh6z",
                        "title" : "static func >= (Self, Self) -> Bool",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parselivequery\/connectionstatus\/_=(_:_:)-84tti",
                        "title" : "static func <= (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parselivequery\/connectionstatus\/comparable-implementations",
                    "title" : "Comparable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parselivequery\/connectionstatus\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parselivequery\/connectionstatus\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parselivequery\/connectionstatus",
                "title" : "ParseLiveQuery.ConnectionStatus",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselivequery\/close()",
                    "title" : "func close() async",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parselivequery\/livequerysocketdelegate-implementations",
                "title" : "LiveQuerySocketDelegate Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parselivequery",
            "title" : "ParseLiveQuery",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/queryviewmodel\/init(query:)",
                "title" : "init(query: Query<T>)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/queryviewmodel\/count",
                "title" : "var count: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/queryviewmodel\/error",
                "title" : "var error: ParseError?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/queryviewmodel\/query",
                "title" : "var query: Query<T>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/queryviewmodel\/results",
                "title" : "var results: [QueryViewModel<T>.Object]",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/queryviewmodel\/aggregate(_:options:)",
                "title" : "func aggregate([[String : Encodable]], options: API.Options) async",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/queryviewmodel\/count(options:)",
                "title" : "func count(options: API.Options) async",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/queryviewmodel\/find(options:)",
                "title" : "func find(options: API.Options) async",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/queryviewmodel\/findall(batchlimit:options:)",
                "title" : "func findAll(batchLimit: Int?, options: API.Options) async",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/queryviewmodel\/first(options:)",
                "title" : "func first(options: API.Options) async",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/queryviewmodel\/object",
                "title" : "QueryViewModel.Object",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/queryviewmodel\/objectwillchange",
                    "title" : "var objectWillChange: ObservableObjectPublisher",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/queryviewmodel\/observableobject-implementations",
                "title" : "ObservableObject Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/queryviewmodel",
            "title" : "QueryViewModel",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/subscription\/init(query:)",
                "title" : "init(query: Query<T>)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/subscription\/event",
                "title" : "var event: (query: Query<T>, event: Event<T>)?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/subscription\/issubscribed",
                "title" : "var isSubscribed: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/subscription\/isunsubscribed",
                "title" : "var isUnsubscribed: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/subscription\/subscribed",
                "title" : "var subscribed: (query: Query<T>, isNew: Bool)?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/subscription\/unsubscribed",
                "title" : "var unsubscribed: Query<T>?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/subscription\/didreceive(_:)",
                "title" : "func didReceive(Data) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/subscription\/didsubscribe(_:)",
                "title" : "func didSubscribe(Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/subscription\/didunsubscribe()",
                "title" : "func didUnsubscribe()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/subscription",
            "title" : "Subscription",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/subscriptioncallback\/init(query:)",
                "title" : "init(query: Query<T>)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/subscriptioncallback\/query",
                "title" : "var query: Query<T>",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/subscriptioncallback\/didreceive(_:)",
                "title" : "func didReceive(Data) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/subscriptioncallback\/didsubscribe(_:)",
                "title" : "func didSubscribe(Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/subscriptioncallback\/didunsubscribe()",
                "title" : "func didUnsubscribe()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/subscriptioncallback\/handle(_:_:)",
                "title" : "func handle((T) -> Event<T>, (Query<T>, T) -> Void) -> SubscriptionCallback",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/subscriptioncallback\/handleevent(_:)",
                "title" : "func handleEvent((Query<T>, Event<T>) -> Void) -> SubscriptionCallback",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/subscriptioncallback\/handlesubscribe(_:)",
                "title" : "func handleSubscribe((Query<T>, Bool) -> Void) -> SubscriptionCallback",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/subscriptioncallback\/handleunsubscribe(_:)",
                "title" : "func handleUnsubscribe((Query<T>) -> Void) -> SubscriptionCallback",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/subscriptioncallback\/object",
                "title" : "SubscriptionCallback.Object",
                "type" : "typealias"
              }
            ],
            "path" : "\/documentation\/parseswift\/subscriptioncallback",
            "title" : "SubscriptionCallback",
            "type" : "class"
          },
          {
            "title" : "Protocols",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/cloudobservable\/cloudcodetype",
                "title" : "CloudCodeType",
                "type" : "associatedtype"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/cloudobservable\/init(cloudcode:)",
                "title" : "init(cloudCode: CloudCodeType)",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/cloudobservable\/runfunction(options:)",
                "title" : "func runFunction(options: API.Options) async",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/cloudobservable\/startjob(options:)",
                "title" : "func startJob(options: API.Options) async",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/cloudobservable",
            "title" : "CloudObservable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/deletable\/deletingtype",
                "title" : "DeletingType",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/deletable\/delete()-3qlhy",
                        "title" : "func delete() async throws -> DeletingType",
                        "type" : "method"
                      }
                    ],
                    "title" : "Deletable Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/deletable\/delete()-3wdvi",
                "title" : "func delete() async throws -> DeletingType",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/deletable\/delete(options:)-6rpv",
                        "title" : "func delete(options: API.Options) async throws",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/deletable\/delete(options:)-u8rk",
                        "title" : "func delete(options: API.Options) async throws",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/deletable\/delete(options:)-3vgtv",
                        "title" : "func delete(options: API.Options) async throws",
                        "type" : "method"
                      }
                    ],
                    "title" : "Deletable Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/deletable\/delete(options:)-370sk",
                "title" : "func delete(options: API.Options) async throws -> DeletingType",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/deletable",
            "title" : "Deletable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/fetchable\/fetchingtype",
                "title" : "FetchingType",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/fetchable\/fetch()-1n2zp",
                        "title" : "func fetch() async throws -> FetchingType",
                        "type" : "method"
                      }
                    ],
                    "title" : "Fetchable Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/fetchable\/fetch()-2agid",
                "title" : "func fetch() async throws -> FetchingType",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/fetchable\/fetch(includekeys:options:)-33xzq",
                        "title" : "func fetch(includeKeys: [String]?, options: API.Options) async throws -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/fetchable\/fetch(includekeys:options:)-12t7t",
                        "title" : "func fetch(includeKeys: [String]?, options: API.Options) async throws -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/fetchable\/fetch(includekeys:options:)-9iop9",
                        "title" : "func fetch(includeKeys: [String]?, options: API.Options) async throws -> Self",
                        "type" : "method"
                      }
                    ],
                    "title" : "Fetchable Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/fetchable\/fetch(includekeys:options:)-6xt2n",
                "title" : "func fetch(includeKeys: [String]?, options: API.Options) async throws -> FetchingType",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/fetchable",
            "title" : "Fetchable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/objectable\/acl",
                "title" : "var ACL: ParseACL?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/objectable\/createdat",
                "title" : "var createdAt: Date?",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/objectable\/endpoint-11glf",
                        "title" : "var endpoint: API.Endpoint",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/objectable\/endpoint-9s7vq",
                        "title" : "var endpoint: API.Endpoint",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/objectable\/endpoint-6b5zy",
                        "title" : "var endpoint: API.Endpoint",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/objectable\/endpoint-3vf5d",
                        "title" : "var endpoint: API.Endpoint",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/objectable\/endpoint-8slln",
                        "title" : "var endpoint: API.Endpoint",
                        "type" : "property"
                      }
                    ],
                    "title" : "Objectable Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/objectable\/endpoint-65g5f",
                "title" : "var endpoint: API.Endpoint",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/objectable\/objectid",
                "title" : "var objectId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/objectable\/updatedat",
                "title" : "var updatedAt: Date?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/objectable\/endpoint(_:)-4acal",
                        "title" : "func endpoint(API.Method) async throws -> API.Endpoint",
                        "type" : "method"
                      }
                    ],
                    "title" : "Objectable Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/objectable\/endpoint(_:)-26c5h",
                "title" : "func endpoint(API.Method) async throws -> API.Endpoint",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/objectable\/issaved",
                        "title" : "var isSaved: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/objectable\/issaved()-9c65v",
                        "title" : "func isSaved() async throws -> Bool",
                        "type" : "method"
                      }
                    ],
                    "title" : "Objectable Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/objectable\/issaved()-2szlz",
                "title" : "func isSaved() async throws -> Bool",
                "type" : "method"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/objectable\/classname-swift.property",
                        "title" : "var className: String",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/objectable\/classname-64fhv",
                        "title" : "static var className: String",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/objectable\/classname-4npbu",
                        "title" : "static var className: String",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/objectable\/classname-5hhno",
                        "title" : "static var className: String",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/objectable\/classname-6pzxq",
                        "title" : "static var className: String",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/objectable\/classname-499yb",
                        "title" : "static var className: String",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/objectable\/classname-8okkp",
                        "title" : "static var className: String",
                        "type" : "property"
                      }
                    ],
                    "title" : "Objectable Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/objectable\/classname-7kg6w",
                "title" : "static var className: String",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parseswift\/objectable",
            "title" : "Objectable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseauthentication\/authenticateduser",
                "title" : "AuthenticatedUser",
                "type" : "associatedtype"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseauthentication\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseauthentication\/islinked()-97br7",
                        "title" : "func isLinked() async -> Bool",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseAuthentication Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseauthentication\/islinked()-5a3xp",
                "title" : "func isLinked() async -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseauthentication\/link(authdata:options:)",
                "title" : "func link(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseauthentication\/link(authdata:options:callbackqueue:completion:)",
                "title" : "func link(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseauthentication\/linkpublisher(authdata:options:)",
                "title" : "func linkPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseauthentication\/login(authdata:options:callbackqueue:completion:)",
                "title" : "func login(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseauthentication\/loginpublisher(authdata:options:)",
                "title" : "func loginPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseauthentication\/strip()-li6i",
                        "title" : "func strip() async throws -> AuthenticatedUser",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseAuthentication Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseauthentication\/strip()-7jyyz",
                "title" : "func strip() async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseauthentication\/strip(_:)-80krh",
                        "title" : "func strip(AuthenticatedUser) -> AuthenticatedUser",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseAuthentication Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseauthentication\/strip(_:)-ovl0",
                "title" : "func strip(AuthenticatedUser) -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseauthentication\/unlink(_:options:)-87j4",
                        "title" : "func unlink(AuthenticatedUser, options: API.Options) async throws -> AuthenticatedUser",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseAuthentication Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseauthentication\/unlink(_:options:)-5hyok",
                "title" : "func unlink(AuthenticatedUser, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseauthentication\/unlink(_:options:callbackqueue:completion:)-6aslp",
                        "title" : "func unlink(AuthenticatedUser, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseAuthentication Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseauthentication\/unlink(_:options:callbackqueue:completion:)-7rp64",
                "title" : "func unlink(AuthenticatedUser, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseauthentication\/unlink(options:)-2h790",
                        "title" : "func unlink(options: API.Options) async throws -> AuthenticatedUser",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseAuthentication Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseauthentication\/unlink(options:)-8buh1",
                "title" : "func unlink(options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseauthentication\/unlink(options:callbackqueue:completion:)-372np",
                        "title" : "func unlink(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseAuthentication Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseauthentication\/unlink(options:callbackqueue:completion:)-6gyvj",
                "title" : "func unlink(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseauthentication\/unlinkpublisher(_:options:)-1p5pj",
                        "title" : "func unlinkPublisher(AuthenticatedUser, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseAuthentication Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseauthentication\/unlinkpublisher(_:options:)-2zjlv",
                "title" : "func unlinkPublisher(AuthenticatedUser, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseauthentication\/unlinkpublisher(options:)-9jbvk",
                        "title" : "func unlinkPublisher(options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseAuthentication Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseauthentication\/unlinkpublisher(options:)-2wrer",
                "title" : "func unlinkPublisher(options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseauthentication\/islinked(with:)-30q3o",
                        "title" : "static func isLinked(with: AuthenticatedUser) -> Bool",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseAuthentication Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseauthentication\/islinked(with:)-7d4nj",
                "title" : "static func isLinked(with: AuthenticatedUser) -> Bool",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseauthentication",
            "title" : "ParseAuthentication",
            "type" : "protocol"
          },
          {
            "path" : "\/documentation\/parseswift\/parsecloudtypeable",
            "title" : "ParseCloudTypeable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseclouduser\/accountlockoutexpiresat-13du2",
                        "title" : "var accountLockoutExpiresAt: Date?",
                        "type" : "property"
                      }
                    ],
                    "title" : "ParseCloudUser Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseclouduser\/accountlockoutexpiresat-2drtq",
                "title" : "var accountLockoutExpiresAt: Date?",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseclouduser\/failedlogincount-1x7qw",
                        "title" : "var failedLoginCount: Int?",
                        "type" : "property"
                      }
                    ],
                    "title" : "ParseCloudUser Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseclouduser\/failedlogincount-9kljm",
                "title" : "var failedLoginCount: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclouduser\/sessiontoken",
                "title" : "var sessionToken: String?",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseclouduser",
            "title" : "ParseCloudUser",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsecloudable\/returntype",
                "title" : "ReturnType",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsecloudable\/functionjobname",
                "title" : "var functionJobName: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsecloudable\/viewmodel",
                "title" : "var viewModel: CloudViewModel<Self>",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsecloudable\/runfunction(options:)",
                "title" : "func runFunction(options: API.Options) async throws -> ReturnType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsecloudable\/runfunction(options:callbackqueue:completion:)",
                "title" : "func runFunction(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<ReturnType, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsecloudable\/runfunctionpublisher(options:)",
                "title" : "func runFunctionPublisher(options: API.Options) -> Future<ReturnType, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsecloudable\/startjob(options:)",
                "title" : "func startJob(options: API.Options) async throws -> ReturnType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsecloudable\/startjob(options:callbackqueue:completion:)",
                "title" : "func startJob(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<ReturnType, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsecloudable\/startjobpublisher(options:)",
                "title" : "func startJobPublisher(options: API.Options) -> Future<ReturnType, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsecloudable\/viewmodel(_:)",
                "title" : "static func viewModel(Self) -> CloudViewModel<Self>",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsecloudable",
            "title" : "ParseCloudable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfig\/fetch(options:)",
                "title" : "func fetch(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfig\/fetch(options:callbackqueue:completion:)",
                "title" : "func fetch(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfig\/fetchpublisher(options:)",
                "title" : "func fetchPublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfig\/save(options:)",
                "title" : "func save(options: API.Options) async throws -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfig\/save(options:callbackqueue:completion:)",
                "title" : "func save(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Bool, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfig\/savepublisher(options:)",
                "title" : "func savePublisher(options: API.Options) -> Future<Bool, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfig\/current()",
                "title" : "static func current() async throws -> Self",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseconfig",
            "title" : "ParseConfig",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseencodable\/debugdescription",
                "title" : "var debugDescription: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseencodable\/description",
                "title" : "var description: String",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseencodable",
            "title" : "ParseEncodable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parsefiletransferable\/makedummyuploadtask()-6r9at",
                        "title" : "func makeDummyUploadTask() throws -> URLSessionUploadTask",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseFileTransferable Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsefiletransferable\/makedummyuploadtask()-71gc1",
                "title" : "func makeDummyUploadTask() throws -> URLSessionUploadTask",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parsefiletransferable\/makesuccessfuluploadresponse(_:url:)-52ukn",
                        "title" : "func makeSuccessfulUploadResponse(String, url: URL) throws -> (Data, HTTPURLResponse?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseFileTransferable Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsefiletransferable\/makesuccessfuluploadresponse(_:url:)-h8xr",
                "title" : "func makeSuccessfulUploadResponse(String, url: URL) throws -> (Data, HTTPURLResponse?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefiletransferable\/upload(with:from:completion:)",
                "title" : "func upload(with: URLRequest, from: Data?, completion: (Data?, URLResponse?, URLRequest?, Error?) -> Void) throws -> URLSessionUploadTask",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefiletransferable\/upload(with:fromfile:completion:)",
                "title" : "func upload(with: URLRequest, fromFile: URL, completion: (Data?, URLResponse?, URLRequest?, Error?) -> Void) throws -> URLSessionUploadTask",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsefiletransferable",
            "title" : "ParseFileTransferable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/init(name:url:)",
                "title" : "init(name: String, url: URL?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/functionname",
                "title" : "var functionName: String?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/create(options:)",
                "title" : "func create(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/create(options:callbackqueue:completion:)",
                "title" : "func create(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/createpublisher(options:)",
                "title" : "func createPublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/delete(options:)",
                "title" : "func delete(options: API.Options) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/delete(options:callbackqueue:completion:)",
                "title" : "func delete(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/deletepublisher(options:)",
                "title" : "func deletePublisher(options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/fetch(options:)",
                "title" : "func fetch(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/fetch(options:callbackqueue:completion:)",
                "title" : "func fetch(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/fetchall(options:)",
                "title" : "func fetchAll(options: API.Options) async throws -> [Self]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/fetchall(options:callbackqueue:completion:)-swift.method",
                "title" : "func fetchAll(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[Self], ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/fetchallpublisher(options:)",
                "title" : "func fetchAllPublisher(options: API.Options) -> Future<[Self], ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/fetchpublisher(options:)",
                "title" : "func fetchPublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/update(options:)",
                "title" : "func update(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/update(options:callbackqueue:completion:)",
                "title" : "func update(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/updatepublisher(options:)",
                "title" : "func updatePublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/fetchall(options:callbackqueue:completion:)-swift.type.method",
                "title" : "static func fetchAll(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[Self], ParseError>) -> Void)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsehookfunctionable",
            "title" : "ParseHookFunctionable",
            "type" : "protocol"
          },
          {
            "path" : "\/documentation\/parseswift\/parsehookparametable",
            "title" : "ParseHookParametable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookrequestable\/usertype",
                "title" : "UserType",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookrequestable\/headers",
                "title" : "var headers: [String : String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookrequestable\/installationid",
                "title" : "var installationId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookrequestable\/ipaddress",
                "title" : "var ipAddress: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookrequestable\/primarykey",
                "title" : "var primaryKey: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookrequestable\/user",
                "title" : "var user: UserType?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookrequestable\/hydrateuser(options:)",
                "title" : "func hydrateUser(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookrequestable\/hydrateuser(options:callbackqueue:completion:)",
                "title" : "func hydrateUser(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookrequestable\/hydrateuserpublisher(options:)",
                "title" : "func hydrateUserPublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookrequestable\/options()",
                "title" : "func options() -> API.Options",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsehookrequestable",
            "title" : "ParseHookRequestable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequestable\/clients",
                "title" : "var clients: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequestable\/triggername",
                "title" : "var triggerName: String?",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsehooktriggerrequestable",
            "title" : "ParseHookTriggerRequestable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/init(classname:trigger:url:)",
                "title" : "init(className: String, trigger: ParseHookTriggerType, url: URL)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/init(classname:triggername:url:)",
                "title" : "init(className: String, triggerName: ParseHookTriggerType, url: URL)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/init(object:trigger:url:)-3id4t",
                "title" : "init(object: ParseHookTriggerObject, trigger: ParseHookTriggerType, url: URL) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/init(object:trigger:url:)-4sels",
                "title" : "init<T>(object: T, trigger: ParseHookTriggerType, url: URL)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/init(object:trigger:url:)-6si3s",
                "title" : "init<T>(object: T.Type, trigger: ParseHookTriggerType, url: URL)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/init(object:triggername:url:)",
                "title" : "init<T>(object: T, triggerName: ParseHookTriggerType, url: URL)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/init(trigger:url:)",
                "title" : "init(trigger: ParseHookTriggerType, url: URL) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/init(triggername:url:)",
                "title" : "init(triggerName: ParseHookTriggerType, url: URL) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/classname",
                "title" : "var className: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/triggername",
                "title" : "var triggerName: ParseHookTriggerType?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/create(options:)",
                "title" : "func create(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/create(options:callbackqueue:completion:)",
                "title" : "func create(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/createpublisher(options:)",
                "title" : "func createPublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/delete(options:)",
                "title" : "func delete(options: API.Options) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/delete(options:callbackqueue:completion:)",
                "title" : "func delete(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/deletepublisher(options:)",
                "title" : "func deletePublisher(options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/fetch(options:)",
                "title" : "func fetch(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/fetch(options:callbackqueue:completion:)",
                "title" : "func fetch(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/fetchall(options:)",
                "title" : "func fetchAll(options: API.Options) async throws -> [Self]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/fetchall(options:callbackqueue:completion:)-swift.method",
                "title" : "func fetchAll(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[Self], ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/fetchallpublisher(options:)",
                "title" : "func fetchAllPublisher(options: API.Options) -> Future<[Self], ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/fetchpublisher(options:)",
                "title" : "func fetchPublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/update(options:)",
                "title" : "func update(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/update(options:callbackqueue:completion:)",
                "title" : "func update(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/updatepublisher(options:)",
                "title" : "func updatePublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/fetchall(options:callbackqueue:completion:)-swift.type.method",
                "title" : "static func fetchAll(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[Self], ParseError>) -> Void)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsehooktriggerable",
            "title" : "ParseHookTriggerable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookable\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookable\/url",
                "title" : "var url: URL?",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsehookable",
            "title" : "ParseHookable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/appidentifier",
                "title" : "var appIdentifier: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/appname",
                "title" : "var appName: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/appversion",
                "title" : "var appVersion: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/badge",
                "title" : "var badge: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/channels",
                "title" : "var channels: [String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/devicetoken",
                "title" : "var deviceToken: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/devicetype",
                "title" : "var deviceType: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/installationid",
                "title" : "var installationId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/localeidentifier",
                "title" : "var localeIdentifier: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/parseversion",
                "title" : "var parseVersion: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/timezone",
                "title" : "var timeZone: String?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/create(options:)",
                "title" : "func create(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/create(options:callbackqueue:completion:)",
                "title" : "func create(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/createpublisher(options:)",
                "title" : "func createPublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/delete(options:callbackqueue:completion:)",
                "title" : "func delete(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/deletepublisher(options:)",
                "title" : "func deletePublisher(options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/fetch(includekeys:options:callbackqueue:completion:)",
                "title" : "func fetch(includeKeys: [String]?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/fetchpublisher(includekeys:options:)",
                "title" : "func fetchPublisher(includeKeys: [String]?, options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/replace(options:)",
                "title" : "func replace(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/replace(options:callbackqueue:completion:)",
                "title" : "func replace(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/replacepublisher(options:)",
                "title" : "func replacePublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/save(ignoringcustomobjectidconfig:options:)",
                "title" : "func save(ignoringCustomObjectIdConfig: Bool, options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/save(ignoringcustomobjectidconfig:options:callbackqueue:completion:)",
                "title" : "func save(ignoringCustomObjectIdConfig: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/savepublisher(ignoringcustomobjectidconfig:options:)",
                "title" : "func savePublisher(ignoringCustomObjectIdConfig: Bool, options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/setdevicetoken(_:)",
                "title" : "func setDeviceToken(Data)",
                "type" : "method"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/become(_:copyentireinstallation:options:)",
                "title" : "static func become(String, copyEntireInstallation: Bool, options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/become(_:copyentireinstallation:options:callbackqueue:completion:)",
                "title" : "static func become(String, copyEntireInstallation: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/becomepublisher(_:copyentireinstallation:options:)",
                "title" : "static func becomePublisher(String, copyEntireInstallation: Bool, options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/current()",
                "title" : "static func current() async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/deleteobjckeychain(options:)",
                "title" : "static func deleteObjCKeychain(options: API.Options) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/deleteobjckeychain(options:callbackqueue:completion:)",
                "title" : "static func deleteObjCKeychain(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/deleteobjckeychainpublisher(options:)",
                "title" : "static func deleteObjCKeychainPublisher(options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseinstallation",
            "title" : "ParseInstallation",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parselivequerydelegate\/closedsocket(_:reason:)-7npe",
                        "title" : "func closedSocket(URLSessionWebSocketTask.CloseCode?, reason: Data?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseLiveQueryDelegate Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parselivequerydelegate\/closedsocket(_:reason:)-170q6",
                "title" : "func closedSocket(URLSessionWebSocketTask.CloseCode?, reason: Data?)",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parselivequerydelegate\/received(_:)-798hl",
                        "title" : "func received(URLSessionTaskTransactionMetrics)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parselivequerydelegate\/received(_:)-1f3yl",
                        "title" : "func received(Error)",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseLiveQueryDelegate Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parselivequerydelegate\/received(_:)-3krd3",
                "title" : "func received(URLSessionTaskTransactionMetrics)",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parselivequerydelegate\/received(_:)-1f3yl",
                        "title" : "func received(Error)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parselivequerydelegate\/received(_:)-798hl",
                        "title" : "func received(URLSessionTaskTransactionMetrics)",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseLiveQueryDelegate Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parselivequerydelegate\/received(_:)-4tgno",
                "title" : "func received(Error)",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parselivequerydelegate\/received(_:completionhandler:)-o1ge",
                        "title" : "func received(URLAuthenticationChallenge, completionHandler: (URLSession.AuthChallengeDisposition, URLCredential?) -> Void)",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseLiveQueryDelegate Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parselivequerydelegate\/received(_:completionhandler:)-8g2o0",
                "title" : "func received(URLAuthenticationChallenge, completionHandler: (URLSession.AuthChallengeDisposition, URLCredential?) -> Void)",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parselivequerydelegate\/receivedunsupported(_:socketmessage:)-6cmf4",
                        "title" : "func receivedUnsupported(Data?, socketMessage: URLSessionWebSocketTask.Message?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseLiveQueryDelegate Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parselivequerydelegate\/receivedunsupported(_:socketmessage:)-83dzx",
                "title" : "func receivedUnsupported(Data?, socketMessage: URLSessionWebSocketTask.Message?)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/parselivequerydelegate",
            "title" : "ParseLiveQueryDelegate",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseobject\/init(objectid:)-6r6xq",
                        "title" : "init(objectId: String)",
                        "type" : "init"
                      }
                    ],
                    "title" : "ParseObject Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseobject\/init(objectid:)-7sv7",
                "title" : "init(objectId: String)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseobject\/mergeable-96fqk",
                        "title" : "var mergeable: Self",
                        "type" : "property"
                      }
                    ],
                    "title" : "ParseObject Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseobject\/mergeable-1pmms",
                "title" : "var mergeable: Self",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/operation",
                "title" : "var operation: ParseOperation<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/originaldata",
                "title" : "var originalData: Data?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/relation",
                "title" : "var relation: ParseRelation<Self>?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/create(options:)",
                "title" : "func create(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/create(options:callbackqueue:completion:)",
                "title" : "func create(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/createpublisher(options:)",
                "title" : "func createPublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/delete(options:callbackqueue:completion:)",
                "title" : "func delete(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/deletepublisher(options:)",
                "title" : "func deletePublisher(options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/fetch(includekeys:options:callbackqueue:completion:)",
                "title" : "func fetch(includeKeys: [String]?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/fetchpublisher(includekeys:options:)",
                "title" : "func fetchPublisher(includeKeys: [String]?, options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/get(_:)",
                "title" : "func get<W>(KeyPath<Self, W?>) throws -> W",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/getdecoder()-swift.method",
                "title" : "func getDecoder() -> JSONDecoder",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/getencoder()-swift.method",
                "title" : "func getEncoder() -> ParseEncoder",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/getjsonencoder()-swift.method",
                "title" : "func getJSONEncoder() -> JSONEncoder",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseobject\/hassameobjectid(as:)-84qh",
                        "title" : "func hasSameObjectId<T>(as: T) -> Bool",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseObject Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseobject\/hassameobjectid(as:)-5gkd9",
                "title" : "func hasSameObjectId<T>(as: T) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/isdirtyforkey(_:)",
                "title" : "func isDirtyForKey<W>(KeyPath<Self, W?>) throws -> Bool",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseobject\/merge(with:)-4hjo0",
                        "title" : "func merge(with: Self) throws -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseobject\/merge(with:)-99wj6",
                        "title" : "func merge(with: Self) throws -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseobject\/merge(with:)-35a9v",
                        "title" : "func merge(with: Self) throws -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseobject\/merge(with:)-3cli5",
                        "title" : "func merge(with: Self) throws -> Self",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseObject Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseobject\/merge(with:)-6romo",
                "title" : "func merge(with: Self) throws -> Self",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseobject\/mergeparse(with:)-49r7x",
                        "title" : "func mergeParse(with: Self) throws -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseobject\/mergeparse(with:)-6csd5",
                        "title" : "func mergeParse(with: Self) throws -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseobject\/mergeparse(with:)-8plu3",
                        "title" : "func mergeParse(with: Self) throws -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseobject\/mergeparse(with:)-13frx",
                        "title" : "func mergeParse(with: Self) throws -> Self",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseObject Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseobject\/mergeparse(with:)-9yft4",
                "title" : "func mergeParse(with: Self) throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/relation(_:child:)",
                "title" : "func relation<U>(String, child: U) throws -> ParseRelation<Self>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/relation(_:classname:)",
                "title" : "func relation(String, className: String) throws -> ParseRelation<Self>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/relation(_:key:)",
                "title" : "func relation(ParseRelation<Self>?, key: String) throws -> ParseRelation<Self>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/relation(_:key:with:)-1w6vg",
                "title" : "func relation<T>(ParseRelation<T>?, key: String, with: T) throws -> ParseRelation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/relation(_:key:with:)-4e4g",
                "title" : "func relation<T>(ParseRelation<T>?, key: String, with: Pointer<T>) throws -> ParseRelation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/relation(_:object:)",
                "title" : "func relation<V>(String, object: V.Type) throws -> ParseRelation<Self>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/replace(options:)",
                "title" : "func replace(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/replace(options:callbackqueue:completion:)",
                "title" : "func replace(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/replacepublisher(options:)",
                "title" : "func replacePublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/revert()",
                "title" : "func revert() throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/revert(_:)",
                "title" : "func revert<W>(WritableKeyPath<Self, W?>) throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/save(ignoringcustomobjectidconfig:options:)",
                "title" : "func save(ignoringCustomObjectIdConfig: Bool, options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/save(ignoringcustomobjectidconfig:options:callbackqueue:completion:)",
                "title" : "func save(ignoringCustomObjectIdConfig: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/savepublisher(ignoringcustomobjectidconfig:options:)",
                "title" : "func savePublisher(ignoringCustomObjectIdConfig: Bool, options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/set(_:to:)",
                "title" : "func set<W>(WritableKeyPath<Self, W?>, to: W) -> Self",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseobject\/shouldrestorekey(_:original:)-1tqz7",
                        "title" : "func shouldRestoreKey<W>(KeyPath<Self, W?>, original: Self) -> Bool",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseObject Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseobject\/shouldrestorekey(_:original:)-9ntkl",
                "title" : "func shouldRestoreKey<W>(KeyPath<Self, W?>, original: Self) -> Bool",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseobject\/topointer()-4qih8",
                        "title" : "func toPointer() throws -> Pointer<Self>",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseObject Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseobject\/topointer()-413zu",
                "title" : "func toPointer() throws -> Pointer<Self>",
                "type" : "method"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/query",
                "title" : "static var query: Query<Self>",
                "type" : "property"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/getdecoder()-swift.type.method",
                "title" : "static func getDecoder() -> JSONDecoder",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/getencoder()-swift.type.method",
                "title" : "static func getEncoder() -> ParseEncoder",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/getjsonencoder()-swift.type.method",
                "title" : "static func getJSONEncoder() -> JSONEncoder",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/query(_:)-27shx",
                "title" : "static func query([QueryConstraint]) -> Query<Self>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/query(_:)-3tnph",
                "title" : "static func query(QueryConstraint...) -> Query<Self>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/queryrelations(_:parent:)-87cdn",
                "title" : "static func queryRelations<U>(String, parent: U) throws -> Query<Self>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/queryrelations(_:parent:)-xpkl",
                "title" : "static func queryRelations<U>(String, parent: Pointer<U>) -> Query<Self>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/relation(_:key:with:)-47yjk",
                "title" : "static func relation<T>(ParseRelation<T>?, key: String, with: T) throws -> ParseRelation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/relation(_:key:with:)-98tek",
                "title" : "static func relation<T>(ParseRelation<T>?, key: String, with: Pointer<T>) throws -> ParseRelation<T>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseobject\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseobject\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseobject\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseobject\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseobject",
            "title" : "ParseObject",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationable\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationable\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationable\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationable\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseoperationable",
            "title" : "ParseOperationable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepointer\/classname",
                "title" : "var className: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepointer\/objectid",
                "title" : "var objectId: String",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsepointer",
            "title" : "ParsePointer",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepointerobject\/object",
                "title" : "Object",
                "type" : "associatedtype"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsepointerobject",
            "title" : "ParsePointerObject",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseprimitivestorable\/delete(valuefor:)",
                "title" : "func delete(valueFor: String) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseprimitivestorable\/deleteall()",
                "title" : "func deleteAll() throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseprimitivestorable\/get(valuefor:)",
                "title" : "func get<T>(valueFor: String) throws -> T?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseprimitivestorable\/set(_:for:)",
                "title" : "func set<T>(T, for: String) throws",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseprimitivestorable",
            "title" : "ParsePrimitiveStorable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplepayloadable\/alert",
                "title" : "var alert: ParsePushAppleAlert?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplepayloadable\/category",
                "title" : "var category: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplepayloadable\/collapseid",
                "title" : "var collapseId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplepayloadable\/interruptionlevel",
                "title" : "var interruptionLevel: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplepayloadable\/mdm",
                "title" : "var mdm: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplepayloadable\/pushtype",
                "title" : "var pushType: ParsePushPayloadApple.PushType?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplepayloadable\/relevancescore",
                "title" : "var relevanceScore: Double?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplepayloadable\/targetcontentid",
                "title" : "var targetContentId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplepayloadable\/threadid",
                "title" : "var threadId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplepayloadable\/topic",
                "title" : "var topic: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplepayloadable\/urlargs",
                "title" : "var urlArgs: [String]?",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsepushapplepayloadable",
            "title" : "ParsePushApplePayloadable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasepayloadable\/collapsekey",
                "title" : "var collapseKey: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasepayloadable\/data",
                "title" : "var data: [String : String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasepayloadable\/delaywhileidle",
                "title" : "var delayWhileIdle: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasepayloadable\/dryrun",
                "title" : "var dryRun: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasepayloadable\/notification",
                "title" : "var notification: ParsePushFirebaseNotification?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasepayloadable\/restrictedpackagename",
                "title" : "var restrictedPackageName: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasepayloadable\/title",
                "title" : "var title: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasepayloadable\/uri",
                "title" : "var uri: URL?",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsepushfirebasepayloadable",
            "title" : "ParsePushFirebasePayloadable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadable\/init()",
                "title" : "init()",
                "type" : "init"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsepushpayloadable",
            "title" : "ParsePushPayloadable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/pushtype",
                "title" : "PushType",
                "type" : "associatedtype"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/count",
                "title" : "var count: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/errormessage",
                "title" : "var errorMessage: ParseError?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/expirationinterval",
                "title" : "var expirationInterval: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/expiry",
                "title" : "var expiry: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/failedpertype",
                "title" : "var failedPerType: [String : Int]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/failedperutcoffset",
                "title" : "var failedPerUTCOffset: [String : Int]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/numfailed",
                "title" : "var numFailed: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/numsent",
                "title" : "var numSent: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/payload",
                "title" : "var payload: PushType?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/pushhash",
                "title" : "var pushHash: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/pushtime",
                "title" : "var pushTime: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/query",
                "title" : "var query: QueryWhere?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/sentpertype",
                "title" : "var sentPerType: [String : Int]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/sentperutcoffset",
                "title" : "var sentPerUTCOffset: [String : Int]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/source",
                "title" : "var source: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/status",
                "title" : "var status: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/title",
                "title" : "var title: String?",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsepushstatusable",
            "title" : "ParsePushStatusable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsequeryscorable\/score",
                "title" : "var score: Double?",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsequeryscorable",
            "title" : "ParseQueryScorable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelationoperationable\/object",
                "title" : "Object",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelationoperationable\/objects",
                "title" : "var objects: [Pointer<Object>]",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parseswift\/parserelationoperationable",
            "title" : "ParseRelationOperationable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parserole\/roleuser",
                "title" : "RoleUser",
                "type" : "associatedtype"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parserole\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parserole\/init(name:)-3m5k4",
                        "title" : "init(name: String) throws",
                        "type" : "init"
                      }
                    ],
                    "title" : "ParseRole Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parserole\/init(name:)-56bux",
                "title" : "init(name: String) throws",
                "type" : "init"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parserole\/init(name:acl:)-8u3ui",
                        "title" : "init(name: String, acl: ParseACL) throws",
                        "type" : "init"
                      }
                    ],
                    "title" : "ParseRole Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parserole\/init(name:acl:)-3h6fq",
                "title" : "init(name: String, acl: ParseACL) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parserole\/name",
                "title" : "var name: String?",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parserole\/roles-1kfkg",
                        "title" : "var roles: ParseRelation<Self>?",
                        "type" : "property"
                      }
                    ],
                    "title" : "ParseRole Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parserole\/roles-7omk",
                "title" : "var roles: ParseRelation<Self>?",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parserole\/users-6uxer",
                        "title" : "var users: ParseRelation<Self>?",
                        "type" : "property"
                      }
                    ],
                    "title" : "ParseRole Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parserole\/users-7o4v6",
                "title" : "var users: ParseRelation<Self>?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parserole\/queryroles()",
                "title" : "func queryRoles() throws -> Query<Self>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parserole\/queryusers()",
                "title" : "func queryUsers() throws -> Query<RoleUser>",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/parserole",
            "title" : "ParseRole",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsesession\/sessionuser",
                "title" : "SessionUser",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsesession\/createdwith",
                "title" : "var createdWith: [String : String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsesession\/expiresat",
                "title" : "var expiresAt: Date",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsesession\/installationid",
                "title" : "var installationId: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsesession\/restricted",
                "title" : "var restricted: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsesession\/sessiontoken",
                "title" : "var sessionToken: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsesession\/user",
                "title" : "var user: SessionUser",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsesession",
            "title" : "ParseSession",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetypeable\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsetypeable\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetypeable\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsetypeable\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsetypeable",
            "title" : "ParseTypeable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/anonymous-swift.property",
                "title" : "var anonymous: ParseAnonymous<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/apple-swift.property",
                "title" : "var apple: ParseApple<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/authdata",
                "title" : "var authData: [String : [String : String]?]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/email",
                "title" : "var email: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/emailverified",
                "title" : "var emailVerified: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/facebook-swift.property",
                "title" : "var facebook: ParseFacebook<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/github-swift.property",
                "title" : "var github: ParseGitHub<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/google-swift.property",
                "title" : "var google: ParseGoogle<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/instagram-swift.property",
                "title" : "var instagram: ParseInstagram<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/ldap-swift.property",
                "title" : "var ldap: ParseLDAP<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/linkedin-swift.property",
                "title" : "var linkedin: ParseLinkedIn<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/password",
                "title" : "var password: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/spotify-swift.property",
                "title" : "var spotify: ParseSpotify<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/twitter-swift.property",
                "title" : "var twitter: ParseTwitter<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/username",
                "title" : "var username: String?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/become(sessiontoken:options:)-swift.method",
                "title" : "func become(sessionToken: String, options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/become(sessiontoken:options:callbackqueue:completion:)-swift.method",
                "title" : "func become(sessionToken: String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/becomepublisher(sessiontoken:options:)-swift.method",
                "title" : "func becomePublisher(sessionToken: String, options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/create(options:)",
                "title" : "func create(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/create(options:callbackqueue:completion:)",
                "title" : "func create(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/createpublisher(options:)",
                "title" : "func createPublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/delete(options:callbackqueue:completion:)",
                "title" : "func delete(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/deletepublisher(options:)",
                "title" : "func deletePublisher(options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/fetch(includekeys:options:callbackqueue:completion:)",
                "title" : "func fetch(includeKeys: [String]?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/fetchpublisher(includekeys:options:)",
                "title" : "func fetchPublisher(includeKeys: [String]?, options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/islinked(with:)",
                "title" : "func isLinked(with: String) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/replace(options:)",
                "title" : "func replace(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/replace(options:callbackqueue:completion:)",
                "title" : "func replace(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/replacepublisher(options:)",
                "title" : "func replacePublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/save(ignoringcustomobjectidconfig:options:)",
                "title" : "func save(ignoringCustomObjectIdConfig: Bool, options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/save(ignoringcustomobjectidconfig:options:callbackqueue:completion:)",
                "title" : "func save(ignoringCustomObjectIdConfig: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/savepublisher(options:ignoringcustomobjectidconfig:)",
                "title" : "func savePublisher(options: API.Options, ignoringCustomObjectIdConfig: Bool) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/signup(options:)",
                "title" : "func signup(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/signup(options:callbackqueue:completion:)",
                "title" : "func signup(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/signuppublisher(options:)",
                "title" : "func signupPublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/strip(_:)",
                "title" : "func strip(String) -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/unlink(_:options:)",
                "title" : "func unlink(String, options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/unlink(_:options:callbackqueue:completion:)",
                "title" : "func unlink(String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/unlinkpublisher(_:options:)",
                "title" : "func unlinkPublisher(String, options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/anonymous-swift.type.property",
                "title" : "static var anonymous: ParseAnonymous<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/apple-swift.type.property",
                "title" : "static var apple: ParseApple<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/facebook-swift.type.property",
                "title" : "static var facebook: ParseFacebook<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/github-swift.type.property",
                "title" : "static var github: ParseGitHub<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/google-swift.type.property",
                "title" : "static var google: ParseGoogle<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/instagram-swift.type.property",
                "title" : "static var instagram: ParseInstagram<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/ldap-swift.type.property",
                "title" : "static var ldap: ParseLDAP<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/linkedin-swift.type.property",
                "title" : "static var linkedin: ParseLinkedIn<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/spotify-swift.type.property",
                "title" : "static var spotify: ParseSpotify<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/twitter-swift.type.property",
                "title" : "static var twitter: ParseTwitter<Self>",
                "type" : "property"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/become(sessiontoken:options:)-swift.type.method",
                "title" : "static func become(sessionToken: String, options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/become(sessiontoken:options:callbackqueue:completion:)-swift.type.method",
                "title" : "static func become(sessionToken: String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/becomepublisher(sessiontoken:options:)-swift.type.method",
                "title" : "static func becomePublisher(sessionToken: String, options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/current()",
                "title" : "static func current() async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/enableautomaticlogin(_:)",
                "title" : "static func enableAutomaticLogin(Bool) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/link(_:authdata:options:)",
                "title" : "static func link(String, authData: [String : String], options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/link(_:authdata:options:callbackqueue:completion:)",
                "title" : "static func link(String, authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/linkpublisher(_:authdata:options:)",
                "title" : "static func linkPublisher(String, authData: [String : String], options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/login(_:authdata:options:)",
                "title" : "static func login(String, authData: [String : String], options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/login(_:authdata:options:callbackqueue:completion:)",
                "title" : "static func login(String, authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/login(username:email:password:authdata:options:)",
                "title" : "static func login(username: String?, email: String?, password: String, authData: [String : [String : String]?]?, options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/login(username:email:password:authdata:options:callbackqueue:completion:)",
                "title" : "static func login(username: String?, email: String?, password: String, authData: [String : [String : String]?]?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/loginas(objectid:options:)",
                "title" : "static func loginAs(objectId: String, options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/loginas(objectid:options:callbackqueue:completion:)",
                "title" : "static func loginAs(objectId: String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/loginaspublisher(objectid:options:)",
                "title" : "static func loginAsPublisher(objectId: String, options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/loginpublisher(_:authdata:options:)",
                "title" : "static func loginPublisher(String, authData: [String : String], options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/loginpublisher(username:email:password:authdata:options:)",
                "title" : "static func loginPublisher(username: String?, email: String?, password: String, authData: [String : [String : String]?]?, options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/loginusingobjckeychain(options:)",
                "title" : "static func loginUsingObjCKeychain(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/loginusingobjckeychain(options:callbackqueue:completion:)",
                "title" : "static func loginUsingObjCKeychain(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/loginusingobjckeychainpublisher(options:)",
                "title" : "static func loginUsingObjCKeychainPublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/logout(options:)",
                "title" : "static func logout(options: API.Options) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/logout(options:callbackqueue:completion:)",
                "title" : "static func logout(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/logoutpublisher(options:)",
                "title" : "static func logoutPublisher(options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/passwordreset(email:options:)",
                "title" : "static func passwordReset(email: String, options: API.Options) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/passwordreset(email:options:callbackqueue:completion:)",
                "title" : "static func passwordReset(email: String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/passwordresetpublisher(email:options:)",
                "title" : "static func passwordResetPublisher(email: String, options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/sessiontoken()",
                "title" : "static func sessionToken() async throws -> String",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/signup(username:password:options:)",
                "title" : "static func signup(username: String, password: String, options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/signup(username:password:options:callbackqueue:completion:)",
                "title" : "static func signup(username: String, password: String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/signuppublisher(username:password:options:)",
                "title" : "static func signupPublisher(username: String, password: String, options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/verificationemail(email:options:)",
                "title" : "static func verificationEmail(email: String, options: API.Options) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/verificationemail(email:options:callbackqueue:completion:)",
                "title" : "static func verificationEmail(email: String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/verificationemailpublisher(email:options:)",
                "title" : "static func verificationEmailPublisher(email: String, options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/verifypassword(password:usingpost:options:)",
                "title" : "static func verifyPassword(password: String, usingPost: Bool, options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/verifypassword(password:usingpost:options:callbackqueue:completion:)",
                "title" : "static func verifyPassword(password: String, usingPost: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/verifypasswordpublisher(password:usingpost:options:)",
                "title" : "static func verifyPasswordPublisher(password: String, usingPost: Bool, options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseuser",
            "title" : "ParseUser",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/queryobservable\/object",
                "title" : "Object",
                "type" : "associatedtype"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/queryobservable\/init(query:)",
                "title" : "init(query: Query<Object>)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/queryobservable\/query",
                "title" : "var query: Query<Object>",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/queryobservable\/aggregate(_:options:)",
                "title" : "func aggregate([[String : Encodable]], options: API.Options) async",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/queryobservable\/count(options:)",
                "title" : "func count(options: API.Options) async",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/queryobservable\/find(options:)",
                "title" : "func find(options: API.Options) async",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/queryobservable\/findall(batchlimit:options:)",
                "title" : "func findAll(batchLimit: Int?, options: API.Options) async",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/queryobservable\/first(options:)",
                "title" : "func first(options: API.Options) async",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/queryobservable",
            "title" : "QueryObservable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/querysubscribable\/object",
                "title" : "Object",
                "type" : "associatedtype"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/querysubscribable\/init(query:)",
                "title" : "init(query: Query<Object>)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/querysubscribable\/query",
                "title" : "var query: Query<Object>",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/querysubscribable\/didreceive(_:)",
                "title" : "func didReceive(Data) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/querysubscribable\/didsubscribe(_:)",
                "title" : "func didSubscribe(Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/querysubscribable\/didunsubscribe()",
                "title" : "func didUnsubscribe()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/querysubscribable",
            "title" : "QuerySubscribable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/queryable\/resulttype",
                "title" : "ResultType",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/queryable\/count(options:)",
                "title" : "func count(options: API.Options) async throws -> Int",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/queryable\/count(options:callbackqueue:completion:)",
                "title" : "func count(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Int, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/queryable\/find(options:)",
                "title" : "func find(options: API.Options) async throws -> [ResultType]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/queryable\/find(options:callbackqueue:completion:)",
                "title" : "func find(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[ResultType], ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/queryable\/first(options:)",
                "title" : "func first(options: API.Options) async throws -> ResultType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/queryable\/first(options:callbackqueue:completion:)",
                "title" : "func first(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<ResultType, ParseError>) -> Void)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/queryable",
            "title" : "Queryable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/savable\/savingtype",
                "title" : "SavingType",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/savable\/issaved()",
                "title" : "func isSaved() async throws -> Bool",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/savable\/save()-6n6v7",
                        "title" : "func save() async throws -> SavingType",
                        "type" : "method"
                      }
                    ],
                    "title" : "Savable Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/savable\/save()-51ej7",
                "title" : "func save() async throws -> SavingType",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/savable\/save(options:)-jkt4",
                        "title" : "func save(options: API.Options) async throws -> Self",
                        "type" : "method"
                      }
                    ],
                    "title" : "Savable Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/savable\/save(options:)-15f1x",
                "title" : "func save(options: API.Options) async throws -> SavingType",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/savable",
            "title" : "Savable",
            "type" : "protocol"
          },
          {
            "title" : "Structures",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/api\/options",
                "title" : "API.Options",
                "type" : "typealias"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/aggregate(classname:)",
                    "title" : "case aggregate(className: String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/any(_:)",
                    "title" : "case any(String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/batch",
                    "title" : "case batch",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/config",
                    "title" : "case config",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/event(event:)",
                    "title" : "case event(event: String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/file(filename:)",
                    "title" : "case file(fileName: String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/functions(name:)",
                    "title" : "case functions(name: String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/health",
                    "title" : "case health",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/hookfunction(request:)",
                    "title" : "case hookFunction(request: FunctionRequest)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/hookfunctions",
                    "title" : "case hookFunctions",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/hooktrigger(request:)",
                    "title" : "case hookTrigger(request: TriggerRequest)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/hooktriggers",
                    "title" : "case hookTriggers",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/installation(objectid:)",
                    "title" : "case installation(objectId: String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/installations",
                    "title" : "case installations",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/jobs(name:)",
                    "title" : "case jobs(name: String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/login",
                    "title" : "case login",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/loginas",
                    "title" : "case loginAs",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/logout",
                    "title" : "case logout",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/object(classname:objectid:)",
                    "title" : "case object(className: String, objectId: String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/objects(classname:)",
                    "title" : "case objects(className: String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/passwordreset",
                    "title" : "case passwordReset",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/purge(classname:)",
                    "title" : "case purge(className: String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/push",
                    "title" : "case push",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/role(objectid:)",
                    "title" : "case role(objectId: String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/roles",
                    "title" : "case roles",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/schema(classname:)",
                    "title" : "case schema(className: String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/schemas",
                    "title" : "case schemas",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/serverinfo",
                    "title" : "case serverInfo",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/session(objectid:)",
                    "title" : "case session(objectId: String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/sessions",
                    "title" : "case sessions",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/user(objectid:)",
                    "title" : "case user(objectId: String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/users",
                    "title" : "case users",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/verificationemail",
                    "title" : "case verificationEmail",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/verifypassword",
                    "title" : "case verifyPassword",
                    "type" : "case"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/urlcomponent",
                    "title" : "var urlComponent: String",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/api\/endpoint",
                "title" : "API.Endpoint",
                "type" : "enum"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/method\/delete",
                    "title" : "case DELETE",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/method\/get",
                    "title" : "case GET",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/method\/patch",
                    "title" : "case PATCH",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/method\/post",
                    "title" : "case POST",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/method\/put",
                    "title" : "case PUT",
                    "type" : "case"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/method\/init(rawvalue:)",
                    "title" : "init?(rawValue: String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/api\/method\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/api\/method\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/api\/method\/hashvalue",
                        "title" : "var hashValue: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/api\/method\/encode(to:)",
                        "title" : "func encode(to: any Encoder) throws",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/api\/method\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/api\/method\/rawrepresentable-implementations",
                    "title" : "RawRepresentable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/parseswift\/api\/method",
                "title" : "API.Method",
                "type" : "enum"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/option\/==(_:_:)",
                    "title" : "static func == (API.Option, API.Option) -> Bool",
                    "type" : "op"
                  },
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/option\/cachepolicy(_:)",
                    "title" : "case cachePolicy(URLRequest.CachePolicy)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/option\/context(_:)",
                    "title" : "case context(Encodable & Sendable)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/option\/filesize(_:)",
                    "title" : "case fileSize(String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/option\/installationid(_:)",
                    "title" : "case installationId(String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/option\/metadata(_:)",
                    "title" : "case metadata([String : String])",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/option\/mimetype(_:)",
                    "title" : "case mimeType(String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/option\/removemimetype",
                    "title" : "case removeMimeType",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/option\/serverurl(_:)",
                    "title" : "case serverURL(String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/option\/sessiontoken(_:)",
                    "title" : "case sessionToken(String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/option\/tags(_:)",
                    "title" : "case tags([String : String])",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/option\/usemaintenancekey",
                    "title" : "case useMaintenanceKey",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/option\/useprimarykey",
                    "title" : "case usePrimaryKey",
                    "type" : "case"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/option\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/api\/option\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/api\/option\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/parseswift\/api\/option",
                "title" : "API.Option",
                "type" : "enum"
              }
            ],
            "path" : "\/documentation\/parseswift\/api",
            "title" : "API",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/functionrequest\/init(hookfunction:)",
                "title" : "init<F>(hookFunction: F) throws",
                "type" : "init"
              }
            ],
            "path" : "\/documentation\/parseswift\/functionrequest",
            "title" : "FunctionRequest",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/publicread",
                "title" : "var publicRead: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/publicwrite",
                "title" : "var publicWrite: Bool",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/getreadaccess(objectid:)",
                "title" : "func getReadAccess(objectId: String) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/getreadaccess(role:)",
                "title" : "func getReadAccess<T>(role: T) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/getreadaccess(rolename:)",
                "title" : "func getReadAccess(roleName: String) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/getreadaccess(user:)",
                "title" : "func getReadAccess<T>(user: T) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/getwriteaccess(objectid:)",
                "title" : "func getWriteAccess(objectId: String) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/getwriteaccess(role:)",
                "title" : "func getWriteAccess<T>(role: T) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/getwriteaccess(rolename:)",
                "title" : "func getWriteAccess(roleName: String) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/getwriteaccess(user:)",
                "title" : "func getWriteAccess<T>(user: T) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/setreadaccess(objectid:value:)",
                "title" : "func setReadAccess(objectId: String, value: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/setreadaccess(role:value:)",
                "title" : "func setReadAccess<T>(role: T, value: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/setreadaccess(rolename:value:)",
                "title" : "func setReadAccess(roleName: String, value: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/setreadaccess(user:value:)",
                "title" : "func setReadAccess<T>(user: T, value: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/setwriteaccess(objectid:value:)",
                "title" : "func setWriteAccess(objectId: String, value: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/setwriteaccess(role:value:)",
                "title" : "func setWriteAccess<T>(role: T, value: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/setwriteaccess(rolename:value:)",
                "title" : "func setWriteAccess(roleName: String, value: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/setwriteaccess(user:value:)",
                "title" : "func setWriteAccess<T>(user: T, value: Bool)",
                "type" : "method"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/defaultacl()",
                "title" : "static func defaultACL() async throws -> ParseACL",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/setdefaultacl(_:withaccessforcurrentuser:)",
                "title" : "static func setDefaultACL(ParseACL, withAccessForCurrentUser: Bool) async throws -> ParseACL",
                "type" : "method"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseacl\/access\/read",
                    "title" : "case read",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseacl\/access\/write",
                    "title" : "case write",
                    "type" : "case"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseacl\/access\/init(from:)-630fw",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseacl\/access\/init(intvalue:)",
                    "title" : "init?(intValue: Int)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseacl\/access\/init(rawvalue:)",
                    "title" : "init?(rawValue: String)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseacl\/access\/init(stringvalue:)",
                    "title" : "init?(stringValue: String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseacl\/access\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseacl\/access\/debugdescription",
                        "title" : "var debugDescription: String",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseacl\/access\/description",
                        "title" : "var description: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parseacl\/access\/codingkey-implementations",
                    "title" : "CodingKey Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseacl\/access\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parseacl\/access\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseacl\/access\/init(from:)-3nwp2",
                        "title" : "init(from: any Decoder) throws",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseacl\/access\/hashvalue",
                        "title" : "var hashValue: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseacl\/access\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parseacl\/access\/rawrepresentable-implementations",
                    "title" : "RawRepresentable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseacl\/access",
                "title" : "ParseACL.Access",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseacl\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseacl\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseacl\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseacl\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseacl\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseacl\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseacl\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseacl\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseacl\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseacl\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseacl",
            "title" : "ParseACL",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanalytics\/init(name:dimensions:at:)",
                "title" : "init(name: String, dimensions: [String : Codable]?, at: Date?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanalytics\/date",
                "title" : "var date: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanalytics\/dimensions",
                "title" : "var dimensions: [String : Codable]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanalytics\/name",
                "title" : "var name: String",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanalytics\/track(dimensions:at:options:)",
                "title" : "func track(dimensions: [String : String]?, at: Date?, options: API.Options) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanalytics\/track(dimensions:at:options:callbackqueue:completion:)",
                "title" : "func track(dimensions: [String : String]?, at: Date?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanalytics\/track(options:)",
                "title" : "func track(options: API.Options) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanalytics\/track(options:callbackqueue:completion:)",
                "title" : "func track(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanalytics\/trackpublisher(dimensions:at:options:)",
                "title" : "func trackPublisher(dimensions: [String : String]?, at: Date?, options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanalytics\/trackpublisher(options:)",
                "title" : "func trackPublisher(options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanalytics\/trackappopened(dimensions:at:options:)",
                "title" : "static func trackAppOpened(dimensions: [String : String]?, at: Date?, options: API.Options) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanalytics\/trackappopened(dimensions:at:options:callbackqueue:completion:)",
                "title" : "static func trackAppOpened(dimensions: [String : String]?, at: Date?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanalytics\/trackappopenedpublisher(dimensions:at:options:)",
                "title" : "static func trackAppOpenedPublisher(dimensions: [String : String]?, at: Date?, options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanalytics\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseanalytics\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanalytics\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseanalytics\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanalytics\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseanalytics\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanalytics\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseanalytics\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanalytics\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseanalytics\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseanalytics",
            "title" : "ParseAnalytics",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanonymous\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanonymous\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanonymous\/login(authdata:options:)",
                "title" : "func login(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanonymous\/login(options:)",
                "title" : "func login(options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanonymous\/login(options:callbackqueue:completion:)",
                "title" : "func login(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanonymous\/loginpublisher(options:)",
                "title" : "func loginPublisher(options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanonymous\/islinked()",
                    "title" : "func isLinked() async -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanonymous\/link(authdata:options:)",
                    "title" : "func link(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanonymous\/link(authdata:options:callbackqueue:completion:)",
                    "title" : "func link(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanonymous\/linkpublisher(authdata:options:)",
                    "title" : "func linkPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanonymous\/login(authdata:options:callbackqueue:completion:)",
                    "title" : "func login(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanonymous\/loginpublisher(authdata:options:)",
                    "title" : "func loginPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanonymous\/strip()",
                    "title" : "func strip() async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanonymous\/strip(_:)",
                    "title" : "func strip(AuthenticatedUser) -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanonymous\/unlink(_:options:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanonymous\/unlink(_:options:callbackqueue:completion:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanonymous\/unlink(options:)",
                    "title" : "func unlink(options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanonymous\/unlink(options:callbackqueue:completion:)",
                    "title" : "func unlink(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanonymous\/unlinkpublisher(_:options:)",
                    "title" : "func unlinkPublisher(AuthenticatedUser, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanonymous\/unlinkpublisher(options:)",
                    "title" : "func unlinkPublisher(options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanonymous\/islinked(with:)",
                    "title" : "static func isLinked(with: AuthenticatedUser) -> Bool",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseanonymous\/parseauthentication-implementations",
                "title" : "ParseAuthentication Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseanonymous",
            "title" : "ParseAnonymous",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseapple\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseapple\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseapple\/link(user:identitytoken:options:)",
                "title" : "func link(user: String, identityToken: Data, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseapple\/link(user:identitytoken:options:callbackqueue:completion:)",
                "title" : "func link(user: String, identityToken: Data, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseapple\/linkpublisher(user:identitytoken:options:)",
                "title" : "func linkPublisher(user: String, identityToken: Data, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseapple\/login(authdata:options:)",
                "title" : "func login(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseapple\/login(user:identitytoken:options:)",
                "title" : "func login(user: String, identityToken: Data, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseapple\/login(user:identitytoken:options:callbackqueue:completion:)",
                "title" : "func login(user: String, identityToken: Data, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseapple\/loginpublisher(user:identitytoken:options:)",
                "title" : "func loginPublisher(user: String, identityToken: Data, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseapple\/islinked()",
                    "title" : "func isLinked() async -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseapple\/link(authdata:options:)",
                    "title" : "func link(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseapple\/link(authdata:options:callbackqueue:completion:)",
                    "title" : "func link(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseapple\/linkpublisher(authdata:options:)",
                    "title" : "func linkPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseapple\/login(authdata:options:callbackqueue:completion:)",
                    "title" : "func login(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseapple\/loginpublisher(authdata:options:)",
                    "title" : "func loginPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseapple\/strip()",
                    "title" : "func strip() async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseapple\/strip(_:)",
                    "title" : "func strip(AuthenticatedUser) -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseapple\/unlink(_:options:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseapple\/unlink(_:options:callbackqueue:completion:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseapple\/unlink(options:)",
                    "title" : "func unlink(options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseapple\/unlink(options:callbackqueue:completion:)",
                    "title" : "func unlink(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseapple\/unlinkpublisher(_:options:)",
                    "title" : "func unlinkPublisher(AuthenticatedUser, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseapple\/unlinkpublisher(options:)",
                    "title" : "func unlinkPublisher(options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseapple\/islinked(with:)",
                    "title" : "static func isLinked(with: AuthenticatedUser) -> Bool",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseapple\/parseauthentication-implementations",
                "title" : "ParseAuthentication Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseapple",
            "title" : "ParseApple",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsebytes\/init(base64:)",
                "title" : "init(base64: String)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsebytes\/init(data:)",
                "title" : "init(data: Data)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsebytes\/base64",
                "title" : "let base64: String",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsebytes\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsebytes\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsebytes\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsebytes\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsebytes\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsebytes\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsebytes\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsebytes\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsebytes\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsebytes\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsebytes",
            "title" : "ParseBytes",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/init(requiresauthentication:publicaccess:)",
                "title" : "init(requiresAuthentication: Bool, publicAccess: Bool)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/protectedfields",
                "title" : "var protectedFields: [String : Set<String>]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/readuserfields",
                "title" : "var readUserFields: Set<String>?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/writeuserfields",
                "title" : "var writeUserFields: Set<String>?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/addpointerfields(_:on:)",
                "title" : "func addPointerFields(Set<String>, on: Action) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/addprotectedfields(_:for:)-2hwwg",
                "title" : "func addProtectedFields(Set<String>, for: String) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/addprotectedfields(_:for:)-3ld7d",
                "title" : "func addProtectedFields<U>(Set<String>, for: Pointer<U>) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/addprotectedfields(_:for:)-6fcbm",
                "title" : "func addProtectedFields<U>(Set<String>, for: U) throws -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/addprotectedfields(_:for:)-7mmnw",
                "title" : "func addProtectedFields<R>(Set<String>, for: R) throws -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/addprotectedfieldspublic(_:)",
                "title" : "func addProtectedFieldsPublic(Set<String>) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/addprotectedfieldsrequiresauthentication(_:)",
                "title" : "func addProtectedFieldsRequiresAuthentication(Set<String>) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/addprotectedfieldsuser(_:userfield:)",
                "title" : "func addProtectedFieldsUser(Set<String>, userField: String) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/getpointerfields(_:)",
                "title" : "func getPointerFields(Action) -> Set<String>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/getprotectedfields(_:)-1ibkv",
                "title" : "func getProtectedFields<R>(R) throws -> Set<String>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/getprotectedfields(_:)-35eqy",
                "title" : "func getProtectedFields(String) -> Set<String>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/getprotectedfields(_:)-3oyee",
                "title" : "func getProtectedFields<U>(Pointer<U>) -> Set<String>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/getprotectedfields(_:)-6ueex",
                "title" : "func getProtectedFields<U>(U) throws -> Set<String>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/getprotectedfieldspublic()",
                "title" : "func getProtectedFieldsPublic() -> Set<String>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/getprotectedfieldsrequiresauthentication()",
                "title" : "func getProtectedFieldsRequiresAuthentication() -> Set<String>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/getprotectedfieldsuser(_:)",
                "title" : "func getProtectedFieldsUser(String) -> Set<String>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/hasaccess(_:for:)-37b9k",
                "title" : "func hasAccess<U>(Action, for: U) throws -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/hasaccess(_:for:)-7qp10",
                "title" : "func hasAccess<R>(Action, for: R) throws -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/hasaccess(_:for:)-94bwb",
                "title" : "func hasAccess(Action, for: String) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/hasaccess(_:for:)-msxs",
                "title" : "func hasAccess<U>(Action, for: Pointer<U>) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/hasaccesspublic(_:)",
                "title" : "func hasAccessPublic(Action) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/hasaccessrequiresauthentication(_:)",
                "title" : "func hasAccessRequiresAuthentication(Action) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/hasreadaccess(_:)-31rh7",
                "title" : "func hasReadAccess<U>(Pointer<U>) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/hasreadaccess(_:)-4yuat",
                "title" : "func hasReadAccess<R>(R) throws -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/hasreadaccess(_:)-7lyeb",
                "title" : "func hasReadAccess(String) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/hasreadaccess(_:)-bbom",
                "title" : "func hasReadAccess<U>(U) throws -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/hasreadaccesspublic()",
                "title" : "func hasReadAccessPublic() -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/hasreadaccessrequiresauthentication()",
                "title" : "func hasReadAccessRequiresAuthentication() -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/haswriteaccess(_:checkaddfield:)-5ldwm",
                "title" : "func hasWriteAccess<R>(R, checkAddField: Bool) throws -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/haswriteaccess(_:checkaddfield:)-7ov62",
                "title" : "func hasWriteAccess(String, checkAddField: Bool) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/haswriteaccess(_:checkaddfield:)-8k62f",
                "title" : "func hasWriteAccess<U>(Pointer<U>, checkAddField: Bool) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/haswriteaccess(_:checkaddfield:)-9svo4",
                "title" : "func hasWriteAccess<U>(U, checkAddField: Bool) throws -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/haswriteaccesspublic(_:)",
                "title" : "func hasWriteAccessPublic(Bool) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/haswriteaccessrequiresauthentication(_:)",
                "title" : "func hasWriteAccessRequiresAuthentication(Bool) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/removepointerfields(_:on:)",
                "title" : "func removePointerFields(Set<String>, on: Action) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/removeprotectedfields(_:for:)-4w6oa",
                "title" : "func removeProtectedFields<R>(Set<String>, for: R) throws -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/removeprotectedfields(_:for:)-7qajb",
                "title" : "func removeProtectedFields<U>(Set<String>, for: Pointer<U>) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/removeprotectedfields(_:for:)-8it6u",
                "title" : "func removeProtectedFields<U>(Set<String>, for: U) throws -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/removeprotectedfields(_:for:)-9c9jl",
                "title" : "func removeProtectedFields(Set<String>, for: String) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/removeprotectedfieldspublic(_:)",
                "title" : "func removeProtectedFieldsPublic(Set<String>) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/removeprotectedfieldsrequiresauthentication(_:)",
                "title" : "func removeProtectedFieldsRequiresAuthentication(Set<String>) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/removeprotectedfieldsuser(_:userfield:)",
                "title" : "func removeProtectedFieldsUser(Set<String>, userField: String) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setaccess(_:on:for:)-1fd37",
                "title" : "func setAccess(Bool, on: Action, for: String) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setaccess(_:on:for:)-2clcm",
                "title" : "func setAccess<R>(Bool, on: Action, for: R) throws -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setaccess(_:on:for:)-b3t7",
                "title" : "func setAccess<U>(Bool, on: Action, for: U) throws -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setaccess(_:on:for:)-z0aw",
                "title" : "func setAccess<U>(Bool, on: Action, for: Pointer<U>) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setaccesspublic(_:on:)",
                "title" : "func setAccessPublic(Bool, on: Action) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setaccessrequiresauthentication(_:on:)",
                "title" : "func setAccessRequiresAuthentication(Bool, on: Action) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setpointerfields(_:on:)",
                "title" : "func setPointerFields(Set<String>, on: Action) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setprotectedfields(_:for:)-2fsdg",
                "title" : "func setProtectedFields(Set<String>, for: String) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setprotectedfields(_:for:)-3ewb1",
                "title" : "func setProtectedFields<U>(Set<String>, for: Pointer<U>) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setprotectedfields(_:for:)-46xeu",
                "title" : "func setProtectedFields<U>(Set<String>, for: U) throws -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setprotectedfields(_:for:)-7w0s5",
                "title" : "func setProtectedFields<R>(Set<String>, for: R) throws -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setprotectedfields(_:userfield:)",
                "title" : "func setProtectedFields(Set<String>, userField: String) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setprotectedfieldspublic(_:)",
                "title" : "func setProtectedFieldsPublic(Set<String>) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setprotectedfieldsrequiresauthentication(_:)",
                "title" : "func setProtectedFieldsRequiresAuthentication(Set<String>) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setreadaccess(_:for:)-3nc5c",
                "title" : "func setReadAccess<R>(Bool, for: R) throws -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setreadaccess(_:for:)-464o",
                "title" : "func setReadAccess<U>(Bool, for: Pointer<U>) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setreadaccess(_:for:)-4q3c9",
                "title" : "func setReadAccess(Bool, for: String) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setreadaccess(_:for:)-6ssgv",
                "title" : "func setReadAccess<U>(Bool, for: U) throws -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setreadaccesspublic(_:)",
                "title" : "func setReadAccessPublic(Bool) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setreadaccessrequiresauthentication(_:canaddfield:)",
                "title" : "func setReadAccessRequiresAuthentication(Bool, canAddField: Bool) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setwriteaccess(_:for:canaddfield:)-3axhs",
                "title" : "func setWriteAccess<U>(Bool, for: Pointer<U>, canAddField: Bool) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setwriteaccess(_:for:canaddfield:)-4gvup",
                "title" : "func setWriteAccess<U>(Bool, for: U, canAddField: Bool) throws -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setwriteaccess(_:for:canaddfield:)-4ws0r",
                "title" : "func setWriteAccess(Bool, for: String, canAddField: Bool) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setwriteaccess(_:for:canaddfield:)-5qka",
                "title" : "func setWriteAccess<R>(Bool, for: R, canAddField: Bool) throws -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setwriteaccesspublic(_:canaddfield:)",
                "title" : "func setWriteAccessPublic(Bool, canAddField: Bool) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setwriteaccessrequiresauthentication(_:canaddfield:)",
                "title" : "func setWriteAccessRequiresAuthentication(Bool, canAddField: Bool) -> ParseCLP",
                "type" : "method"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseclp\/action\/addfield",
                    "title" : "case addField",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseclp\/action\/count",
                    "title" : "case count",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseclp\/action\/create",
                    "title" : "case create",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseclp\/action\/delete",
                    "title" : "case delete",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseclp\/action\/find",
                    "title" : "case find",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseclp\/action\/get",
                    "title" : "case get",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseclp\/action\/update",
                    "title" : "case update",
                    "type" : "case"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseclp\/action\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parseclp\/action\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseclp\/action",
                "title" : "ParseCLP.Action",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseclp\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseclp\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseclp\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseclp\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseclp\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseclp\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseclp",
            "title" : "ParseCLP",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfigcodable\/current()",
                "title" : "static func current() async throws -> [String : V]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfigcodable\/fetch(options:)",
                "title" : "static func fetch(options: API.Options) async throws -> [String : V]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfigcodable\/fetch(options:callbackqueue:completion:)",
                "title" : "static func fetch(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[String : V], ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfigcodable\/fetchpublisher(options:)",
                "title" : "static func fetchPublisher(options: API.Options) -> Future<[String : V], ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfigcodable\/save(_:options:)",
                "title" : "static func save([String : V], options: API.Options) async throws -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfigcodable\/save(_:options:callbackqueue:completion:)",
                "title" : "static func save([String : V], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Bool, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfigcodable\/savepublisher(_:options:)",
                "title" : "static func savePublisher([String : V], options: API.Options) -> Future<Bool, ParseError>",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseconfigcodable",
            "title" : "ParseConfigCodable",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/init(applicationid:clientkey:primarykey:maintenancekey:webhookkey:serverurl:livequeryserverurl:requiringcustomobjectids:usingtransactions:usingequalqueryconstraint:usingpostforquery:primitivestore:requestcachepolicy:cachememorycapacity:cach-f3sf",
                "title" : "init(applicationId: String, clientKey: String?, primaryKey: String?, maintenanceKey: String?, webhookKey: String?, serverURL: URL, liveQueryServerURL: URL?, requiringCustomObjectIds: Bool, usingTransactions: Bool, usingEqualQueryConstraint: Bool, usingPostForQuery: Bool, primitiveStore: ParsePrimitiveStorable?, requestCachePolicy: URLRequest.CachePolicy, cacheMemoryCapacity: Int, cacheDiskCapacity: Int, usingDataProtectionKeychain: Bool, deletingKeychainIfNeeded: Bool, httpAdditionalHeaders: [AnyHashable : Any]?, usingAutomaticLogin: Bool, maxConnectionAttempts: Int, liveQueryConnectionAdditionalProperties: Bool, liveQueryMaxConnectionAttempts: Int, parseFileTransfer: ParseFileTransferable?, authentication: ((URLAuthenticationChallenge, (URLSession.AuthChallengeDisposition, URLCredential?) -> Void) -> Void)?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/applicationid",
                "title" : "var applicationId: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/cachediskcapacity",
                "title" : "var cacheDiskCapacity: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/cachememorycapacity",
                "title" : "var cacheMemoryCapacity: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/clientkey",
                "title" : "var clientKey: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/httpadditionalheaders",
                "title" : "var httpAdditionalHeaders: [AnyHashable : Any]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/isdeletingkeychainifneeded",
                "title" : "var isDeletingKeychainIfNeeded: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/ismigratingfromobjcsdk",
                "title" : "var isMigratingFromObjcSDK: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/isrequiringcustomobjectids",
                "title" : "var isRequiringCustomObjectIds: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/isusingautomaticlogin",
                "title" : "var isUsingAutomaticLogin: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/isusingdataprotectionkeychain",
                "title" : "var isUsingDataProtectionKeychain: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/isusingequalqueryconstraint",
                "title" : "var isUsingEqualQueryConstraint: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/isusingpostforquery",
                "title" : "var isUsingPostForQuery: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/isusingtransactions",
                "title" : "var isUsingTransactions: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/livequeryconnectionadditionalproperties",
                "title" : "var liveQueryConnectionAdditionalProperties: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/livequerymaxconnectionattempts",
                "title" : "var liveQueryMaxConnectionAttempts: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/livequerysserverurl",
                "title" : "var liveQuerysServerURL: URL?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/maintenancekey",
                "title" : "var maintenanceKey: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/maxconnectionattempts",
                "title" : "var maxConnectionAttempts: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/parsefiletransfer",
                "title" : "var parseFileTransfer: ParseFileTransferable",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/primarykey",
                "title" : "var primaryKey: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/primitivestore",
                "title" : "var primitiveStore: ParsePrimitiveStorable",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/requestcachepolicy",
                "title" : "var requestCachePolicy: URLRequest.CachePolicy",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/serverurl",
                "title" : "var serverURL: URL",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseconfiguration",
            "title" : "ParseConfiguration",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseencoder\/encode(_:acl:skipkeys:)",
                "title" : "func encode<T>(T, acl: ParseACL?, skipKeys: SkipKeys) throws -> Data",
                "type" : "method"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseencoder\/skipkeys\/cloud",
                    "title" : "case cloud",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseencoder\/skipkeys\/custom(_:)",
                    "title" : "case custom(Set<String>)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseencoder\/skipkeys\/customobjectid",
                    "title" : "case customObjectId",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseencoder\/skipkeys\/none",
                    "title" : "case none",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseencoder\/skipkeys\/object",
                    "title" : "case object",
                    "type" : "case"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseencoder\/skipkeys",
                "title" : "ParseEncoder.SkipKeys",
                "type" : "enum"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseencoder",
            "title" : "ParseEncoder",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseerror\/init(code:message:)",
                "title" : "init(code: Code, message: String)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseerror\/init(code:message:swift:)",
                "title" : "init(code: Code, message: String, swift: Swift.Error)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseerror\/init(othercode:message:)",
                "title" : "init(otherCode: Int, message: String)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseerror\/code-swift.property",
                "title" : "let code: Code",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseerror\/message",
                "title" : "let message: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseerror\/othercode",
                "title" : "let otherCode: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseerror\/swift",
                "title" : "let swift: Swift.Error?",
                "type" : "property"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/accountalreadylinked",
                    "title" : "case accountAlreadyLinked",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/aggregateerror",
                    "title" : "case aggregateError",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/cachemiss",
                    "title" : "case cacheMiss",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/changedimmutablefielderror",
                    "title" : "case changedImmutableFieldError",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/clientdisconnected",
                    "title" : "case clientDisconnected",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/commandunavailable",
                    "title" : "case commandUnavailable",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/connectionfailed",
                    "title" : "case connectionFailed",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/duplicaterequest",
                    "title" : "case duplicateRequest",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/duplicatevalue",
                    "title" : "case duplicateValue",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/exceededquota",
                    "title" : "case exceededQuota",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/filedeletefailure",
                    "title" : "case fileDeleteFailure",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/filedeleteunnamedfailure",
                    "title" : "case fileDeleteUnnamedFailure",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/filereaderror",
                    "title" : "case fileReadError",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/filesavefailure",
                    "title" : "case fileSaveFailure",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/filetoolarge",
                    "title" : "case fileTooLarge",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/hostingerror",
                    "title" : "case hostingError",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/incorrecttype",
                    "title" : "case incorrectType",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/inefficientqueryerror",
                    "title" : "case inefficientQueryError",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/internalserver",
                    "title" : "case internalServer",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidacl",
                    "title" : "case invalidACL",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidauthdataerror",
                    "title" : "case invalidAuthDataError",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidchannelname",
                    "title" : "case invalidChannelName",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidchannelsarrayerror",
                    "title" : "case invalidChannelsArrayError",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidclassname",
                    "title" : "case invalidClassName",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidcontentlength",
                    "title" : "case invalidContentLength",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invaliddevicetoken",
                    "title" : "case invalidDeviceToken",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invaliddevicetypeerror",
                    "title" : "case invalidDeviceTypeError",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidemailaddress",
                    "title" : "case invalidEmailAddress",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalideventname",
                    "title" : "case invalidEventName",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidexpirationerror",
                    "title" : "case invalidExpirationError",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidfilename",
                    "title" : "case invalidFileName",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidimagedata",
                    "title" : "case invalidImageData",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidinstallationiderror",
                    "title" : "case invalidInstallationIdError",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidjson",
                    "title" : "case invalidJSON",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidkeyname",
                    "title" : "case invalidKeyName",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidlimiterror",
                    "title" : "case invalidLimitError",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidlinkedsession",
                    "title" : "case invalidLinkedSession",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidnestedkey",
                    "title" : "case invalidNestedKey",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidpointer",
                    "title" : "case invalidPointer",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidpushtime",
                    "title" : "case invalidPushTime",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidquery",
                    "title" : "case invalidQuery",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidrolename",
                    "title" : "case invalidRoleName",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidschemaoperation",
                    "title" : "case invalidSchemaOperation",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidsessiontoken",
                    "title" : "case invalidSessionToken",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidskiperror",
                    "title" : "case invalidSkipError",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidsubscriptiontype",
                    "title" : "case invalidSubscriptionType",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidvalue",
                    "title" : "case invalidValue",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/linkedidmissing",
                    "title" : "case linkedIdMissing",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/mfaerror",
                    "title" : "case mfaError",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/mfatokenrequired",
                    "title" : "case mfaTokenRequired",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/missingcontentlength",
                    "title" : "case missingContentLength",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/missingcontenttype",
                    "title" : "case missingContentType",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/missingobjectid",
                    "title" : "case missingObjectId",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/missingrequiredfielderror",
                    "title" : "case missingRequiredFieldError",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/objectnotfound",
                    "title" : "case objectNotFound",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/objecttoolarge",
                    "title" : "case objectTooLarge",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/operationforbidden",
                    "title" : "case operationForbidden",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/other",
                    "title" : "case other",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/othercause",
                    "title" : "case otherCause",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/pushmisconfigured",
                    "title" : "case pushMisconfigured",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/requestlimitexceeded",
                    "title" : "case requestLimitExceeded",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/scriptfailed",
                    "title" : "case scriptFailed",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/serviceunavailable",
                    "title" : "case serviceUnavailable",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/timeout",
                    "title" : "case timeout",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/unsavedfilefailure",
                    "title" : "case unsavedFileFailure",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/unsupportedservice",
                    "title" : "case unsupportedService",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/usercanonlybecreatedthroughsignup",
                    "title" : "case userCanOnlyBeCreatedThroughSignUp",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/usercannotbealteredwithoutsession",
                    "title" : "case userCannotBeAlteredWithoutSession",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/useremailmissing",
                    "title" : "case userEmailMissing",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/useremailtaken",
                    "title" : "case userEmailTaken",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/userpasswordmissing",
                    "title" : "case userPasswordMissing",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/userwithemailnotfound",
                    "title" : "case userWithEmailNotFound",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/usernamemissing",
                    "title" : "case usernameMissing",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/usernametaken",
                    "title" : "case usernameTaken",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/validationfailed",
                    "title" : "case validationFailed",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/webhookerror",
                    "title" : "case webhookError",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/xdomainrequest",
                    "title" : "case xDomainRequest",
                    "type" : "case"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/init(rawvalue:)",
                    "title" : "init?(rawValue: Int)",
                    "type" : "init"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/localizeddescription",
                        "title" : "var localizedDescription: String",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/containedin(_:)-4z7ws",
                        "title" : "func containedIn(ParseError.Code...) -> ParseError?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/containedin(_:)-5rs0d",
                        "title" : "func containedIn(ParseError.Code...) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/containedin(_:)-6j9cy",
                        "title" : "func containedIn([ParseError.Code]) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/containedin(_:)-749cm",
                        "title" : "func containedIn([ParseError.Code]) -> ParseError?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/equalsto(_:)-43i1q",
                        "title" : "func equalsTo(ParseError.Code) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/equalsto(_:)-5x7gp",
                        "title" : "func equalsTo(ParseError.Code) -> ParseError?",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/error-implementations",
                    "title" : "Error Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/init(from:)",
                        "title" : "init(from: any Decoder) throws",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/hashvalue",
                        "title" : "var hashValue: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/encode(to:)",
                        "title" : "func encode(to: any Encoder) throws",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/rawrepresentable-implementations",
                    "title" : "RawRepresentable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum",
                "title" : "ParseError.Code",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseerror\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseerror\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseerror\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseerror\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/==(_:_:)",
                    "title" : "static func == (`Self`, `Self`) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseerror\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/localizeddescription",
                    "title" : "var localizedDescription: String",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/containedin(_:)-18mqc",
                    "title" : "func containedIn(ParseError.Code...) -> ParseError?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/containedin(_:)-5oudf",
                    "title" : "func containedIn([ParseError.Code]) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/containedin(_:)-6itoq",
                    "title" : "func containedIn([ParseError.Code]) -> ParseError?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/containedin(_:)-95ktw",
                    "title" : "func containedIn(ParseError.Code...) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/equalsto(_:)-786kn",
                    "title" : "func equalsTo(ParseError.Code) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/equalsto(_:)-9xnax",
                    "title" : "func equalsTo(ParseError.Code) -> ParseError?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseerror\/error-implementations",
                "title" : "Error Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseerror\/hashable-implementations",
                "title" : "Hashable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/errordescription",
                    "title" : "var errorDescription: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/failurereason",
                    "title" : "var failureReason: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/helpanchor",
                    "title" : "var helpAnchor: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/recoverysuggestion",
                    "title" : "var recoverySuggestion: String?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseerror\/localizederror-implementations",
                "title" : "LocalizedError Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseerror",
            "title" : "ParseError",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefacebook\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefacebook\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefacebook\/link(userid:accesstoken:expiresin:options:)",
                "title" : "func link(userId: String, accessToken: String, expiresIn: Int?, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefacebook\/link(userid:accesstoken:expiresin:options:callbackqueue:completion:)",
                "title" : "func link(userId: String, accessToken: String, expiresIn: Int?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefacebook\/link(userid:authenticationtoken:expiresin:options:)",
                "title" : "func link(userId: String, authenticationToken: String, expiresIn: Int?, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefacebook\/link(userid:authenticationtoken:expiresin:options:callbackqueue:completion:)",
                "title" : "func link(userId: String, authenticationToken: String, expiresIn: Int?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefacebook\/linkpublisher(userid:accesstoken:expiresin:options:)",
                "title" : "func linkPublisher(userId: String, accessToken: String, expiresIn: Int?, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefacebook\/linkpublisher(userid:authenticationtoken:expiresin:options:)",
                "title" : "func linkPublisher(userId: String, authenticationToken: String, expiresIn: Int?, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefacebook\/login(authdata:options:)",
                "title" : "func login(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefacebook\/login(userid:accesstoken:expiresin:options:)",
                "title" : "func login(userId: String, accessToken: String, expiresIn: Int?, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefacebook\/login(userid:accesstoken:expiresin:options:callbackqueue:completion:)",
                "title" : "func login(userId: String, accessToken: String, expiresIn: Int?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefacebook\/login(userid:authenticationtoken:expiresin:options:)",
                "title" : "func login(userId: String, authenticationToken: String, expiresIn: Int?, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefacebook\/login(userid:authenticationtoken:expiresin:options:callbackqueue:completion:)",
                "title" : "func login(userId: String, authenticationToken: String, expiresIn: Int?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefacebook\/loginpublisher(userid:accesstoken:expiresin:options:)",
                "title" : "func loginPublisher(userId: String, accessToken: String, expiresIn: Int?, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefacebook\/loginpublisher(userid:authenticationtoken:expiresin:options:)",
                "title" : "func loginPublisher(userId: String, authenticationToken: String, expiresIn: Int?, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefacebook\/islinked()",
                    "title" : "func isLinked() async -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefacebook\/link(authdata:options:)",
                    "title" : "func link(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefacebook\/link(authdata:options:callbackqueue:completion:)",
                    "title" : "func link(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefacebook\/linkpublisher(authdata:options:)",
                    "title" : "func linkPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefacebook\/login(authdata:options:callbackqueue:completion:)",
                    "title" : "func login(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefacebook\/loginpublisher(authdata:options:)",
                    "title" : "func loginPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefacebook\/strip()",
                    "title" : "func strip() async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefacebook\/strip(_:)",
                    "title" : "func strip(AuthenticatedUser) -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefacebook\/unlink(_:options:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefacebook\/unlink(_:options:callbackqueue:completion:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefacebook\/unlink(options:)",
                    "title" : "func unlink(options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefacebook\/unlink(options:callbackqueue:completion:)",
                    "title" : "func unlink(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefacebook\/unlinkpublisher(_:options:)",
                    "title" : "func unlinkPublisher(AuthenticatedUser, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefacebook\/unlinkpublisher(options:)",
                    "title" : "func unlinkPublisher(options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefacebook\/islinked(with:)",
                    "title" : "static func isLinked(with: AuthenticatedUser) -> Bool",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsefacebook\/parseauthentication-implementations",
                "title" : "ParseAuthentication Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsefacebook",
            "title" : "ParseFacebook",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefield\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/acl",
                    "title" : "case acl",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/array",
                    "title" : "case array",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/boolean",
                    "title" : "case boolean",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/bytes",
                    "title" : "case bytes",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/date",
                    "title" : "case date",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/file",
                    "title" : "case file",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/geopoint",
                    "title" : "case geoPoint",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/number",
                    "title" : "case number",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/object",
                    "title" : "case object",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/pointer",
                    "title" : "case pointer",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/polygon",
                    "title" : "case polygon",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/relation",
                    "title" : "case relation",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/string",
                    "title" : "case string",
                    "type" : "case"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/init(rawvalue:)",
                    "title" : "init?(rawValue: String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/init(from:)",
                        "title" : "init(from: any Decoder) throws",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/hashvalue",
                        "title" : "var hashValue: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/encode(to:)",
                        "title" : "func encode(to: any Encoder) throws",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/rawrepresentable-implementations",
                    "title" : "RawRepresentable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsefield\/fieldtype",
                "title" : "ParseField.FieldType",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsefield\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsefield\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsefield\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsefield",
            "title" : "ParseField",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefieldoptions\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefieldoptions\/init(required:defaulevalue:)-3ggr5",
                "title" : "init(required: Bool, defauleValue: V?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefieldoptions\/init(required:defaulevalue:)-96ibo",
                "title" : "init(required: Bool, defauleValue: V?) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefieldoptions\/debugdescription",
                "title" : "var debugDescription: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefieldoptions\/defaultvalue",
                "title" : "var defaultValue: V?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefieldoptions\/description",
                "title" : "var description: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefieldoptions\/required",
                "title" : "var required: Bool",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsefieldoptions",
            "title" : "ParseFieldOptions",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/init(name:cloudurl:metadata:tags:options:)",
                "title" : "init(name: String, cloudURL: URL, metadata: [String : String]?, tags: [String : String]?, options: API.Options)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/init(name:data:mimetype:metadata:tags:options:)",
                "title" : "init(name: String, data: Data, mimeType: String?, metadata: [String : String]?, tags: [String : String]?, options: API.Options)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/init(name:localurl:metadata:tags:options:)",
                "title" : "init(name: String, localURL: URL, metadata: [String : String]?, tags: [String : String]?, options: API.Options)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/cloudurl",
                "title" : "var cloudURL: URL?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/data",
                "title" : "var data: Data?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/localurl",
                "title" : "var localURL: URL?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/metadata",
                "title" : "var metadata: [String : String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/mimetype",
                "title" : "var mimeType: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/name",
                "title" : "var name: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/options",
                "title" : "var options: API.Options",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/tags",
                "title" : "var tags: [String : String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/url",
                "title" : "var url: URL?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/delete(options:callbackqueue:completion:)",
                "title" : "func delete(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/deletepublisher(options:)",
                "title" : "func deletePublisher(options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/fetch(options:)",
                "title" : "func fetch(options: API.Options) async throws -> ParseFile",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/fetch(options:callbackqueue:progress:completion:)",
                "title" : "func fetch(options: API.Options, callbackQueue: DispatchQueue, progress: ((URLSessionDownloadTask, Int64, Int64, Int64) -> Void)?, completion: (Result<`Self`, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/fetch(options:progress:)",
                "title" : "func fetch(options: API.Options, progress: ((URLSessionDownloadTask, Int64, Int64, Int64) -> Void)) async throws -> ParseFile",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/fetchpublisher(options:)",
                "title" : "func fetchPublisher(options: API.Options) -> Future<`Self`, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/fetchpublisher(options:progress:)",
                "title" : "func fetchPublisher(options: API.Options, progress: ((URLSessionDownloadTask, Int64, Int64, Int64) -> Void)) -> Future<`Self`, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/issaved()",
                "title" : "func isSaved() async throws -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/save(options:callbackqueue:progress:completion:)",
                "title" : "func save(options: API.Options, callbackQueue: DispatchQueue, progress: ((URLSessionTask, Int64, Int64, Int64) -> Void)?, completion: (Result<`Self`, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/save(options:progress:)",
                "title" : "func save(options: API.Options, progress: ((URLSessionTask, Int64, Int64, Int64) -> Void)?) async throws -> ParseFile",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/save(options:stream:callbackqueue:progress:completion:)",
                "title" : "func save(options: API.Options, stream: InputStream, callbackQueue: DispatchQueue, progress: ((URLSessionTask, Int64, Int64, Int64) -> Void)?, completion: (ParseError?) -> Void) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/savepublisher(options:)",
                "title" : "func savePublisher(options: API.Options) -> Future<`Self`, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/savepublisher(options:progress:)",
                "title" : "func savePublisher(options: API.Options, progress: ((URLSessionTask, Int64, Int64, Int64) -> Void)?) -> Future<`Self`, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefile\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsefile\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefile\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsefile\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefile\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsefile\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefile\/delete()",
                    "title" : "func delete() async throws -> DeletingType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefile\/delete(options:)",
                    "title" : "func delete(options: API.Options) async throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsefile\/deletable-implementations",
                "title" : "Deletable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefile\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsefile\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefile\/id",
                    "title" : "var id: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsefile\/identifiable-implementations",
                "title" : "Identifiable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefile\/save()",
                    "title" : "func save() async throws -> SavingType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefile\/save(options:)",
                    "title" : "func save(options: API.Options) async throws -> ParseFile",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsefile\/savable-implementations",
                "title" : "Savable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsefile",
            "title" : "ParseFile",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefilemanager\/init()",
                "title" : "init?()",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefilemanager\/defaultdatadirectorypath",
                "title" : "var defaultDataDirectoryPath: URL?",
                "type" : "property"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefilemanager\/downloaddirectory()",
                "title" : "static func downloadDirectory() throws -> URL",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefilemanager\/fileexists(_:)-3nh5r",
                "title" : "static func fileExists(String) throws -> URL",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefilemanager\/fileexists(_:)-4h3hl",
                "title" : "static func fileExists(ParseFile) throws -> URL",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsefilemanager",
            "title" : "ParseFileManager",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegeopoint\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegeopoint\/init(coordinate:)",
                "title" : "init(coordinate: CLLocationCoordinate2D) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegeopoint\/init(latitude:longitude:)",
                "title" : "init(latitude: Double, longitude: Double) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegeopoint\/init(location:)",
                "title" : "init(location: CLLocation) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegeopoint\/latitude",
                "title" : "var latitude: Double",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegeopoint\/longitude",
                "title" : "var longitude: Double",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegeopoint\/tocllocation",
                "title" : "var toCLLocation: CLLocation",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegeopoint\/tocllocationcoordinate2d",
                "title" : "var toCLLocationCoordinate2D: CLLocationCoordinate2D",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegeopoint\/distanceinkilometers(_:)",
                "title" : "func distanceInKilometers(ParseGeoPoint) -> Double",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegeopoint\/distanceinmiles(_:)",
                "title" : "func distanceInMiles(ParseGeoPoint) -> Double",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegeopoint\/distanceinradians(_:)",
                "title" : "func distanceInRadians(ParseGeoPoint) -> Double",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegeopoint\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsegeopoint\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegeopoint\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsegeopoint\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegeopoint\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsegeopoint\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegeopoint\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsegeopoint\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegeopoint\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsegeopoint\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsegeopoint",
            "title" : "ParseGeoPoint",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegithub\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegithub\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegithub\/link(id:accesstoken:options:)",
                "title" : "func link(id: String, accessToken: String, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegithub\/link(id:accesstoken:options:callbackqueue:completion:)",
                "title" : "func link(id: String, accessToken: String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegithub\/linkpublisher(id:accesstoken:options:)",
                "title" : "func linkPublisher(id: String, accessToken: String, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegithub\/login(authdata:options:)",
                "title" : "func login(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegithub\/login(id:accesstoken:options:)",
                "title" : "func login(id: String, accessToken: String, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegithub\/login(id:accesstoken:options:callbackqueue:completion:)",
                "title" : "func login(id: String, accessToken: String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegithub\/loginpublisher(id:accesstoken:options:)",
                "title" : "func loginPublisher(id: String, accessToken: String, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegithub\/islinked()",
                    "title" : "func isLinked() async -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegithub\/link(authdata:options:)",
                    "title" : "func link(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegithub\/link(authdata:options:callbackqueue:completion:)",
                    "title" : "func link(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegithub\/linkpublisher(authdata:options:)",
                    "title" : "func linkPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegithub\/login(authdata:options:callbackqueue:completion:)",
                    "title" : "func login(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegithub\/loginpublisher(authdata:options:)",
                    "title" : "func loginPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegithub\/strip()",
                    "title" : "func strip() async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegithub\/strip(_:)",
                    "title" : "func strip(AuthenticatedUser) -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegithub\/unlink(_:options:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegithub\/unlink(_:options:callbackqueue:completion:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegithub\/unlink(options:)",
                    "title" : "func unlink(options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegithub\/unlink(options:callbackqueue:completion:)",
                    "title" : "func unlink(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegithub\/unlinkpublisher(_:options:)",
                    "title" : "func unlinkPublisher(AuthenticatedUser, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegithub\/unlinkpublisher(options:)",
                    "title" : "func unlinkPublisher(options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegithub\/islinked(with:)",
                    "title" : "static func isLinked(with: AuthenticatedUser) -> Bool",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsegithub\/parseauthentication-implementations",
                "title" : "ParseAuthentication Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsegithub",
            "title" : "ParseGitHub",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegoogle\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegoogle\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegoogle\/link(id:idtoken:accesstoken:options:)",
                "title" : "func link(id: String, idToken: String?, accessToken: String?, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegoogle\/link(id:idtoken:accesstoken:options:callbackqueue:completion:)",
                "title" : "func link(id: String, idToken: String?, accessToken: String?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegoogle\/linkpublisher(id:idtoken:accesstoken:options:)",
                "title" : "func linkPublisher(id: String, idToken: String?, accessToken: String?, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegoogle\/login(authdata:options:)",
                "title" : "func login(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegoogle\/login(id:idtoken:accesstoken:options:)",
                "title" : "func login(id: String, idToken: String?, accessToken: String?, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegoogle\/login(id:idtoken:accesstoken:options:callbackqueue:completion:)",
                "title" : "func login(id: String, idToken: String?, accessToken: String?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegoogle\/loginpublisher(id:idtoken:accesstoken:options:)",
                "title" : "func loginPublisher(id: String, idToken: String?, accessToken: String?, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegoogle\/islinked()",
                    "title" : "func isLinked() async -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegoogle\/link(authdata:options:)",
                    "title" : "func link(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegoogle\/link(authdata:options:callbackqueue:completion:)",
                    "title" : "func link(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegoogle\/linkpublisher(authdata:options:)",
                    "title" : "func linkPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegoogle\/login(authdata:options:callbackqueue:completion:)",
                    "title" : "func login(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegoogle\/loginpublisher(authdata:options:)",
                    "title" : "func loginPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegoogle\/strip()",
                    "title" : "func strip() async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegoogle\/strip(_:)",
                    "title" : "func strip(AuthenticatedUser) -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegoogle\/unlink(_:options:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegoogle\/unlink(_:options:callbackqueue:completion:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegoogle\/unlink(options:)",
                    "title" : "func unlink(options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegoogle\/unlink(options:callbackqueue:completion:)",
                    "title" : "func unlink(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegoogle\/unlinkpublisher(_:options:)",
                    "title" : "func unlinkPublisher(AuthenticatedUser, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegoogle\/unlinkpublisher(options:)",
                    "title" : "func unlinkPublisher(options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegoogle\/islinked(with:)",
                    "title" : "static func isLinked(with: AuthenticatedUser) -> Bool",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsegoogle\/parseauthentication-implementations",
                "title" : "ParseAuthentication Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsegoogle",
            "title" : "ParseGoogle",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunction\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunction\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunction\/functionname",
                "title" : "var functionName: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunction\/url",
                "title" : "var url: URL?",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunction\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehookfunction\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunction\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehookfunction\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunction\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehookfunction\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunction\/init(name:url:)",
                    "title" : "init(name: String, url: URL?)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunction\/create(options:)",
                    "title" : "func create(options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunction\/create(options:callbackqueue:completion:)",
                    "title" : "func create(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunction\/createpublisher(options:)",
                    "title" : "func createPublisher(options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunction\/delete(options:)",
                    "title" : "func delete(options: API.Options) async throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunction\/delete(options:callbackqueue:completion:)",
                    "title" : "func delete(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunction\/deletepublisher(options:)",
                    "title" : "func deletePublisher(options: API.Options) -> Future<Void, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunction\/fetch(options:)",
                    "title" : "func fetch(options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunction\/fetch(options:callbackqueue:completion:)",
                    "title" : "func fetch(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunction\/fetchall(options:)",
                    "title" : "func fetchAll(options: API.Options) async throws -> [Self]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunction\/fetchall(options:callbackqueue:completion:)",
                    "title" : "func fetchAll(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[Self], ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunction\/fetchallpublisher(options:)",
                    "title" : "func fetchAllPublisher(options: API.Options) -> Future<[Self], ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunction\/fetchpublisher(options:)",
                    "title" : "func fetchPublisher(options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunction\/update(options:)",
                    "title" : "func update(options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunction\/update(options:callbackqueue:completion:)",
                    "title" : "func update(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunction\/updatepublisher(options:)",
                    "title" : "func updatePublisher(options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehookfunction\/parsehookfunctionable-implementations",
                "title" : "ParseHookFunctionable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsehookfunction",
            "title" : "ParseHookFunction",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/functionname",
                "title" : "var functionName: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/headers",
                "title" : "var headers: [String : String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/installationid",
                "title" : "var installationId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/ipaddress",
                "title" : "var ipAddress: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/parameters",
                "title" : "var parameters: P",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/primarykey",
                "title" : "var primaryKey: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/user",
                "title" : "var user: U?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/getcontext()",
                "title" : "func getContext<V>() throws -> V",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/getlog()",
                "title" : "func getLog<V>() throws -> V",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/userttype",
                "title" : "ParseHookFunctionRequest.UsertType",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/hydrateuser(options:)",
                    "title" : "func hydrateUser(options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/hydrateuser(options:callbackqueue:completion:)",
                    "title" : "func hydrateUser(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/hydrateuserpublisher(options:)",
                    "title" : "func hydrateUserPublisher(options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/options()",
                    "title" : "func options() -> API.Options",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/parsehookrequestable-implementations",
                "title" : "ParseHookRequestable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsehookfunctionrequest",
            "title" : "ParseHookFunctionRequest",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookresponse\/init(error:)",
                "title" : "init(error: ParseError)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookresponse\/init(success:)",
                "title" : "init(success: R)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookresponse\/error",
                "title" : "var error: ParseError?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookresponse\/success",
                "title" : "var success: R?",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehookresponse\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehookresponse\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehookresponse\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehookresponse\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehookresponse\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/localizeddescription",
                    "title" : "var localizedDescription: String",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/containedin(_:)-1ahdr",
                    "title" : "func containedIn(ParseError.Code...) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/containedin(_:)-1zvnk",
                    "title" : "func containedIn([ParseError.Code]) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/containedin(_:)-2ui18",
                    "title" : "func containedIn([ParseError.Code]) -> ParseError?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/containedin(_:)-3necj",
                    "title" : "func containedIn(ParseError.Code...) -> ParseError?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/equalsto(_:)-4kve4",
                    "title" : "func equalsTo(ParseError.Code) -> ParseError?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/equalsto(_:)-6whsf",
                    "title" : "func equalsTo(ParseError.Code) -> Bool",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehookresponse\/error-implementations",
                "title" : "Error Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/errordescription",
                    "title" : "var errorDescription: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/failurereason",
                    "title" : "var failureReason: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/helpanchor",
                    "title" : "var helpAnchor: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/recoverysuggestion",
                    "title" : "var recoverySuggestion: String?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehookresponse\/localizederror-implementations",
                "title" : "LocalizedError Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsehookresponse",
            "title" : "ParseHookResponse",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktrigger\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktrigger\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktrigger\/classname",
                "title" : "var className: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktrigger\/triggername",
                "title" : "var triggerName: ParseHookTriggerType?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktrigger\/url",
                "title" : "var url: URL?",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktrigger\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehooktrigger\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktrigger\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehooktrigger\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktrigger\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehooktrigger\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktrigger\/init(classname:trigger:url:)",
                    "title" : "init(className: String, trigger: ParseHookTriggerType, url: URL)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktrigger\/init(classname:triggername:url:)",
                    "title" : "init(className: String, triggerName: ParseHookTriggerType, url: URL)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktrigger\/init(object:trigger:url:)-2xkgb",
                    "title" : "init<T>(object: T.Type, trigger: ParseHookTriggerType, url: URL)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktrigger\/init(object:trigger:url:)-37mpt",
                    "title" : "init(object: ParseHookTriggerObject, trigger: ParseHookTriggerType, url: URL) throws",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktrigger\/init(object:trigger:url:)-4voqc",
                    "title" : "init<T>(object: T, trigger: ParseHookTriggerType, url: URL)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktrigger\/init(object:triggername:url:)",
                    "title" : "init<T>(object: T, triggerName: ParseHookTriggerType, url: URL)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktrigger\/init(trigger:url:)",
                    "title" : "init(trigger: ParseHookTriggerType, url: URL) throws",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktrigger\/init(triggername:url:)",
                    "title" : "init(triggerName: ParseHookTriggerType, url: URL) throws",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktrigger\/create(options:)",
                    "title" : "func create(options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktrigger\/create(options:callbackqueue:completion:)",
                    "title" : "func create(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktrigger\/createpublisher(options:)",
                    "title" : "func createPublisher(options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktrigger\/delete(options:)",
                    "title" : "func delete(options: API.Options) async throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktrigger\/delete(options:callbackqueue:completion:)",
                    "title" : "func delete(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktrigger\/deletepublisher(options:)",
                    "title" : "func deletePublisher(options: API.Options) -> Future<Void, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktrigger\/fetch(options:)",
                    "title" : "func fetch(options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktrigger\/fetch(options:callbackqueue:completion:)",
                    "title" : "func fetch(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktrigger\/fetchall(options:)",
                    "title" : "func fetchAll(options: API.Options) async throws -> [Self]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktrigger\/fetchall(options:callbackqueue:completion:)",
                    "title" : "func fetchAll(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[Self], ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktrigger\/fetchallpublisher(options:)",
                    "title" : "func fetchAllPublisher(options: API.Options) -> Future<[Self], ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktrigger\/fetchpublisher(options:)",
                    "title" : "func fetchPublisher(options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktrigger\/update(options:)",
                    "title" : "func update(options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktrigger\/update(options:callbackqueue:completion:)",
                    "title" : "func update(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktrigger\/updatepublisher(options:)",
                    "title" : "func updatePublisher(options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehooktrigger\/parsehooktriggerable-implementations",
                "title" : "ParseHookTriggerable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsehooktrigger",
            "title" : "ParseHookTrigger",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/clients",
                "title" : "var clients: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/event",
                "title" : "var event: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/headers",
                "title" : "var headers: [String : String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/installationid",
                "title" : "var installationId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/ipaddress",
                "title" : "var ipAddress: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/isget",
                "title" : "var isGet: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/object",
                "title" : "var object: T?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/objects",
                "title" : "var objects: [T]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/original",
                "title" : "var original: T?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/primarykey",
                "title" : "var primaryKey: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/query",
                "title" : "var query: Query<T>?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/sendevent",
                "title" : "var sendEvent: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/subscriptions",
                "title" : "var subscriptions: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/trigger",
                "title" : "var trigger: ParseHookTriggerType?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/triggername",
                "title" : "var triggerName: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/user",
                "title" : "var user: U?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/getcontext()",
                "title" : "func getContext<V>() throws -> V",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/getlog()",
                "title" : "func getLog<V>() throws -> V",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/usertype",
                "title" : "ParseHookTriggerObjectRequest.UserType",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/hydrateuser(options:)",
                    "title" : "func hydrateUser(options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/hydrateuser(options:callbackqueue:completion:)",
                    "title" : "func hydrateUser(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/hydrateuserpublisher(options:)",
                    "title" : "func hydrateUserPublisher(options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/options()",
                    "title" : "func options() -> API.Options",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/parsehookrequestable-implementations",
                "title" : "ParseHookRequestable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest",
            "title" : "ParseHookTriggerObjectRequest",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/clients",
                "title" : "var clients: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/file",
                "title" : "var file: ParseFile?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/filesize",
                "title" : "var fileSize: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/headers",
                "title" : "var headers: [String : String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/installationid",
                "title" : "var installationId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/ipaddress",
                "title" : "var ipAddress: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/primarykey",
                "title" : "var primaryKey: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/trigger",
                "title" : "var trigger: ParseHookTriggerType?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/triggername",
                "title" : "var triggerName: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/user",
                "title" : "var user: U?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/getcontext()",
                "title" : "func getContext<V>() throws -> V",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/getlog()",
                "title" : "func getLog<V>() throws -> V",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/usertype",
                "title" : "ParseHookTriggerRequest.UserType",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/hydrateuser(options:)",
                    "title" : "func hydrateUser(options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/hydrateuser(options:callbackqueue:completion:)",
                    "title" : "func hydrateUser(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/hydrateuserpublisher(options:)",
                    "title" : "func hydrateUserPublisher(options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/options()",
                    "title" : "func options() -> API.Options",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/parsehookrequestable-implementations",
                "title" : "ParseHookRequestable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsehooktriggerrequest",
            "title" : "ParseHookTriggerRequest",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstagram\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstagram\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstagram\/link(id:accesstoken:apiurl:options:)",
                "title" : "func link(id: String, accessToken: String, apiURL: String, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstagram\/link(id:accesstoken:apiurl:options:callbackqueue:completion:)",
                "title" : "func link(id: String, accessToken: String, apiURL: String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstagram\/linkpublisher(id:accesstoken:apiurl:options:)",
                "title" : "func linkPublisher(id: String, accessToken: String, apiURL: String, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstagram\/login(authdata:options:)",
                "title" : "func login(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstagram\/login(id:accesstoken:apiurl:options:)",
                "title" : "func login(id: String, accessToken: String, apiURL: String, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstagram\/login(id:accesstoken:apiurl:options:callbackqueue:completion:)",
                "title" : "func login(id: String, accessToken: String, apiURL: String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstagram\/loginpublisher(id:accesstoken:apiurl:options:)",
                "title" : "func loginPublisher(id: String, accessToken: String, apiURL: String, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstagram\/graphapibaseurl",
                "title" : "static var graphAPIBaseURL: String",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstagram\/islinked()",
                    "title" : "func isLinked() async -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstagram\/link(authdata:options:)",
                    "title" : "func link(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstagram\/link(authdata:options:callbackqueue:completion:)",
                    "title" : "func link(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstagram\/linkpublisher(authdata:options:)",
                    "title" : "func linkPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstagram\/login(authdata:options:callbackqueue:completion:)",
                    "title" : "func login(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstagram\/loginpublisher(authdata:options:)",
                    "title" : "func loginPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstagram\/strip()",
                    "title" : "func strip() async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstagram\/strip(_:)",
                    "title" : "func strip(AuthenticatedUser) -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstagram\/unlink(_:options:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstagram\/unlink(_:options:callbackqueue:completion:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstagram\/unlink(options:)",
                    "title" : "func unlink(options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstagram\/unlink(options:callbackqueue:completion:)",
                    "title" : "func unlink(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstagram\/unlinkpublisher(_:options:)",
                    "title" : "func unlinkPublisher(AuthenticatedUser, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstagram\/unlinkpublisher(options:)",
                    "title" : "func unlinkPublisher(options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstagram\/islinked(with:)",
                    "title" : "static func isLinked(with: AuthenticatedUser) -> Bool",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseinstagram\/parseauthentication-implementations",
                "title" : "ParseAuthentication Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseinstagram",
            "title" : "ParseInstagram",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseldap\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseldap\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseldap\/link(id:password:options:)",
                "title" : "func link(id: String, password: String, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseldap\/link(id:password:options:callbackqueue:completion:)",
                "title" : "func link(id: String, password: String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseldap\/linkpublisher(id:password:options:)",
                "title" : "func linkPublisher(id: String, password: String, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseldap\/login(authdata:options:)",
                "title" : "func login(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseldap\/login(id:password:options:)",
                "title" : "func login(id: String, password: String, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseldap\/login(id:password:options:callbackqueue:completion:)",
                "title" : "func login(id: String, password: String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseldap\/loginpublisher(id:password:options:)",
                "title" : "func loginPublisher(id: String, password: String, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseldap\/islinked()",
                    "title" : "func isLinked() async -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseldap\/link(authdata:options:)",
                    "title" : "func link(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseldap\/link(authdata:options:callbackqueue:completion:)",
                    "title" : "func link(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseldap\/linkpublisher(authdata:options:)",
                    "title" : "func linkPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseldap\/login(authdata:options:callbackqueue:completion:)",
                    "title" : "func login(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseldap\/loginpublisher(authdata:options:)",
                    "title" : "func loginPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseldap\/strip()",
                    "title" : "func strip() async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseldap\/strip(_:)",
                    "title" : "func strip(AuthenticatedUser) -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseldap\/unlink(_:options:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseldap\/unlink(_:options:callbackqueue:completion:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseldap\/unlink(options:)",
                    "title" : "func unlink(options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseldap\/unlink(options:callbackqueue:completion:)",
                    "title" : "func unlink(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseldap\/unlinkpublisher(_:options:)",
                    "title" : "func unlinkPublisher(AuthenticatedUser, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseldap\/unlinkpublisher(options:)",
                    "title" : "func unlinkPublisher(options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseldap\/islinked(with:)",
                    "title" : "static func isLinked(with: AuthenticatedUser) -> Bool",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseldap\/parseauthentication-implementations",
                "title" : "ParseAuthentication Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseldap",
            "title" : "ParseLDAP",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parselinkedin\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parselinkedin\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parselinkedin\/link(id:accesstoken:ismobilesdk:options:)",
                "title" : "func link(id: String, accessToken: String, isMobileSDK: Bool, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselinkedin\/link(id:accesstoken:ismobilesdk:options:callbackqueue:completion:)",
                "title" : "func link(id: String, accessToken: String, isMobileSDK: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselinkedin\/linkpublisher(id:accesstoken:ismobilesdk:options:)",
                "title" : "func linkPublisher(id: String, accessToken: String, isMobileSDK: Bool, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselinkedin\/login(authdata:options:)",
                "title" : "func login(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselinkedin\/login(id:accesstoken:ismobilesdk:options:)",
                "title" : "func login(id: String, accessToken: String, isMobileSDK: Bool, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselinkedin\/login(id:accesstoken:ismobilesdk:options:callbackqueue:completion:)",
                "title" : "func login(id: String, accessToken: String, isMobileSDK: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselinkedin\/loginpublisher(id:accesstoken:ismobilesdk:options:)",
                "title" : "func loginPublisher(id: String, accessToken: String, isMobileSDK: Bool, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselinkedin\/islinked()",
                    "title" : "func isLinked() async -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselinkedin\/link(authdata:options:)",
                    "title" : "func link(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselinkedin\/link(authdata:options:callbackqueue:completion:)",
                    "title" : "func link(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselinkedin\/linkpublisher(authdata:options:)",
                    "title" : "func linkPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselinkedin\/login(authdata:options:callbackqueue:completion:)",
                    "title" : "func login(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselinkedin\/loginpublisher(authdata:options:)",
                    "title" : "func loginPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselinkedin\/strip()",
                    "title" : "func strip() async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselinkedin\/strip(_:)",
                    "title" : "func strip(AuthenticatedUser) -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselinkedin\/unlink(_:options:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselinkedin\/unlink(_:options:callbackqueue:completion:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselinkedin\/unlink(options:)",
                    "title" : "func unlink(options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselinkedin\/unlink(options:callbackqueue:completion:)",
                    "title" : "func unlink(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselinkedin\/unlinkpublisher(_:options:)",
                    "title" : "func unlinkPublisher(AuthenticatedUser, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselinkedin\/unlinkpublisher(options:)",
                    "title" : "func unlinkPublisher(options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselinkedin\/islinked(with:)",
                    "title" : "static func isLinked(with: AuthenticatedUser) -> Bool",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parselinkedin\/parseauthentication-implementations",
                "title" : "ParseAuthentication Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parselinkedin",
            "title" : "ParseLinkedIn",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/init(target:)",
                "title" : "init(target: T)",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/add(_:objects:)-16zkg",
                "title" : "func add<W>(String, objects: [W]) -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/add(_:objects:)-4or5w",
                "title" : "func add<V>((String, WritableKeyPath<T, [V]?>), objects: [V]) -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/addrelation(_:objects:)-47ckx",
                "title" : "func addRelation<W>(String, objects: [W]) throws -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/addrelation(_:objects:)-gw2h",
                "title" : "func addRelation<V>((String, WritableKeyPath<T, [V]?>), objects: [V]) throws -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/addunique(_:objects:)-3v3y",
                "title" : "func addUnique<W>(String, objects: [W]) -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/addunique(_:objects:)-9mi29",
                "title" : "func addUnique<V>((String, WritableKeyPath<T, [V]?>), objects: [V]) -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/batch(_:operations:)",
                "title" : "func batch(String, operations: ParseOperationBatch) -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/encode(to:)",
                "title" : "func encode(to: Encoder) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/forceset(_:to:)",
                "title" : "func forceSet<W>((String, WritableKeyPath<T, W?>), to: W?) -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/forceset(_:value:)",
                "title" : "func forceSet<W>((String, WritableKeyPath<T, W?>), value: W?) -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/increment(_:by:)-19wfq",
                "title" : "func increment(String, by: Double) -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/increment(_:by:)-2jfll",
                "title" : "func increment(String, by: Int) -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/issaved()",
                "title" : "func isSaved() async throws -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/remove(_:objects:)-290yc",
                "title" : "func remove<W>(String, objects: [W]) -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/remove(_:objects:)-9b7ai",
                "title" : "func remove<V>((String, WritableKeyPath<T, [V]?>), objects: [V]) -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/removerelation(_:objects:)-1wbm6",
                "title" : "func removeRelation<W>(String, objects: [W]) throws -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/removerelation(_:objects:)-3ty5e",
                "title" : "func removeRelation<V>((String, WritableKeyPath<T, [V]?>), objects: [V]) throws -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/save(options:callbackqueue:completion:)",
                "title" : "func save(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<T, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/savepublisher(options:)",
                "title" : "func savePublisher(options: API.Options) -> Future<T, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/set(_:to:)-6e7l2",
                "title" : "func set<W>(WritableKeyPath<T, W?>, to: W) throws -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/set(_:to:)-88uvh",
                "title" : "func set<W>((String, WritableKeyPath<T, W?>), to: W?) -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/unset(_:)-1atuj",
                "title" : "func unset<V>((String, WritableKeyPath<T, V?>)) -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/unset(_:)-7dqb3",
                "title" : "func unset(String) -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperation\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperation\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperation\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperation\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperation\/save()",
                    "title" : "func save() async throws -> SavingType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperation\/save(options:)",
                    "title" : "func save(options: API.Options) async throws -> T",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperation\/savable-implementations",
                "title" : "Savable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseoperation",
            "title" : "ParseOperation",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationadd\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationadd\/init(objects:)",
                "title" : "init(objects: [T])",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationadd\/objects",
                "title" : "var objects: [T]",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationadd\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationadd\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationadd\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationadd\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseoperationadd",
            "title" : "ParseOperationAdd",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationaddrelation\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationaddrelation\/init(objects:)",
                "title" : "init(objects: [T]) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationaddrelation\/objects",
                "title" : "var objects: [Pointer<T>]",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationaddrelation\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationaddrelation\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationaddrelation\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationaddrelation\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseoperationaddrelation",
            "title" : "ParseOperationAddRelation",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationaddunique\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationaddunique\/init(objects:)",
                "title" : "init(objects: [T])",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationaddunique\/objects",
                "title" : "var objects: Set<T>",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationaddunique\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationaddunique\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationaddunique\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationaddunique\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseoperationaddunique",
            "title" : "ParseOperationAddUnique",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationbatch\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationbatch\/init(operations:)",
                "title" : "init<T>(operations: [T])",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationbatch\/appendoperations(operations:)",
                "title" : "func appendOperations<T>(operations: [T]) -> ParseOperationBatch",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationbatch\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationbatch\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationbatch\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationbatch\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseoperationbatch",
            "title" : "ParseOperationBatch",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationdelete\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationdelete\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationdelete\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationdelete\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationdelete\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationdelete\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseoperationdelete",
            "title" : "ParseOperationDelete",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationincrement\/init(amount:)",
                "title" : "init(amount: Int)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationincrement\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationincrement\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationincrement\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationincrement\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationincrement\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseoperationincrement",
            "title" : "ParseOperationIncrement",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationincrementdouble\/init(amount:)",
                "title" : "init(amount: Double)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationincrementdouble\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationincrementdouble\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationincrementdouble\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationincrementdouble\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationincrementdouble\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseoperationincrementdouble",
            "title" : "ParseOperationIncrementDouble",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationremove\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationremove\/init(objects:)",
                "title" : "init(objects: [T])",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationremove\/objects",
                "title" : "let objects: [T]",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationremove\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationremove\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationremove\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationremove\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseoperationremove",
            "title" : "ParseOperationRemove",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationremoverelation\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationremoverelation\/objects",
                "title" : "var objects: [Pointer<T>]",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationremoverelation\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationremoverelation\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationremoverelation\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationremoverelation\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseoperationremoverelation",
            "title" : "ParseOperationRemoveRelation",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepolygon\/init(_:)-61vkc",
                "title" : "init([ParseGeoPoint]) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepolygon\/init(_:)-8n95l",
                "title" : "init(ParseGeoPoint...) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepolygon\/coordinates",
                "title" : "let coordinates: [ParseGeoPoint]",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepolygon\/containspoint(_:)",
                "title" : "func containsPoint(ParseGeoPoint) -> Bool",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepolygon\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepolygon\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepolygon\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepolygon\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepolygon\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepolygon\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepolygon\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepolygon\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepolygon\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepolygon\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsepolygon",
            "title" : "ParsePolygon",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/init(payload:pushtime:expirationdate:)",
                "title" : "init(payload: V, pushTime: Date?, expirationDate: Date?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/init(payload:pushtime:expirationinterval:)",
                "title" : "init(payload: V, pushTime: Date?, expirationInterval: Int?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/init(payload:query:pushtime:expirationdate:)",
                "title" : "init<U>(payload: V, query: Query<U>, pushTime: Date?, expirationDate: Date?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/init(payload:query:pushtime:expirationinterval:)",
                "title" : "init<U>(payload: V, query: Query<U>, pushTime: Date?, expirationInterval: Int?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/channels",
                "title" : "var channels: Set<String>?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/expirationinterval",
                "title" : "var expirationInterval: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/payload",
                "title" : "var payload: V?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/pushtime",
                "title" : "var pushTime: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/where",
                "title" : "var `where`: QueryWhere?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/fetchstatus(_:options:)",
                "title" : "func fetchStatus(String, options: API.Options) async throws -> ParsePushStatus<V>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/fetchstatus(_:options:callbackqueue:completion:)",
                "title" : "func fetchStatus(String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<ParsePushStatus<V>, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/fetchstatuspublisher(_:options:)",
                "title" : "func fetchStatusPublisher(String, options: API.Options) -> Future<ParsePushStatus<V>, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/send(options:)",
                "title" : "func send(options: API.Options) async throws -> String",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/send(options:callbackqueue:completion:)",
                "title" : "func send(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<String, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/sendpublisher(options:)",
                "title" : "func sendPublisher(options: API.Options) -> Future<String, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepush\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepush\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepush\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepush\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepush\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepush\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsepush",
            "title" : "ParsePush",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/init(body:)",
                "title" : "init(body: String)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/action",
                "title" : "var action: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/actionlockey",
                "title" : "var actionLocKey: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/body",
                "title" : "var body: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/launchimage",
                "title" : "var launchImage: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/locargs",
                "title" : "var locArgs: [String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/lockey",
                "title" : "var locKey: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/subtitle",
                "title" : "var subtitle: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/subtitlelocargs",
                "title" : "var subtitleLocArgs: [String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/subtitlelockey",
                "title" : "var subtitleLocKey: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/title",
                "title" : "var title: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/titlelocargs",
                "title" : "var titleLocArgs: [String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/titlelockey",
                "title" : "var titleLocKey: String?",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushapplealert\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushapplealert\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushapplealert\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsepushapplealert",
            "title" : "ParsePushAppleAlert",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplesound\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushapplesound\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushapplesound\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushapplesound\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushapplesound\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushapplesound\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushapplesound\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsepushapplesound",
            "title" : "ParsePushAppleSound",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/init(title:body:icon:)",
                "title" : "init(title: String?, body: String?, icon: String?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/init(title:body:image:)",
                "title" : "init(title: String?, body: String?, image: String?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/androidchannelid",
                "title" : "var androidChannelId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/badge",
                "title" : "var badge: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/body",
                "title" : "var body: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/bodylocargs",
                "title" : "var bodyLocArgs: [String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/bodylockey",
                "title" : "var bodyLocKey: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/clickaction",
                "title" : "var clickAction: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/color",
                "title" : "var color: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/icon",
                "title" : "var icon: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/image",
                "title" : "var image: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/sound",
                "title" : "var sound: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/subtitle",
                "title" : "var subtitle: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/tag",
                "title" : "var tag: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/title",
                "title" : "var title: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/titlelocargs",
                "title" : "var titleLocArgs: [String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/titlelockey",
                "title" : "var titleLocKey: String?",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsepushfirebasenotification",
            "title" : "ParsePushFirebaseNotification",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/alert",
                "title" : "var alert: ParsePushAppleAlert?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/category",
                "title" : "var category: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/collapseid",
                "title" : "var collapseId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/collapsekey",
                "title" : "var collapseKey: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/data",
                "title" : "var data: [String : String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/delaywhileidle",
                "title" : "var delayWhileIdle: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/dryrun",
                "title" : "var dryRun: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/interruptionlevel",
                "title" : "var interruptionLevel: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/mdm",
                "title" : "var mdm: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/notification",
                "title" : "var notification: ParsePushFirebaseNotification?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/pushtype",
                "title" : "var pushType: ParsePushPayloadApple.PushType?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/relevancescore",
                "title" : "var relevanceScore: Double?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/restrictedpackagename",
                "title" : "var restrictedPackageName: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/targetcontentid",
                "title" : "var targetContentId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/threadid",
                "title" : "var threadId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/title",
                "title" : "var title: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/topic",
                "title" : "var topic: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/uri",
                "title" : "var uri: URL?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/urlargs",
                "title" : "var urlArgs: [String]?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/converttoapple()",
                "title" : "func convertToApple() -> ParsePushPayloadApple",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/converttofirebase()",
                "title" : "func convertToFirebase() -> ParsePushPayloadFirebase",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushpayloadany\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushpayloadany\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushpayloadany\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsepushpayloadany",
            "title" : "ParsePushPayloadAny",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/init(alert:)",
                "title" : "init(alert: ParsePushAppleAlert)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/init(body:)",
                "title" : "init(body: String)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/alert",
                "title" : "var alert: ParsePushAppleAlert?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/body",
                "title" : "var body: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/category",
                "title" : "var category: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/collapseid",
                "title" : "var collapseId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/contentavailable",
                "title" : "var contentAvailable: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/interruptionlevel",
                "title" : "var interruptionLevel: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/mdm",
                "title" : "var mdm: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/mutablecontent",
                "title" : "var mutableContent: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/priority",
                "title" : "var priority: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/pushtype-swift.property",
                "title" : "var pushType: PushType?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/relevancescore",
                "title" : "var relevanceScore: Double?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/targetcontentid",
                "title" : "var targetContentId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/threadid",
                "title" : "var threadId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/topic",
                "title" : "var topic: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/urlargs",
                "title" : "var urlArgs: [String]?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/getsound()",
                "title" : "func getSound<V>() throws -> V",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/incrementbadge()",
                "title" : "func incrementBadge() -> ParsePushPayloadApple",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/setbadge(_:)",
                "title" : "func setBadge(Int) -> ParsePushPayloadApple",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/setsound(_:)-27wko",
                "title" : "func setSound(ParsePushAppleSound) -> ParsePushPayloadApple",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/setsound(_:)-4d1ma",
                "title" : "func setSound<V>(V) -> ParsePushPayloadApple",
                "type" : "method"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/pushtype-swift.enum\/alert",
                    "title" : "case alert",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/pushtype-swift.enum\/background",
                    "title" : "case background",
                    "type" : "case"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/pushtype-swift.enum\/init(rawvalue:)",
                    "title" : "init?(rawValue: String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/pushtype-swift.enum\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/pushtype-swift.enum\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/pushtype-swift.enum\/init(from:)",
                        "title" : "init(from: any Decoder) throws",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/pushtype-swift.enum\/hashvalue",
                        "title" : "var hashValue: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/pushtype-swift.enum\/encode(to:)",
                        "title" : "func encode(to: any Encoder) throws",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/pushtype-swift.enum\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/pushtype-swift.enum\/rawrepresentable-implementations",
                    "title" : "RawRepresentable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/pushtype-swift.enum",
                "title" : "ParsePushPayloadApple.PushType",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsepushpayloadapple",
            "title" : "ParsePushPayloadApple",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/init(notification:)",
                "title" : "init(notification: ParsePushFirebaseNotification)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/collapsekey",
                "title" : "var collapseKey: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/contentavailable",
                "title" : "var contentAvailable: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/data",
                "title" : "var data: [String : String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/delaywhileidle",
                "title" : "var delayWhileIdle: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/dryrun",
                "title" : "var dryRun: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/mutablecontent",
                "title" : "var mutableContent: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/notification",
                "title" : "var notification: ParsePushFirebaseNotification?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/priority",
                "title" : "var priority: `Self`.PushPriority?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/restrictedpackagename",
                "title" : "var restrictedPackageName: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/title",
                "title" : "var title: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/uri",
                "title" : "var uri: URL?",
                "type" : "property"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/pushpriority\/high",
                    "title" : "case high",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/pushpriority\/normal",
                    "title" : "case normal",
                    "type" : "case"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/pushpriority\/init(rawvalue:)",
                    "title" : "init?(rawValue: String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/pushpriority\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/pushpriority\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/pushpriority\/init(from:)",
                        "title" : "init(from: any Decoder) throws",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/pushpriority\/hashvalue",
                        "title" : "var hashValue: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/pushpriority\/encode(to:)",
                        "title" : "func encode(to: any Encoder) throws",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/pushpriority\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/pushpriority\/rawrepresentable-implementations",
                    "title" : "RawRepresentable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/pushpriority",
                "title" : "ParsePushPayloadFirebase.PushPriority",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase",
            "title" : "ParsePushPayloadFirebase",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/acl",
                "title" : "var ACL: ParseACL?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/count",
                "title" : "var count: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/createdat",
                "title" : "var createdAt: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/errormessage",
                "title" : "var errorMessage: ParseError?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/expirationinterval",
                "title" : "var expirationInterval: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/expiry",
                "title" : "var expiry: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/failedpertype",
                "title" : "var failedPerType: [String : Int]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/failedperutcoffset",
                "title" : "var failedPerUTCOffset: [String : Int]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/numfailed",
                "title" : "var numFailed: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/numsent",
                "title" : "var numSent: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/objectid",
                "title" : "var objectId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/originaldata",
                "title" : "var originalData: Data?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/payload",
                "title" : "var payload: PayloadType?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/pushhash",
                "title" : "var pushHash: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/pushtime",
                "title" : "var pushTime: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/query",
                "title" : "var query: QueryWhere?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/sentpertype",
                "title" : "var sentPerType: [String : Int]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/sentperutcoffset",
                "title" : "var sentPerUTCOffset: [String : Int]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/source",
                "title" : "var source: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/status",
                "title" : "var status: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/title",
                "title" : "var title: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/updatedat",
                "title" : "var updatedAt: Date?",
                "type" : "property"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/payloadtype",
                "title" : "ParsePushStatus.PayloadType",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushstatus\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushstatus\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/delete()",
                    "title" : "func delete() async throws -> DeletingType",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushstatus\/deletable-implementations",
                "title" : "Deletable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushstatus\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/fetch()",
                    "title" : "func fetch() async throws -> FetchingType",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushstatus\/fetchable-implementations",
                "title" : "Fetchable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/classname",
                    "title" : "var className: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/endpoint",
                    "title" : "var endpoint: API.Endpoint",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/issaved",
                    "title" : "var isSaved: Bool",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/endpoint(_:)",
                    "title" : "func endpoint(API.Method) async throws -> API.Endpoint",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/issaved()",
                    "title" : "func isSaved() async throws -> Bool",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushstatus\/objectable-implementations",
                "title" : "Objectable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/init(objectid:)",
                    "title" : "init(objectId: String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/id",
                    "title" : "var id: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/mergeable",
                    "title" : "var mergeable: Self",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/operation",
                    "title" : "var operation: ParseOperation<Self>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/relation",
                    "title" : "var relation: ParseRelation<Self>?",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/create(options:)",
                    "title" : "func create(options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/create(options:callbackqueue:completion:)",
                    "title" : "func create(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/createpublisher(options:)",
                    "title" : "func createPublisher(options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/delete(options:)",
                    "title" : "func delete(options: API.Options) async throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/delete(options:callbackqueue:completion:)",
                    "title" : "func delete(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/deletepublisher(options:)",
                    "title" : "func deletePublisher(options: API.Options) -> Future<Void, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/fetch(includekeys:options:)",
                    "title" : "func fetch(includeKeys: [String]?, options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/fetch(includekeys:options:callbackqueue:completion:)",
                    "title" : "func fetch(includeKeys: [String]?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/fetchpublisher(includekeys:options:)",
                    "title" : "func fetchPublisher(includeKeys: [String]?, options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/get(_:)",
                    "title" : "func get<W>(KeyPath<Self, W?>) throws -> W",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/getdecoder()",
                    "title" : "func getDecoder() -> JSONDecoder",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/getencoder()",
                    "title" : "func getEncoder() -> ParseEncoder",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/getjsonencoder()",
                    "title" : "func getJSONEncoder() -> JSONEncoder",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/hassameobjectid(as:)",
                    "title" : "func hasSameObjectId<T>(as: T) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/isdirtyforkey(_:)",
                    "title" : "func isDirtyForKey<W>(KeyPath<Self, W?>) throws -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/merge(with:)",
                    "title" : "func merge(with: Self) throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/mergeparse(with:)",
                    "title" : "func mergeParse(with: Self) throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/relation(_:child:)",
                    "title" : "func relation<U>(String, child: U) throws -> ParseRelation<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/relation(_:classname:)",
                    "title" : "func relation(String, className: String) throws -> ParseRelation<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/relation(_:key:)",
                    "title" : "func relation(ParseRelation<Self>?, key: String) throws -> ParseRelation<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/relation(_:key:with:)-473ct",
                    "title" : "func relation<T>(ParseRelation<T>?, key: String, with: Pointer<T>) throws -> ParseRelation<T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/relation(_:key:with:)-6n2lm",
                    "title" : "func relation<T>(ParseRelation<T>?, key: String, with: T) throws -> ParseRelation<T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/relation(_:object:)",
                    "title" : "func relation<V>(String, object: V.Type) throws -> ParseRelation<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/replace(options:)",
                    "title" : "func replace(options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/replace(options:callbackqueue:completion:)",
                    "title" : "func replace(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/replacepublisher(options:)",
                    "title" : "func replacePublisher(options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/revert()",
                    "title" : "func revert() throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/revert(_:)",
                    "title" : "func revert<W>(WritableKeyPath<Self, W?>) throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/save(ignoringcustomobjectidconfig:options:)",
                    "title" : "func save(ignoringCustomObjectIdConfig: Bool, options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/save(ignoringcustomobjectidconfig:options:callbackqueue:completion:)",
                    "title" : "func save(ignoringCustomObjectIdConfig: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/save(options:)",
                    "title" : "func save(options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/savepublisher(ignoringcustomobjectidconfig:options:)",
                    "title" : "func savePublisher(ignoringCustomObjectIdConfig: Bool, options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/set(_:to:)",
                    "title" : "func set<W>(WritableKeyPath<Self, W?>, to: W) -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/shouldrestorekey(_:original:)",
                    "title" : "func shouldRestoreKey<W>(KeyPath<Self, W?>, original: Self) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/topointer()",
                    "title" : "func toPointer() throws -> Pointer<Self>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/query(_:)-1f2xg",
                    "title" : "static func query([QueryConstraint]) -> Query<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/query(_:)-m51y",
                    "title" : "static func query(QueryConstraint...) -> Query<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/queryrelations(_:parent:)-4cj59",
                    "title" : "static func queryRelations<U>(String, parent: U) throws -> Query<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/queryrelations(_:parent:)-p3o1",
                    "title" : "static func queryRelations<U>(String, parent: Pointer<U>) -> Query<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/relation(_:key:with:)-4n4k6",
                    "title" : "static func relation<T>(ParseRelation<T>?, key: String, with: T) throws -> ParseRelation<T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/relation(_:key:with:)-9k0oc",
                    "title" : "static func relation<T>(ParseRelation<T>?, key: String, with: Pointer<T>) throws -> ParseRelation<T>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushstatus\/parseobject-implementations",
                "title" : "ParseObject Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/save()",
                    "title" : "func save() async throws -> SavingType",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushstatus\/savable-implementations",
                "title" : "Savable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsepushstatus",
            "title" : "ParsePushStatus",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/init(parent:key:)-25hfj",
                "title" : "init(parent: Pointer<T>, key: String?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/init(parent:key:)-9iv6m",
                "title" : "init(parent: T, key: String?) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/init(parent:key:child:)-6zxtt",
                "title" : "init<U>(parent: Pointer<T>, key: String?, child: U)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/init(parent:key:child:)-7ek9i",
                "title" : "init<U>(parent: Pointer<T>, key: String?, child: Pointer<U>)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/init(parent:key:child:)-8evhy",
                "title" : "init<U>(parent: T, key: String?, child: U) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/init(parent:key:child:)-912hj",
                "title" : "init<U>(parent: T, key: String?, child: Pointer<U>) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/init(parent:key:classname:)-5ijuf",
                "title" : "init(parent: T, key: String?, className: String) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/init(parent:key:classname:)-7xhg8",
                "title" : "init(parent: Pointer<T>, key: String?, className: String)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/init(parent:key:object:)-2y4rx",
                "title" : "init<V>(parent: Pointer<T>, key: String?, object: V.Type)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/init(parent:key:object:)-8sj83",
                "title" : "init<V>(parent: T, key: String?, object: V.Type) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/classname",
                "title" : "var className: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/parent",
                "title" : "var parent: Pointer<T>?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/add(_:)-89hhl",
                "title" : "func add<U>([U]) throws -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/add(_:)-fiw5",
                "title" : "func add<U>([U]) throws -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/add(_:)-ob98",
                "title" : "func add<U>([U]) throws -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/add(_:objects:)",
                "title" : "func add<U>(String, objects: [U]) throws -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/query()",
                "title" : "func query<U>() throws -> Query<U>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/query(_:)",
                "title" : "func query<U>(String) throws -> Query<U>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/query(_:parent:)-2ymy3",
                "title" : "func query<U>(String, parent: U) throws -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/query(_:parent:)-6niph",
                "title" : "func query<U>(String, parent: Pointer<U>) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/remove(_:)-5sx9o",
                "title" : "func remove<U>([U]) throws -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/remove(_:)-8lzzm",
                "title" : "func remove<U>([U]) throws -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/remove(_:)-ks5y",
                "title" : "func remove<U>([U]) throws -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/remove(_:objects:)",
                "title" : "func remove<U>(String, objects: [U]) throws -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/query(_:parent:)-4a90y",
                "title" : "static func query<U>(String, parent: Pointer<U>) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/query(_:parent:)-52scm",
                "title" : "static func query<U>(String, parent: U) throws -> Query<T>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parserelation\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parserelation\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parserelation\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parserelation\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parserelation\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parserelation\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parserelation",
            "title" : "ParseRelation",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/init(classlevelpermissions:)",
                "title" : "init(classLevelPermissions: ParseCLP)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/classlevelpermissions",
                "title" : "var classLevelPermissions: ParseCLP?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/classname-swift.property",
                "title" : "var className: String",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/addfield(_:type:options:)-2gkz6",
                "title" : "func addField<T>(String, type: ParseField.FieldType, options: ParseFieldOptions<T>) throws -> ParseSchema<SchemaObject>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/addfield(_:type:options:)-v4zh",
                "title" : "func addField<V>(String, type: ParseField.FieldType, options: ParseFieldOptions<V>) -> ParseSchema<SchemaObject>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/addindex(_:field:index:)",
                "title" : "func addIndex(String, field: String, index: Encodable) -> ParseSchema<SchemaObject>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/addpointer(_:options:)",
                "title" : "func addPointer<T>(String, options: ParseFieldOptions<T>) -> ParseSchema<SchemaObject>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/addrelation(_:options:)",
                "title" : "func addRelation<T>(String, options: ParseFieldOptions<T>) -> ParseSchema<SchemaObject>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/create(options:)",
                "title" : "func create(options: API.Options) async throws -> ParseSchema<SchemaObject>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/create(options:callbackqueue:completion:)",
                "title" : "func create(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<`Self`, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/createpublisher(includekeys:options:)",
                "title" : "func createPublisher(includeKeys: [String]?, options: API.Options) -> Future<`Self`, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/delete(options:)",
                "title" : "func delete(options: API.Options) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/delete(options:callbackqueue:completion:)",
                "title" : "func delete(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/deletefield(_:)",
                "title" : "func deleteField(String) -> ParseSchema<SchemaObject>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/deleteindex(_:)",
                "title" : "func deleteIndex(String) -> ParseSchema<SchemaObject>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/deletepublisher(includekeys:options:)",
                "title" : "func deletePublisher(includeKeys: [String]?, options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/fetch(options:)",
                "title" : "func fetch(options: API.Options) async throws -> ParseSchema<SchemaObject>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/fetch(options:callbackqueue:completion:)",
                "title" : "func fetch(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<`Self`, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/fetchpublisher(includekeys:options:)",
                "title" : "func fetchPublisher(includeKeys: [String]?, options: API.Options) -> Future<`Self`, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/getfields()",
                "title" : "func getFields() -> [String : String]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/getindexes()",
                "title" : "func getIndexes() -> [String : [String : String]]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/purge(options:)",
                "title" : "func purge(options: API.Options) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/purge(options:callbackqueue:completion:)",
                "title" : "func purge(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/purgepublisher(includekeys:options:)",
                "title" : "func purgePublisher(includeKeys: [String]?, options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/update(options:)",
                "title" : "func update(options: API.Options) async throws -> ParseSchema<SchemaObject>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/update(options:callbackqueue:completion:)",
                "title" : "func update(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<`Self`, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/updatepublisher(includekeys:options:)",
                "title" : "func updatePublisher(includeKeys: [String]?, options: API.Options) -> Future<`Self`, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/classname-swift.type.property",
                "title" : "static var className: String",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseschema\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseschema\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseschema\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseschema\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseschema\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseschema\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseschema",
            "title" : "ParseSchema",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseserver\/information\/init(from:)",
                    "title" : "init(from: any Decoder) throws",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseserver\/information\/version",
                    "title" : "var version: ParseVersion?",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseserver\/information\/getfeatures()",
                    "title" : "func getFeatures<T>() throws -> T",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseserver\/information",
                "title" : "ParseServer.Information",
                "type" : "struct"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseserver\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseserver\/check(options:)",
                "title" : "static func check(options: API.Options) async throws -> Status",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseserver\/check(options:callbackqueue:allowintermediateresponses:completion:)",
                "title" : "static func check(options: API.Options, callbackQueue: DispatchQueue, allowIntermediateResponses: Bool, completion: (Result<Status, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseserver\/checkpublisher(options:)",
                "title" : "static func checkPublisher(options: API.Options) -> AnyPublisher<Status, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseserver\/health(options:)",
                "title" : "static func health(options: API.Options) async throws -> Status",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseserver\/health(options:callbackqueue:allowintermediateresponses:completion:)",
                "title" : "static func health(options: API.Options, callbackQueue: DispatchQueue, allowIntermediateResponses: Bool, completion: (Result<Status, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseserver\/healthpublisher(options:)",
                "title" : "static func healthPublisher(options: API.Options) -> AnyPublisher<Status, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseserver\/information(options:)",
                "title" : "static func information(options: API.Options) async throws -> Information",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseserver\/information(options:callbackqueue:completion:)",
                "title" : "static func information(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Information, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseserver\/informationpublisher(options:)",
                "title" : "static func informationPublisher(options: API.Options) -> Future<Information, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseserver\/status\/error",
                    "title" : "case error",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseserver\/status\/initialized",
                    "title" : "case initialized",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseserver\/status\/ok",
                    "title" : "case ok",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseserver\/status\/starting",
                    "title" : "case starting",
                    "type" : "case"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseserver\/status\/init(rawvalue:)",
                    "title" : "init?(rawValue: String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseserver\/status\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parseserver\/status\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseserver\/status\/init(from:)",
                        "title" : "init(from: any Decoder) throws",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseserver\/status\/hashvalue",
                        "title" : "var hashValue: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseserver\/status\/encode(to:)",
                        "title" : "func encode(to: any Encoder) throws",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseserver\/status\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parseserver\/status\/rawrepresentable-implementations",
                    "title" : "RawRepresentable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseserver\/status",
                "title" : "ParseServer.Status",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseserver\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseserver\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseserver\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseserver\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseserver\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseserver\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseserver",
            "title" : "ParseServer",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsespotify\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsespotify\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsespotify\/link(id:accesstoken:expiresin:refreshtoken:options:)",
                "title" : "func link(id: String, accessToken: String, expiresIn: Int?, refreshToken: String?, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsespotify\/link(id:accesstoken:expiresin:refreshtoken:options:callbackqueue:completion:)",
                "title" : "func link(id: String, accessToken: String, expiresIn: Int?, refreshToken: String?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsespotify\/linkpublisher(id:accesstoken:expiresin:refreshtoken:options:)",
                "title" : "func linkPublisher(id: String, accessToken: String, expiresIn: Int?, refreshToken: String?, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsespotify\/login(authdata:options:)",
                "title" : "func login(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsespotify\/login(id:accesstoken:expiresin:refreshtoken:options:)",
                "title" : "func login(id: String, accessToken: String, expiresIn: Int?, refreshToken: String?, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsespotify\/login(id:accesstoken:expiresin:refreshtoken:options:callbackqueue:completion:)",
                "title" : "func login(id: String, accessToken: String, expiresIn: Int?, refreshToken: String?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsespotify\/loginpublisher(id:accesstoken:expiresin:refreshtoken:options:)",
                "title" : "func loginPublisher(id: String, accessToken: String, expiresIn: Int?, refreshToken: String?, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsespotify\/islinked()",
                    "title" : "func isLinked() async -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsespotify\/link(authdata:options:)",
                    "title" : "func link(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsespotify\/link(authdata:options:callbackqueue:completion:)",
                    "title" : "func link(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsespotify\/linkpublisher(authdata:options:)",
                    "title" : "func linkPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsespotify\/login(authdata:options:callbackqueue:completion:)",
                    "title" : "func login(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsespotify\/loginpublisher(authdata:options:)",
                    "title" : "func loginPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsespotify\/strip()",
                    "title" : "func strip() async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsespotify\/strip(_:)",
                    "title" : "func strip(AuthenticatedUser) -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsespotify\/unlink(_:options:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsespotify\/unlink(_:options:callbackqueue:completion:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsespotify\/unlink(options:)",
                    "title" : "func unlink(options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsespotify\/unlink(options:callbackqueue:completion:)",
                    "title" : "func unlink(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsespotify\/unlinkpublisher(_:options:)",
                    "title" : "func unlinkPublisher(AuthenticatedUser, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsespotify\/unlinkpublisher(options:)",
                    "title" : "func unlinkPublisher(options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsespotify\/islinked(with:)",
                    "title" : "static func isLinked(with: AuthenticatedUser) -> Bool",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsespotify\/parseauthentication-implementations",
                "title" : "ParseAuthentication Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsespotify",
            "title" : "ParseSpotify",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsetwitter\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsetwitter\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsetwitter\/link(userid:screenname:consumerkey:consumersecret:authtoken:authtokensecret:options:)",
                "title" : "func link(userId: String, screenName: String?, consumerKey: String, consumerSecret: String, authToken: String, authTokenSecret: String, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsetwitter\/link(userid:screenname:consumerkey:consumersecret:authtoken:authtokensecret:options:callbackqueue:completion:)",
                "title" : "func link(userId: String, screenName: String?, consumerKey: String, consumerSecret: String, authToken: String, authTokenSecret: String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsetwitter\/linkpublisher(userid:screenname:consumerkey:consumersecret:authtoken:authtokensecret:options:)",
                "title" : "func linkPublisher(userId: String, screenName: String?, consumerKey: String, consumerSecret: String, authToken: String, authTokenSecret: String, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsetwitter\/login(authdata:options:)",
                "title" : "func login(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsetwitter\/login(userid:screenname:consumerkey:consumersecret:authtoken:authtokensecret:options:)",
                "title" : "func login(userId: String, screenName: String?, consumerKey: String, consumerSecret: String, authToken: String, authTokenSecret: String, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsetwitter\/login(userid:screenname:consumerkey:consumersecret:authtoken:authtokensecret:options:callbackqueue:completion:)",
                "title" : "func login(userId: String, screenName: String?, consumerKey: String, consumerSecret: String, authToken: String, authTokenSecret: String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsetwitter\/loginpublisher(userid:screenname:consumerkey:consumersecret:authtoken:authtokensecret:options:)",
                "title" : "func loginPublisher(userId: String, screenName: String?, consumerKey: String, consumerSecret: String, authToken: String, authTokenSecret: String, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetwitter\/islinked()",
                    "title" : "func isLinked() async -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetwitter\/link(authdata:options:)",
                    "title" : "func link(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetwitter\/link(authdata:options:callbackqueue:completion:)",
                    "title" : "func link(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetwitter\/linkpublisher(authdata:options:)",
                    "title" : "func linkPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetwitter\/login(authdata:options:callbackqueue:completion:)",
                    "title" : "func login(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetwitter\/loginpublisher(authdata:options:)",
                    "title" : "func loginPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetwitter\/strip()",
                    "title" : "func strip() async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetwitter\/strip(_:)",
                    "title" : "func strip(AuthenticatedUser) -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetwitter\/unlink(_:options:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetwitter\/unlink(_:options:callbackqueue:completion:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetwitter\/unlink(options:)",
                    "title" : "func unlink(options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetwitter\/unlink(options:callbackqueue:completion:)",
                    "title" : "func unlink(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetwitter\/unlinkpublisher(_:options:)",
                    "title" : "func unlinkPublisher(AuthenticatedUser, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetwitter\/unlinkpublisher(options:)",
                    "title" : "func unlinkPublisher(options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetwitter\/islinked(with:)",
                    "title" : "static func isLinked(with: AuthenticatedUser) -> Bool",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsetwitter\/parseauthentication-implementations",
                "title" : "ParseAuthentication Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsetwitter",
            "title" : "ParseTwitter",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseversion\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseversion\/init(string:)",
                "title" : "init(string: String) throws",
                "type" : "init"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseversion\/current()",
                "title" : "static func current() async throws -> ParseVersion",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/'...(_:)-1ju9p",
                    "title" : "static func ... (Self) -> PartialRangeThrough<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/'...(_:)-7523g",
                    "title" : "static func ... (Self) -> PartialRangeFrom<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/'...(_:_:)",
                    "title" : "static func ... (Self, Self) -> ClosedRange<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/'.._(_:)",
                    "title" : "static func ..< (Self) -> PartialRangeUpTo<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/'.._(_:_:)",
                    "title" : "static func ..< (Self, Self) -> Range<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/_(_:_:)-2eh5t",
                    "title" : "static func > (`Self`, `Self`) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/_(_:_:)-2fa7s",
                    "title" : "static func < (`Self`, `Self`) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/_(_:_:)-2ie1v",
                    "title" : "static func > (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/_=(_:_:)-4xugm",
                    "title" : "static func <= (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/_=(_:_:)-5i0hp",
                    "title" : "static func >= (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/_=(_:_:)-7dags",
                    "title" : "static func >= (`Self`, `Self`) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/_=(_:_:)-7eh1a",
                    "title" : "static func <= (`Self`, `Self`) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseversion\/comparable-implementations",
                "title" : "Comparable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseversion\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseversion\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseversion\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseversion",
            "title" : "ParseVersion",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/pointer\/init(_:)",
                "title" : "init(T) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/pointer\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/pointer\/init(objectid:)",
                "title" : "init(objectId: String)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/pointer\/classname",
                "title" : "var className: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/pointer\/objectid",
                "title" : "var objectId: String",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/pointer\/fetchpublisher(includekeys:options:)",
                "title" : "func fetchPublisher(includeKeys: [String]?, options: API.Options) -> Future<T, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/pointer\/toobject()",
                "title" : "func toObject() -> T",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/pointer\/object",
                "title" : "Pointer.Object",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/pointer\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/pointer\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/pointer\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/pointer\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/pointer\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/pointer\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/pointer\/fetch()",
                    "title" : "func fetch() async throws -> FetchingType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/pointer\/fetch(includekeys:options:)",
                    "title" : "func fetch(includeKeys: [String]?, options: API.Options) async throws -> T",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/pointer\/fetchable-implementations",
                "title" : "Fetchable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/pointer",
            "title" : "Pointer",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/init(_:)-16e61",
                "title" : "init(QueryConstraint...)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/init(_:)-6muig",
                "title" : "init([QueryConstraint])",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/classname-swift.property",
                "title" : "var className: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/viewmodel",
                "title" : "var viewModel: QueryViewModel<ResultType>",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/aggregate(_:options:)",
                "title" : "func aggregate([[String : Encodable]], options: API.Options) async throws -> [ResultType]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/aggregate(_:options:callbackqueue:completion:)",
                "title" : "func aggregate([[String : Encodable]], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[ResultType], ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/aggregateexplain(_:usingmongodb:options:)",
                "title" : "func aggregateExplain<U>([[String : Encodable]], usingMongoDB: Bool, options: API.Options) async throws -> [U]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/aggregateexplain(_:usingmongodb:options:callbackqueue:completion:)",
                "title" : "func aggregateExplain<U>([[String : Encodable]], usingMongoDB: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[U], ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/aggregateexplainpublisher(_:usingmongodb:options:)",
                "title" : "func aggregateExplainPublisher<U>([[String : Encodable]], usingMongoDB: Bool, options: API.Options) -> Future<[U], ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/aggregatepublisher(_:options:)",
                "title" : "func aggregatePublisher([[String : Encodable]], options: API.Options) -> Future<[ResultType], ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/countexplain(usingmongodb:options:)",
                "title" : "func countExplain<U>(usingMongoDB: Bool, options: API.Options) async throws -> [U]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/countexplain(usingmongodb:options:callbackqueue:completion:)",
                "title" : "func countExplain<U>(usingMongoDB: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[U], ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/countexplainpublisher(usingmongodb:options:)",
                "title" : "func countExplainPublisher<U>(usingMongoDB: Bool, options: API.Options) -> Future<[U], ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/countpublisher(options:)",
                "title" : "func countPublisher(options: API.Options) -> Future<Int, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/distinct(_:options:)",
                "title" : "func distinct(String, options: API.Options) async throws -> [ResultType]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/distinct(_:options:callbackqueue:completion:)",
                "title" : "func distinct(String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[ResultType], ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/distinctexplain(_:usingmongodb:options:)",
                "title" : "func distinctExplain<U>(String, usingMongoDB: Bool, options: API.Options) async throws -> [U]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/distinctexplain(_:usingmongodb:options:callbackqueue:completion:)",
                "title" : "func distinctExplain<U>(String, usingMongoDB: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[U], ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/distinctexplainpublisher(_:usingmongodb:options:)",
                "title" : "func distinctExplainPublisher<U>(String, usingMongoDB: Bool, options: API.Options) -> Future<[U], ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/distinctpublisher(_:options:)",
                "title" : "func distinctPublisher(String, options: API.Options) -> Future<[ResultType], ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/exclude(_:)-1jvpb",
                "title" : "func exclude(String...) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/exclude(_:)-717l0",
                "title" : "func exclude([String]) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/fields(_:)-2q1ez",
                "title" : "func fields(String...) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/fields(_:)-71x3d",
                "title" : "func fields([String]) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/findall(batchlimit:options:)",
                "title" : "func findAll(batchLimit: Int?, options: API.Options) async throws -> [ResultType]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/findall(batchlimit:options:callbackqueue:completion:)",
                "title" : "func findAll(batchLimit: Int?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[ResultType], ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/findallpublisher(batchlimit:options:)",
                "title" : "func findAllPublisher(batchLimit: Int?, options: API.Options) -> Future<[ResultType], ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/findexplain(usingmongodb:options:)",
                "title" : "func findExplain<U>(usingMongoDB: Bool, options: API.Options) async throws -> [U]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/findexplain(usingmongodb:options:callbackqueue:completion:)",
                "title" : "func findExplain<U>(usingMongoDB: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[U], ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/findexplainpublisher(usingmongodb:options:)",
                "title" : "func findExplainPublisher<U>(usingMongoDB: Bool, options: API.Options) -> Future<[U], ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/findpublisher(options:)",
                "title" : "func findPublisher(options: API.Options) -> Future<[ResultType], ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/firstexplain(usingmongodb:options:)",
                "title" : "func firstExplain<U>(usingMongoDB: Bool, options: API.Options) async throws -> U",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/firstexplain(usingmongodb:options:callbackqueue:completion:)",
                "title" : "func firstExplain<U>(usingMongoDB: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<U, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/firstexplainpublisher(usingmongodb:options:)",
                "title" : "func firstExplainPublisher<U>(usingMongoDB: Bool, options: API.Options) -> Future<U, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/firstpublisher(options:)",
                "title" : "func firstPublisher(options: API.Options) -> Future<ResultType, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/hint(_:)",
                "title" : "func hint<U>(U) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/include(_:)-323ik",
                "title" : "func include(String...) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/include(_:)-47jms",
                "title" : "func include([String]) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/includeall()",
                "title" : "func includeAll() -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/limit(_:)",
                "title" : "func limit(Int) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/order(_:)-75g9s",
                "title" : "func order([Order]?) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/order(_:)-779cz",
                "title" : "func order(Order...) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/readpreference(_:includereadpreference:subqueryreadpreference:)",
                "title" : "func readPreference(String?, includeReadPreference: String?, subqueryReadPreference: String?) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/select(_:)-23ewt",
                "title" : "func select(String...) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/select(_:)-689ic",
                "title" : "func select([String]) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/skip(_:)",
                "title" : "func skip(Int) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/sortbytextscore()",
                "title" : "func sortByTextScore() -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/subscribe()",
                "title" : "func subscribe() async throws -> Subscription<ResultType>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/subscribe(_:)-swift.method",
                "title" : "func subscribe(ParseLiveQuery) async throws -> Subscription<ResultType>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/subscribecallback()",
                "title" : "func subscribeCallback() async throws -> SubscriptionCallback<ResultType>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/subscribecallback(_:)",
                "title" : "func subscribeCallback(ParseLiveQuery) async throws -> SubscriptionCallback<ResultType>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/unsubscribe()",
                "title" : "func unsubscribe() async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/unsubscribe(_:)",
                "title" : "func unsubscribe<V>(V) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/unsubscribe(_:client:)",
                "title" : "func unsubscribe<V>(V, client: ParseLiveQuery) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/unsubscribe(client:)",
                "title" : "func unsubscribe(client: ParseLiveQuery) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/update(_:)",
                "title" : "func update<V>(V) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/update(_:client:)",
                "title" : "func update<V>(V, client: ParseLiveQuery) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/watch(_:)-41gct",
                "title" : "func watch(String...) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/watch(_:)-9h5yl",
                "title" : "func watch([String]) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/where(_:)-60ukn",
                "title" : "func `where`(QueryConstraint...) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/where(_:)-m71l",
                "title" : "func `where`([QueryConstraint]) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/withcount(options:)",
                "title" : "func withCount(options: API.Options) async throws -> ([ResultType], Int)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/withcount(options:callbackqueue:completion:)",
                "title" : "func withCount(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<([ResultType], Int), ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/withcountexplain(usingmongodb:options:)",
                "title" : "func withCountExplain<U>(usingMongoDB: Bool, options: API.Options) async throws -> [U]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/withcountexplain(usingmongodb:options:callbackqueue:completion:)",
                "title" : "func withCountExplain<U>(usingMongoDB: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[U], ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/withcountexplainpublisher(usingmongodb:options:)",
                "title" : "func withCountExplainPublisher<U>(usingMongoDB: Bool, options: API.Options) -> Future<[U], ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/withcountpublisher(options:)",
                "title" : "func withCountPublisher(options: API.Options) -> Future<([ResultType], Int), ParseError>",
                "type" : "method"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/classname-swift.type.property",
                "title" : "static var className: String",
                "type" : "property"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/subscribe(_:)-swift.type.method",
                "title" : "static func subscribe<V>(V) async throws -> V",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/subscribe(_:client:)",
                "title" : "static func subscribe<V>(V, client: ParseLiveQuery) async throws -> V",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/viewmodel(_:)",
                "title" : "static func viewModel(`Self`) -> QueryViewModel<ResultType>",
                "type" : "method"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/order\/ascending(_:)",
                    "title" : "case ascending(String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/order\/descending(_:)",
                    "title" : "case descending(String)",
                    "type" : "case"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/order\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/order\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/query\/order\/debugdescription",
                        "title" : "var debugDescription: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/query\/order\/customdebugstringconvertible-implementations",
                    "title" : "CustomDebugStringConvertible Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/query\/order\/description",
                        "title" : "var description: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/query\/order\/customstringconvertible-implementations",
                    "title" : "CustomStringConvertible Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/query\/order\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/query\/order\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/parseswift\/query\/order",
                "title" : "Query.Order",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/query\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/query\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/parseswift\/query\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/query\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/query\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/count(options:)",
                    "title" : "func count(options: API.Options) async throws -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/count(options:callbackqueue:completion:)",
                    "title" : "func count(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Int, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/find(options:)",
                    "title" : "func find(options: API.Options) async throws -> [ResultType]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/find(options:callbackqueue:completion:)",
                    "title" : "func find(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[ResultType], ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/first(options:)",
                    "title" : "func first(options: API.Options) async throws -> ResultType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/first(options:callbackqueue:completion:)",
                    "title" : "func first(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<ResultType, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/resulttype",
                    "title" : "Query.ResultType",
                    "type" : "typealias"
                  }
                ],
                "path" : "\/documentation\/parseswift\/query\/queryable-implementations",
                "title" : "Queryable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/query",
            "title" : "Query",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/queryconstraint\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/queryconstraint\/encode(to:)",
                "title" : "func encode(to: Encoder) throws",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/queryconstraint\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/queryconstraint\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/queryconstraint\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/queryconstraint\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/queryconstraint\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/queryconstraint\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/queryconstraint",
            "title" : "QueryConstraint",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/querywhere\/encode(to:)",
                "title" : "func encode(to: Encoder) throws",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/querywhere\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/querywhere\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/querywhere\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/querywhere\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/querywhere\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/parseswift\/querywhere\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/querywhere\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/querywhere\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/querywhere",
            "title" : "QueryWhere",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/triggerrequest\/init(trigger:)",
                "title" : "init<T>(trigger: T) throws",
                "type" : "init"
              }
            ],
            "path" : "\/documentation\/parseswift\/triggerrequest",
            "title" : "TriggerRequest",
            "type" : "struct"
          },
          {
            "title" : "Variables",
            "type" : "groupMarker"
          },
          {
            "path" : "\/documentation\/parseswift\/configuration",
            "title" : "var configuration: ParseConfiguration",
            "type" : "var"
          },
          {
            "title" : "Functions",
            "type" : "groupMarker"
          },
          {
            "path" : "\/documentation\/parseswift\/and(queries:)-4ugox",
            "title" : "func and<T>(queries: [Query<T>]) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/and(queries:)-8cafq",
            "title" : "func and<T>(queries: Query<T>...) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/clearcache()",
            "title" : "func clearCache()",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/containedby(key:array:)-3irrl",
            "title" : "func containedBy<T>(key: String, array: [T]) throws -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/containedby(key:array:)-8m6r2",
            "title" : "func containedBy<T>(key: String, array: [T]) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/containedin(key:array:)-36xo5",
            "title" : "func containedIn<T>(key: String, array: [T]) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/containedin(key:array:)-f8wn",
            "title" : "func containedIn<T>(key: String, array: [T]) throws -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/containsall(key:array:)-1g8ks",
            "title" : "func containsAll<T>(key: String, array: [T]) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/containsall(key:array:)-7bkbc",
            "title" : "func containsAll<T>(key: String, array: [T]) throws -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/containsstring(key:substring:modifiers:)",
            "title" : "func containsString(key: String, substring: String, modifiers: String?) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/deleteobjectiveckeychain()",
            "title" : "func deleteObjectiveCKeychain() async throws",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/doesnotexist(key:)",
            "title" : "func doesNotExist(key: String) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/doesnotmatchkeyinquery(key:querykey:query:)",
            "title" : "func doesNotMatchKeyInQuery<T>(key: String, queryKey: String, query: Query<T>) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/equalto(key:object:)",
            "title" : "func equalTo<T>(key: String, object: T) throws -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/equalto(key:value:)",
            "title" : "func equalTo<T>(key: String, value: T) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/equaltonocomparator(key:object:)",
            "title" : "func equalToNoComparator<T>(key: String, object: T) throws -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/equaltonocomparator(key:value:)",
            "title" : "func equalToNoComparator<T>(key: String, value: T) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/exists(key:)",
            "title" : "func exists(key: String) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/geopoint(_:within:)-41yaf",
            "title" : "func geoPoint(String, within: ParsePolygon) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/geopoint(_:within:)-9uzx1",
            "title" : "func geoPoint(String, within: [ParseGeoPoint]) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/hasprefix(key:prefix:modifiers:)",
            "title" : "func hasPrefix(key: String, prefix: String, modifiers: String?) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/hassuffix(key:suffix:modifiers:)",
            "title" : "func hasSuffix(key: String, suffix: String, modifiers: String?) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/initialize(applicationid:clientkey:primarykey:maintenancekey:serverurl:livequeryserverurl:requiringcustomobjectids:usingtransactions:usingequalqueryconstraint:usingpostforquery:primitivestore:requestcachepolicy:cachememorycapacity:cachedisk-fuew",
            "title" : "func initialize(applicationId: String, clientKey: String?, primaryKey: String?, maintenanceKey: String?, serverURL: URL, liveQueryServerURL: URL?, requiringCustomObjectIds: Bool, usingTransactions: Bool, usingEqualQueryConstraint: Bool, usingPostForQuery: Bool, primitiveStore: ParsePrimitiveStorable?, requestCachePolicy: URLRequest.CachePolicy, cacheMemoryCapacity: Int, cacheDiskCapacity: Int, usingDataProtectionKeychain: Bool, deletingKeychainIfNeeded: Bool, httpAdditionalHeaders: [AnyHashable : Any]?, usingAutomaticLogin: Bool, maxConnectionAttempts: Int, liveQueryConnectionAdditionalProperties: Bool, liveQueryMaxConnectionAttempts: Int, parseFileTransfer: ParseFileTransferable?, authentication: ((URLAuthenticationChallenge, (URLSession.AuthChallengeDisposition, URLCredential?) -> Void) -> Void)?) async throws",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/initialize(configuration:)",
            "title" : "func initialize(configuration: ParseConfiguration) async throws",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/isnotnull(key:)",
            "title" : "func isNotNull(key: String) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/isnull(key:)",
            "title" : "func isNull(key: String) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/matcheskeyinquery(key:querykey:query:)",
            "title" : "func matchesKeyInQuery<T>(key: String, queryKey: String, query: Query<T>) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/matchesregex(key:regex:modifiers:)",
            "title" : "func matchesRegex(key: String, regex: String, modifiers: String?) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/matchestext(key:text:)",
            "title" : "func matchesText(key: String, text: String) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/matchestext(key:text:options:)",
            "title" : "func matchesText(key: String, text: String, options: [ParseTextOption : Encodable]) throws -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/near(key:geopoint:)",
            "title" : "func near(key: String, geoPoint: ParseGeoPoint) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/nor(queries:)-4b4r0",
            "title" : "func nor<T>(queries: [Query<T>]) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/nor(queries:)-l87w",
            "title" : "func nor<T>(queries: Query<T>...) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/notcontainedin(key:array:)-2eqxa",
            "title" : "func notContainedIn<T>(key: String, array: [T]) throws -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/notcontainedin(key:array:)-lma5",
            "title" : "func notContainedIn<T>(key: String, array: [T]) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/or(queries:)-1117v",
            "title" : "func or<T>(queries: Query<T>...) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/or(queries:)-8hqvz",
            "title" : "func or<T>(queries: [Query<T>]) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/polygon(_:contains:)",
            "title" : "func polygon(String, contains: ParseGeoPoint) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/polygoncontains(key:point:)",
            "title" : "func polygonContains(key: String, point: ParseGeoPoint) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/related(key:)",
            "title" : "func related(key: String) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/related(key:object:)-23s9i",
            "title" : "func related<T>(key: String, object: T) throws -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/related(key:object:)-6tnr6",
            "title" : "func related<T>(key: String, object: Pointer<T>) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/related(object:)-3ndwf",
            "title" : "func related<T>(object: Pointer<T>) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/related(object:)-9ex2g",
            "title" : "func related<T>(object: T) throws -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/relative(_:)",
            "title" : "func relative(QueryConstraint) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/setaccessgroup(_:synchronizeacrossdevices:)",
            "title" : "func setAccessGroup(String?, synchronizeAcrossDevices: Bool) async throws -> Bool",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/updateauthentication(_:)",
            "title" : "func updateAuthentication(((URLAuthenticationChallenge, (URLSession.AuthChallengeDisposition, URLCredential?) -> Void) -> Void)?)",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/withingeobox(key:fromsouthwest:tonortheast:)",
            "title" : "func withinGeoBox(key: String, fromSouthWest: ParseGeoPoint, toNortheast: ParseGeoPoint) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/withinkilometers(key:geopoint:distance:sorted:)",
            "title" : "func withinKilometers(key: String, geoPoint: ParseGeoPoint, distance: Double, sorted: Bool) -> [QueryConstraint]",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/withinmiles(key:geopoint:distance:sorted:)",
            "title" : "func withinMiles(key: String, geoPoint: ParseGeoPoint, distance: Double, sorted: Bool) -> [QueryConstraint]",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/withinpolygon(key:points:)",
            "title" : "func withinPolygon(key: String, points: [ParseGeoPoint]) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/withinpolygon(key:polygon:)",
            "title" : "func withinPolygon(key: String, polygon: ParsePolygon) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/withinradians(key:geopoint:distance:sorted:)",
            "title" : "func withinRadians(key: String, geoPoint: ParseGeoPoint, distance: Double, sorted: Bool) -> [QueryConstraint]",
            "type" : "func"
          },
          {
            "title" : "Operators",
            "type" : "groupMarker"
          },
          {
            "path" : "\/documentation\/parseswift\/!=(_:_:)-4oylc",
            "title" : "func != <T>(String, Query<T>) -> QueryConstraint",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/parseswift\/!=(_:_:)-6f2gk",
            "title" : "func != <T>(String, T) throws -> QueryConstraint",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/parseswift\/!=(_:_:)-8iwik",
            "title" : "func != <T>(String, T) -> QueryConstraint",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/parseswift\/==(_:_:)-5jg5t",
            "title" : "func == <T>(String, T) -> QueryConstraint",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/parseswift\/==(_:_:)-8pl0h",
            "title" : "func == <T>(String, T) throws -> QueryConstraint",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/parseswift\/==(_:_:)-998hz",
            "title" : "func == <T>(String, Query<T>) -> QueryConstraint",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/parseswift\/_(_:_:)-35vq2",
            "title" : "func > <T>(String, T) -> QueryConstraint",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/parseswift\/_(_:_:)-4bsb2",
            "title" : "func < <T>(String, T) -> QueryConstraint",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/parseswift\/_=(_:_:)-434pw",
            "title" : "func >= <T>(String, T) -> QueryConstraint",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/parseswift\/_=(_:_:)-6tzg",
            "title" : "func <= <T>(String, T) -> QueryConstraint",
            "type" : "op"
          },
          {
            "title" : "Type Aliases",
            "type" : "groupMarker"
          },
          {
            "path" : "\/documentation\/parseswift\/parsehealth",
            "title" : "ParseHealth",
            "type" : "typealias"
          },
          {
            "title" : "Enumerations",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Operators",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/event\/==(_:_:)",
                "title" : "static func == <U>(Event<U>, Event<U>) -> Bool",
                "type" : "op"
              },
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/event\/created(_:)",
                "title" : "case created(T)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/event\/deleted(_:)",
                "title" : "case deleted(T)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/event\/entered(_:)",
                "title" : "case entered(T)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/event\/left(_:)",
                "title" : "case left(T)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/event\/updated(_:)",
                "title" : "case updated(T)",
                "type" : "case"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/event\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/event\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/event",
            "title" : "Event",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobject\/config",
                "title" : "case config",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobject\/file",
                "title" : "case file",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobject\/livequeryconnect",
                "title" : "case liveQueryConnect",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobject\/object(_:)",
                "title" : "case object(any ParseObject)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobject\/objecttype(_:)",
                "title" : "case objectType(any ParseObject.Type)",
                "type" : "case"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobject\/classname",
                "title" : "var className: String",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsehooktriggerobject",
            "title" : "ParseHookTriggerObject",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggertype\/afterdelete",
                "title" : "case afterDelete",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggertype\/afterevent",
                "title" : "case afterEvent",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggertype\/afterfind",
                "title" : "case afterFind",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggertype\/afterlogin",
                "title" : "case afterLogin",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggertype\/afterlogout",
                "title" : "case afterLogout",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggertype\/aftersave",
                "title" : "case afterSave",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggertype\/beforeconnect",
                "title" : "case beforeConnect",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggertype\/beforedelete",
                "title" : "case beforeDelete",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggertype\/beforefind",
                "title" : "case beforeFind",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggertype\/beforelogin",
                "title" : "case beforeLogin",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggertype\/beforesave",
                "title" : "case beforeSave",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggertype\/beforesubscribe",
                "title" : "case beforeSubscribe",
                "type" : "case"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggertype\/init(rawvalue:)",
                "title" : "init?(rawValue: String)",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggertype\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehooktriggertype\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggertype\/init(from:)",
                    "title" : "init(from: any Decoder) throws",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggertype\/hashvalue",
                    "title" : "var hashValue: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggertype\/encode(to:)",
                    "title" : "func encode(to: any Encoder) throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggertype\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehooktriggertype\/rawrepresentable-implementations",
                "title" : "RawRepresentable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsehooktriggertype",
            "title" : "ParseHookTriggerType",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationcommand\/add",
                "title" : "case add",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationcommand\/addrelation",
                "title" : "case addRelation",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationcommand\/addunique",
                "title" : "case addUnique",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationcommand\/batch",
                "title" : "case batch",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationcommand\/delete",
                "title" : "case delete",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationcommand\/increment",
                "title" : "case increment",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationcommand\/remove",
                "title" : "case remove",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationcommand\/removerelation",
                "title" : "case removeRelation",
                "type" : "case"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationcommand\/init(rawvalue:)",
                "title" : "init?(rawValue: String)",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationcommand\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationcommand\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationcommand\/init(from:)",
                    "title" : "init(from: any Decoder) throws",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationcommand\/hashvalue",
                    "title" : "var hashValue: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationcommand\/encode(to:)",
                    "title" : "func encode(to: any Encoder) throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationcommand\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationcommand\/rawrepresentable-implementations",
                "title" : "RawRepresentable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseoperationcommand",
            "title" : "ParseOperationCommand",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsetextoption\/casesensitive",
                "title" : "case caseSensitive",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parsetextoption\/diacriticsensitive",
                "title" : "case diacriticSensitive",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parsetextoption\/language",
                "title" : "case language",
                "type" : "case"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsetextoption\/init(rawvalue:)",
                "title" : "init?(rawValue: String)",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetextoption\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsetextoption\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetextoption\/hashvalue",
                    "title" : "var hashValue: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetextoption\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsetextoption\/rawrepresentable-implementations",
                "title" : "RawRepresentable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsetextoption",
            "title" : "ParseTextOption",
            "type" : "enum"
          }
        ],
        "path" : "\/documentation\/parseswift",
        "title" : "ParseSwift",
        "type" : "module"
      },
      {
        "children" : [
          {
            "title" : "Protocols",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Operators",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/realmodule\/algebraicfield\/_(_:_:)-9bcy2",
                        "title" : "static func \/ (Self, Self) -> Self",
                        "type" : "op"
                      }
                    ],
                    "title" : "AlgebraicField Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/realmodule\/algebraicfield\/_(_:_:)-9nuhy",
                "title" : "static func \/ (Self, Self) -> Self",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/realmodule\/algebraicfield\/_=(_:_:)",
                "title" : "static func \/= (inout Self, Self)",
                "type" : "op"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/realmodule\/algebraicfield\/reciprocal-6sp2m",
                        "title" : "var reciprocal: Self?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/realmodule\/algebraicfield\/reciprocal-5zww8",
                        "title" : "var reciprocal: Self?",
                        "type" : "property"
                      }
                    ],
                    "title" : "AlgebraicField Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/realmodule\/algebraicfield\/reciprocal-156o3",
                "title" : "var reciprocal: Self?",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/realmodule\/algebraicfield",
            "title" : "AlgebraicField",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/realmodule\/elementaryfunctions\/acos(_:)",
                "title" : "static func acos(Self) -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/realmodule\/elementaryfunctions\/acosh(_:)",
                "title" : "static func acosh(Self) -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/realmodule\/elementaryfunctions\/asin(_:)",
                "title" : "static func asin(Self) -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/realmodule\/elementaryfunctions\/asinh(_:)",
                "title" : "static func asinh(Self) -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/realmodule\/elementaryfunctions\/atan(_:)",
                "title" : "static func atan(Self) -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/realmodule\/elementaryfunctions\/atanh(_:)",
                "title" : "static func atanh(Self) -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/realmodule\/elementaryfunctions\/cos(_:)",
                "title" : "static func cos(Self) -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/realmodule\/elementaryfunctions\/cosh(_:)",
                "title" : "static func cosh(Self) -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/realmodule\/elementaryfunctions\/exp(_:)",
                "title" : "static func exp(Self) -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/realmodule\/elementaryfunctions\/expminusone(_:)",
                "title" : "static func expMinusOne(Self) -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/realmodule\/elementaryfunctions\/log(_:)",
                "title" : "static func log(Self) -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/realmodule\/elementaryfunctions\/log(oneplus:)",
                "title" : "static func log(onePlus: Self) -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/realmodule\/elementaryfunctions\/pow(_:_:)-2qmul",
                "title" : "static func pow(Self, Self) -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/realmodule\/elementaryfunctions\/pow(_:_:)-9imp6",
                "title" : "static func pow(Self, Int) -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/realmodule\/elementaryfunctions\/root(_:_:)",
                "title" : "static func root(Self, Int) -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/realmodule\/elementaryfunctions\/sin(_:)",
                "title" : "static func sin(Self) -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/realmodule\/elementaryfunctions\/sinh(_:)",
                "title" : "static func sinh(Self) -> Self",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/realmodule\/elementaryfunctions\/sqrt(_:)-579s1",
                        "title" : "static func sqrt(Self) -> Self",
                        "type" : "method"
                      }
                    ],
                    "title" : "ElementaryFunctions Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/realmodule\/elementaryfunctions\/sqrt(_:)-2phn9",
                "title" : "static func sqrt(Self) -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/realmodule\/elementaryfunctions\/tan(_:)",
                "title" : "static func tan(Self) -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/realmodule\/elementaryfunctions\/tanh(_:)",
                "title" : "static func tanh(Self) -> Self",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/realmodule\/elementaryfunctions",
            "title" : "ElementaryFunctions",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/realmodule\/real\/cosminusone(_:)",
                "title" : "static func cosMinusOne(Self) -> Self",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/realmodule\/real",
            "title" : "Real",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/realmodule\/realfunctions\/atan2(y:x:)",
                "title" : "static func atan2(y: Self, x: Self) -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/realmodule\/realfunctions\/erf(_:)",
                "title" : "static func erf(Self) -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/realmodule\/realfunctions\/erfc(_:)",
                "title" : "static func erfc(Self) -> Self",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/realmodule\/realfunctions\/exp10(_:)-3zh0i",
                        "title" : "static func exp10(Self) -> Self",
                        "type" : "method"
                      }
                    ],
                    "title" : "RealFunctions Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/realmodule\/realfunctions\/exp10(_:)-2hsp",
                "title" : "static func exp10(Self) -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/realmodule\/realfunctions\/exp2(_:)",
                "title" : "static func exp2(Self) -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/realmodule\/realfunctions\/gamma(_:)",
                "title" : "static func gamma(Self) -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/realmodule\/realfunctions\/hypot(_:_:)",
                "title" : "static func hypot(Self, Self) -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/realmodule\/realfunctions\/log10(_:)",
                "title" : "static func log10(Self) -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/realmodule\/realfunctions\/log2(_:)",
                "title" : "static func log2(Self) -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/realmodule\/realfunctions\/loggamma(_:)",
                "title" : "static func logGamma(Self) -> Self",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/realmodule\/realfunctions\/signgamma(_:)-53fqx",
                        "title" : "static func signGamma(Self) -> FloatingPointSign",
                        "type" : "method"
                      }
                    ],
                    "title" : "RealFunctions Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/realmodule\/realfunctions\/signgamma(_:)-lh4l",
                "title" : "static func signGamma(Self) -> FloatingPointSign",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/realmodule\/realfunctions",
            "title" : "RealFunctions",
            "type" : "protocol"
          },
          {
            "title" : "Enumerations",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/realmodule\/augmented\/fasttwosum(_:_:)",
                "title" : "static func fastTwoSum<T>(T, T) -> (head: T, tail: T)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/realmodule\/augmented\/product(_:_:)",
                "title" : "static func product<T>(T, T) -> (head: T, tail: T)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/realmodule\/augmented\/sum(large:small:)",
                "title" : "static func sum<T>(large: T, small: T) -> (head: T, tail: T)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/realmodule\/augmented\/twoprodfma(_:_:)",
                "title" : "static func twoProdFMA<T>(T, T) -> (head: T, tail: T)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/realmodule\/augmented",
            "title" : "Augmented",
            "type" : "enum"
          }
        ],
        "path" : "\/documentation\/realmodule",
        "title" : "RealModule",
        "type" : "module"
      },
      {
        "children" : [
          {
            "title" : "Protocols",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/servicecontextmodule\/servicecontextkey\/value",
                "title" : "Value",
                "type" : "associatedtype"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/servicecontextmodule\/servicecontextkey\/nameoverride-5psa2",
                        "title" : "static var nameOverride: String?",
                        "type" : "property"
                      }
                    ],
                    "title" : "ServiceContextKey Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/servicecontextmodule\/servicecontextkey\/nameoverride-6shk1",
                "title" : "static var nameOverride: String?",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/servicecontextmodule\/servicecontextkey",
            "title" : "ServiceContextKey",
            "type" : "protocol"
          },
          {
            "title" : "Structures",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/servicecontextmodule\/anyservicecontextkey\/keytype",
                "title" : "let keyType: Any.Type",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/servicecontextmodule\/anyservicecontextkey\/name",
                "title" : "var name: String",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/servicecontextmodule\/anyservicecontextkey\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/servicecontextmodule\/anyservicecontextkey\/==(_:_:)",
                    "title" : "static func == (AnyServiceContextKey, AnyServiceContextKey) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/servicecontextmodule\/anyservicecontextkey\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/servicecontextmodule\/anyservicecontextkey\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/servicecontextmodule\/anyservicecontextkey\/hashable-implementations",
                "title" : "Hashable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/servicecontextmodule\/anyservicecontextkey",
            "title" : "AnyServiceContextKey",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/servicecontextmodule\/servicecontext\/count",
                "title" : "var count: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/servicecontextmodule\/servicecontext\/isempty",
                "title" : "var isEmpty: Bool",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/servicecontextmodule\/servicecontext\/foreach(_:)",
                "title" : "func forEach((AnyServiceContextKey, Any) throws -> Void) rethrows",
                "type" : "method"
              },
              {
                "title" : "Subscripts",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/servicecontextmodule\/servicecontext\/subscript(_:)",
                "title" : "subscript<Key>(Key.Type) -> Key.Value?",
                "type" : "subscript"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/servicecontextmodule\/servicecontext\/current",
                "title" : "static var current: ServiceContext?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/servicecontextmodule\/servicecontext\/toplevel",
                "title" : "static var topLevel: ServiceContext",
                "type" : "property"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/servicecontextmodule\/servicecontext\/todo(_:function:file:line:)",
                "title" : "static func TODO(StaticString?, function: String, file: String, line: UInt) -> ServiceContext",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/servicecontextmodule\/servicecontext\/withvalue(_:isolation:operation:)",
                "title" : "static func withValue<T>(ServiceContext?, isolation: isolated (any Actor)?, operation: () async throws -> T) async rethrows -> T",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/servicecontextmodule\/servicecontext\/withvalue(_:operation:)-3tddk",
                "title" : "static func withValue<T>(ServiceContext?, operation: () async throws -> T) async rethrows -> T",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/servicecontextmodule\/servicecontext\/withvalue(_:operation:)-4f7xo",
                "title" : "static func withValue<T>(ServiceContext?, operation: () throws -> T) rethrows -> T",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/servicecontextmodule\/servicecontext",
            "title" : "ServiceContext",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/servicecontextmodule\/todolocation\/file",
                "title" : "let file: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/servicecontextmodule\/todolocation\/line",
                "title" : "let line: UInt",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/servicecontextmodule\/todolocation",
            "title" : "TODOLocation",
            "type" : "struct"
          }
        ],
        "path" : "\/documentation\/servicecontextmodule",
        "title" : "ServiceContextModule",
        "type" : "module"
      },
      {
        "children" : [
          {
            "title" : "Protocols",
            "type" : "groupMarker"
          },
          {
            "path" : "\/documentation\/systempackage\/machportright",
            "title" : "MachPortRight",
            "type" : "protocol"
          },
          {
            "title" : "Structures",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Operators",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/~=(_:_:)",
                "title" : "static func ~= (Errno, Error) -> Bool",
                "type" : "op"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/init(rawvalue:)",
                "title" : "init(rawValue: CInt)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/rawvalue",
                "title" : "let rawValue: CInt",
                "type" : "property"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/addressfamilynotsupported",
                "title" : "static var addressFamilyNotSupported: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/addressinuse",
                "title" : "static var addressInUse: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/addressnotavailable",
                "title" : "static var addressNotAvailable: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/addressrequired",
                "title" : "static var addressRequired: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/alreadyinprocess",
                "title" : "static var alreadyInProcess: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/arglisttoolong",
                "title" : "static var argListTooLong: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/attributenotfound",
                "title" : "static var attributeNotFound: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/authenticationerror",
                "title" : "static var authenticationError: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/badaddress",
                "title" : "static var badAddress: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/badcputype",
                "title" : "static var badCPUType: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/badexecutable",
                "title" : "static var badExecutable: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/badfiledescriptor",
                "title" : "static var badFileDescriptor: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/badfiletypeorformat",
                "title" : "static var badFileTypeOrFormat: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/badmessage",
                "title" : "static var badMessage: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/brokenpipe",
                "title" : "static var brokenPipe: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/canceled",
                "title" : "static var canceled: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/connectionabort",
                "title" : "static var connectionAbort: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/connectionrefused",
                "title" : "static var connectionRefused: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/connectionreset",
                "title" : "static var connectionReset: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/deadlock",
                "title" : "static var deadlock: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/deviceerror",
                "title" : "static var deviceError: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/devicepowerisoff",
                "title" : "static var devicePowerIsOff: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/directorynotempty",
                "title" : "static var directoryNotEmpty: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/diskquotaexceeded",
                "title" : "static var diskQuotaExceeded: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/execformaterror",
                "title" : "static var execFormatError: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/fileexists",
                "title" : "static var fileExists: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/filenametoolong",
                "title" : "static var fileNameTooLong: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/filetoolarge",
                "title" : "static var fileTooLarge: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/hostisdown",
                "title" : "static var hostIsDown: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/identifierremoved",
                "title" : "static var identifierRemoved: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/illegalbytesequence",
                "title" : "static var illegalByteSequence: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/illegalseek",
                "title" : "static var illegalSeek: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/improperlink",
                "title" : "static var improperLink: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/inappropriateioctlfordevice",
                "title" : "static var inappropriateIOCTLForDevice: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/interrupted",
                "title" : "static var interrupted: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/invalidargument",
                "title" : "static var invalidArgument: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/ioerror",
                "title" : "static var ioError: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/isdirectory",
                "title" : "static var isDirectory: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/lasterrnovalue",
                "title" : "static var lastErrnoValue: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/malformedmacho",
                "title" : "static var malformedMachO: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/messagetoolong",
                "title" : "static var messageTooLong: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/multihop",
                "title" : "static var multiHop: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/needauthenticator",
                "title" : "static var needAuthenticator: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/networkdown",
                "title" : "static var networkDown: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/networkreset",
                "title" : "static var networkReset: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/networkunreachable",
                "title" : "static var networkUnreachable: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/nobufferspace",
                "title" : "static var noBufferSpace: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/nochildprocess",
                "title" : "static var noChildProcess: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/nodata",
                "title" : "static var noData: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/nofunction",
                "title" : "static var noFunction: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/nolink",
                "title" : "static var noLink: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/nolocks",
                "title" : "static var noLocks: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/nomemory",
                "title" : "static var noMemory: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/nomessage",
                "title" : "static var noMessage: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/noroutetohost",
                "title" : "static var noRouteToHost: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/nospace",
                "title" : "static var noSpace: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/nostreamresources",
                "title" : "static var noStreamResources: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/nosuchaddressordevice",
                "title" : "static var noSuchAddressOrDevice: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/nosuchfileordirectory",
                "title" : "static var noSuchFileOrDirectory: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/nosuchpolicy",
                "title" : "static var noSuchPolicy: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/nosuchprocess",
                "title" : "static var noSuchProcess: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/notblockdevice",
                "title" : "static var notBlockDevice: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/notdirectory",
                "title" : "static var notDirectory: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/notpermitted",
                "title" : "static var notPermitted: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/notrecoverable",
                "title" : "static var notRecoverable: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/notsocket",
                "title" : "static var notSocket: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/notstream",
                "title" : "static var notStream: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/notsupported",
                "title" : "static var notSupported: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/notsupportedonsocket",
                "title" : "static var notSupportedOnSocket: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/notused",
                "title" : "static var notUsed: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/nowinprogress",
                "title" : "static var nowInProgress: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/operationnotsupportedbydevice",
                "title" : "static var operationNotSupportedByDevice: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/outofdomain",
                "title" : "static var outOfDomain: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/outofrange",
                "title" : "static var outOfRange: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/outputqueuefull",
                "title" : "static var outputQueueFull: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/overflow",
                "title" : "static var overflow: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/permissiondenied",
                "title" : "static var permissionDenied: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/previousownerdied",
                "title" : "static var previousOwnerDied: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/protocolerror",
                "title" : "static var protocolError: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/protocolfamilynotsupported",
                "title" : "static var protocolFamilyNotSupported: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/protocolnotavailable",
                "title" : "static var protocolNotAvailable: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/protocolnotsupported",
                "title" : "static var protocolNotSupported: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/protocolwrongtypeforsocket",
                "title" : "static var protocolWrongTypeForSocket: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/readonlyfilesystem",
                "title" : "static var readOnlyFileSystem: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/resourcebusy",
                "title" : "static var resourceBusy: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/resourcetemporarilyunavailable",
                "title" : "static var resourceTemporarilyUnavailable: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/rpcprocedureunavailable",
                "title" : "static var rpcProcedureUnavailable: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/rpcprogramunavailable",
                "title" : "static var rpcProgramUnavailable: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/rpcprogramversionmismatch",
                "title" : "static var rpcProgramVersionMismatch: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/rpcunsuccessful",
                "title" : "static var rpcUnsuccessful: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/rpcversionmismatch",
                "title" : "static var rpcVersionMismatch: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/sharedlibraryversionmismatch",
                "title" : "static var sharedLibraryVersionMismatch: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/socketisconnected",
                "title" : "static var socketIsConnected: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/socketnotconnected",
                "title" : "static var socketNotConnected: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/socketshutdown",
                "title" : "static var socketShutdown: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/sockettypenotsupported",
                "title" : "static var socketTypeNotSupported: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/stalenfsfilehandle",
                "title" : "static var staleNFSFileHandle: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/textfilebusy",
                "title" : "static var textFileBusy: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/timedout",
                "title" : "static var timedOut: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/timeout",
                "title" : "static var timeout: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/toomanylinks",
                "title" : "static var tooManyLinks: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/toomanyopenfiles",
                "title" : "static var tooManyOpenFiles: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/toomanyopenfilesinsystem",
                "title" : "static var tooManyOpenFilesInSystem: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/toomanyprocesses",
                "title" : "static var tooManyProcesses: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/toomanyreferences",
                "title" : "static var tooManyReferences: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/toomanyremotelevels",
                "title" : "static var tooManyRemoteLevels: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/toomanysymboliclinklevels",
                "title" : "static var tooManySymbolicLinkLevels: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/toomanyusers",
                "title" : "static var tooManyUsers: Errno",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/errno\/wouldblock",
                "title" : "static var wouldBlock: Errno",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/errno\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/systempackage\/errno\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/errno\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/systempackage\/errno\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/errno\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/systempackage\/errno\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/errno\/init(from:)",
                    "title" : "init(from: any Decoder) throws",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/errno\/hashvalue",
                    "title" : "var hashValue: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/errno\/encode(to:)",
                    "title" : "func encode(to: any Encoder) throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/errno\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/systempackage\/errno\/rawrepresentable-implementations",
                "title" : "RawRepresentable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/systempackage\/errno",
            "title" : "Errno",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filedescriptor\/accessmode\/init(rawvalue:)",
                    "title" : "init(rawValue: CInt)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filedescriptor\/accessmode\/rawvalue",
                    "title" : "var rawValue: CInt",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filedescriptor\/accessmode\/readonly",
                    "title" : "static var readOnly: AccessMode",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filedescriptor\/accessmode\/readwrite",
                    "title" : "static var readWrite: AccessMode",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filedescriptor\/accessmode\/writeonly",
                    "title" : "static var writeOnly: AccessMode",
                    "type" : "property"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filedescriptor\/accessmode\/debugdescription",
                        "title" : "var debugDescription: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/systempackage\/filedescriptor\/accessmode\/customdebugstringconvertible-implementations",
                    "title" : "CustomDebugStringConvertible Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filedescriptor\/accessmode\/description",
                        "title" : "var description: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/systempackage\/filedescriptor\/accessmode\/customstringconvertible-implementations",
                    "title" : "CustomStringConvertible Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filedescriptor\/accessmode\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/systempackage\/filedescriptor\/accessmode\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filedescriptor\/accessmode\/init(from:)",
                        "title" : "init(from: any Decoder) throws",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filedescriptor\/accessmode\/hashvalue",
                        "title" : "var hashValue: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filedescriptor\/accessmode\/encode(to:)",
                        "title" : "func encode(to: any Encoder) throws",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filedescriptor\/accessmode\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/systempackage\/filedescriptor\/accessmode\/rawrepresentable-implementations",
                    "title" : "RawRepresentable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/systempackage\/filedescriptor\/accessmode",
                "title" : "FileDescriptor.AccessMode",
                "type" : "struct"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filedescriptor\/openoptions\/init(rawvalue:)",
                    "title" : "init(rawValue: CInt)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filedescriptor\/openoptions\/rawvalue",
                    "title" : "var rawValue: CInt",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filedescriptor\/openoptions\/append",
                    "title" : "static var append: OpenOptions",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filedescriptor\/openoptions\/closeonexec",
                    "title" : "static var closeOnExec: OpenOptions",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filedescriptor\/openoptions\/create",
                    "title" : "static var create: OpenOptions",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filedescriptor\/openoptions\/directory",
                    "title" : "static var directory: OpenOptions",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filedescriptor\/openoptions\/eventonly",
                    "title" : "static var eventOnly: OpenOptions",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filedescriptor\/openoptions\/exclusivecreate",
                    "title" : "static var exclusiveCreate: OpenOptions",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filedescriptor\/openoptions\/exclusivelock",
                    "title" : "static var exclusiveLock: OpenOptions",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filedescriptor\/openoptions\/nofollow",
                    "title" : "static var noFollow: OpenOptions",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filedescriptor\/openoptions\/nonblocking",
                    "title" : "static var nonBlocking: OpenOptions",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filedescriptor\/openoptions\/sharedlock",
                    "title" : "static var sharedLock: OpenOptions",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filedescriptor\/openoptions\/symlink",
                    "title" : "static var symlink: OpenOptions",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filedescriptor\/openoptions\/truncate",
                    "title" : "static var truncate: OpenOptions",
                    "type" : "property"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filedescriptor\/openoptions\/debugdescription",
                        "title" : "var debugDescription: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/systempackage\/filedescriptor\/openoptions\/customdebugstringconvertible-implementations",
                    "title" : "CustomDebugStringConvertible Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filedescriptor\/openoptions\/description",
                        "title" : "var description: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/systempackage\/filedescriptor\/openoptions\/customstringconvertible-implementations",
                    "title" : "CustomStringConvertible Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filedescriptor\/openoptions\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/systempackage\/filedescriptor\/openoptions\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filedescriptor\/openoptions\/init()",
                        "title" : "init()",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filedescriptor\/openoptions\/contains(_:)",
                        "title" : "func contains(Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filedescriptor\/openoptions\/formintersection(_:)",
                        "title" : "func formIntersection(Self)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filedescriptor\/openoptions\/formsymmetricdifference(_:)",
                        "title" : "func formSymmetricDifference(Self)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filedescriptor\/openoptions\/formunion(_:)",
                        "title" : "func formUnion(Self)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filedescriptor\/openoptions\/insert(_:)",
                        "title" : "func insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filedescriptor\/openoptions\/intersection(_:)",
                        "title" : "func intersection(Self) -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filedescriptor\/openoptions\/remove(_:)",
                        "title" : "func remove(Self.Element) -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filedescriptor\/openoptions\/symmetricdifference(_:)",
                        "title" : "func symmetricDifference(Self) -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filedescriptor\/openoptions\/union(_:)",
                        "title" : "func union(Self) -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filedescriptor\/openoptions\/update(with:)",
                        "title" : "func update(with: Self.Element) -> Self.Element?",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/systempackage\/filedescriptor\/openoptions\/optionset-implementations",
                    "title" : "OptionSet Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filedescriptor\/openoptions\/init(from:)",
                        "title" : "init(from: any Decoder) throws",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filedescriptor\/openoptions\/hashvalue",
                        "title" : "var hashValue: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filedescriptor\/openoptions\/encode(to:)",
                        "title" : "func encode(to: any Encoder) throws",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filedescriptor\/openoptions\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/systempackage\/filedescriptor\/openoptions\/rawrepresentable-implementations",
                    "title" : "RawRepresentable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filedescriptor\/openoptions\/init(_:)",
                        "title" : "init<S>(S)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filedescriptor\/openoptions\/init(arrayliteral:)",
                        "title" : "init(arrayLiteral: Self.Element...)",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filedescriptor\/openoptions\/isempty",
                        "title" : "var isEmpty: Bool",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filedescriptor\/openoptions\/isdisjoint(with:)",
                        "title" : "func isDisjoint(with: Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filedescriptor\/openoptions\/isstrictsubset(of:)",
                        "title" : "func isStrictSubset(of: Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filedescriptor\/openoptions\/isstrictsuperset(of:)",
                        "title" : "func isStrictSuperset(of: Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filedescriptor\/openoptions\/issubset(of:)",
                        "title" : "func isSubset(of: Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filedescriptor\/openoptions\/issuperset(of:)",
                        "title" : "func isSuperset(of: Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filedescriptor\/openoptions\/subtract(_:)",
                        "title" : "func subtract(Self)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filedescriptor\/openoptions\/subtracting(_:)",
                        "title" : "func subtracting(Self) -> Self",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/systempackage\/filedescriptor\/openoptions\/setalgebra-implementations",
                    "title" : "SetAlgebra Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/systempackage\/filedescriptor\/openoptions",
                "title" : "FileDescriptor.OpenOptions",
                "type" : "struct"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filedescriptor\/seekorigin\/init(rawvalue:)",
                    "title" : "init(rawValue: CInt)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filedescriptor\/seekorigin\/rawvalue",
                    "title" : "var rawValue: CInt",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filedescriptor\/seekorigin\/current",
                    "title" : "static var current: SeekOrigin",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filedescriptor\/seekorigin\/end",
                    "title" : "static var end: SeekOrigin",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filedescriptor\/seekorigin\/nextdata",
                    "title" : "static var nextData: SeekOrigin",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filedescriptor\/seekorigin\/nexthole",
                    "title" : "static var nextHole: SeekOrigin",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filedescriptor\/seekorigin\/start",
                    "title" : "static var start: SeekOrigin",
                    "type" : "property"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filedescriptor\/seekorigin\/debugdescription",
                        "title" : "var debugDescription: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/systempackage\/filedescriptor\/seekorigin\/customdebugstringconvertible-implementations",
                    "title" : "CustomDebugStringConvertible Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filedescriptor\/seekorigin\/description",
                        "title" : "var description: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/systempackage\/filedescriptor\/seekorigin\/customstringconvertible-implementations",
                    "title" : "CustomStringConvertible Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filedescriptor\/seekorigin\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/systempackage\/filedescriptor\/seekorigin\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filedescriptor\/seekorigin\/init(from:)",
                        "title" : "init(from: any Decoder) throws",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filedescriptor\/seekorigin\/hashvalue",
                        "title" : "var hashValue: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filedescriptor\/seekorigin\/encode(to:)",
                        "title" : "func encode(to: any Encoder) throws",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filedescriptor\/seekorigin\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/systempackage\/filedescriptor\/seekorigin\/rawrepresentable-implementations",
                    "title" : "RawRepresentable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/systempackage\/filedescriptor\/seekorigin",
                "title" : "FileDescriptor.SeekOrigin",
                "type" : "struct"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/systempackage\/filedescriptor\/init(rawvalue:)",
                "title" : "init(rawValue: CInt)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/systempackage\/filedescriptor\/rawvalue",
                "title" : "let rawValue: CInt",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/systempackage\/filedescriptor\/close()",
                "title" : "func close() throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/systempackage\/filedescriptor\/closeafter(_:)",
                "title" : "func closeAfter<R>(() throws -> R) throws -> R",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/systempackage\/filedescriptor\/duplicate(as:retryoninterrupt:)",
                "title" : "func duplicate(as: FileDescriptor?, retryOnInterrupt: Bool) throws -> FileDescriptor",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/systempackage\/filedescriptor\/read(fromabsoluteoffset:into:retryoninterrupt:)",
                "title" : "func read(fromAbsoluteOffset: Int64, into: UnsafeMutableRawBufferPointer, retryOnInterrupt: Bool) throws -> Int",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/systempackage\/filedescriptor\/read(into:retryoninterrupt:)",
                "title" : "func read(into: UnsafeMutableRawBufferPointer, retryOnInterrupt: Bool) throws -> Int",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/systempackage\/filedescriptor\/resize(to:retryoninterrupt:)",
                "title" : "func resize(to: Int64, retryOnInterrupt: Bool) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/systempackage\/filedescriptor\/seek(offset:from:)",
                "title" : "func seek(offset: Int64, from: FileDescriptor.SeekOrigin) throws -> Int64",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/systempackage\/filedescriptor\/write(_:retryoninterrupt:)",
                "title" : "func write(UnsafeRawBufferPointer, retryOnInterrupt: Bool) throws -> Int",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/systempackage\/filedescriptor\/write(toabsoluteoffset:_:retryoninterrupt:)",
                "title" : "func write(toAbsoluteOffset: Int64, UnsafeRawBufferPointer, retryOnInterrupt: Bool) throws -> Int",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/systempackage\/filedescriptor\/writeall(_:)",
                "title" : "func writeAll<S>(S) throws -> Int",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/systempackage\/filedescriptor\/writeall(toabsoluteoffset:_:)",
                "title" : "func writeAll<S>(toAbsoluteOffset: Int64, S) throws -> Int",
                "type" : "method"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/systempackage\/filedescriptor\/standarderror",
                "title" : "static var standardError: FileDescriptor",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/filedescriptor\/standardinput",
                "title" : "static var standardInput: FileDescriptor",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/filedescriptor\/standardoutput",
                "title" : "static var standardOutput: FileDescriptor",
                "type" : "property"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/systempackage\/filedescriptor\/open(_:_:options:permissions:retryoninterrupt:)-2266j",
                "title" : "static func open(FilePath, FileDescriptor.AccessMode, options: FileDescriptor.OpenOptions, permissions: FilePermissions?, retryOnInterrupt: Bool) throws -> FileDescriptor",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/systempackage\/filedescriptor\/open(_:_:options:permissions:retryoninterrupt:)-8iaux",
                "title" : "static func open(UnsafePointer<CChar>, FileDescriptor.AccessMode, options: FileDescriptor.OpenOptions, permissions: FilePermissions?, retryOnInterrupt: Bool) throws -> FileDescriptor",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/systempackage\/filedescriptor\/pipe()",
                "title" : "static func pipe() throws -> (readEnd: FileDescriptor, writeEnd: FileDescriptor)",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filedescriptor\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/systempackage\/filedescriptor\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filedescriptor\/init(from:)",
                    "title" : "init(from: any Decoder) throws",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filedescriptor\/hashvalue",
                    "title" : "var hashValue: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filedescriptor\/encode(to:)",
                    "title" : "func encode(to: any Encoder) throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filedescriptor\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/systempackage\/filedescriptor\/rawrepresentable-implementations",
                "title" : "RawRepresentable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/systempackage\/filedescriptor",
            "title" : "FileDescriptor",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filepath\/component\/init(_:)",
                    "title" : "init?(String)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filepath\/component\/init(platformstring:)-3u5mh",
                    "title" : "init?(platformString: [CInterop.PlatformChar])",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filepath\/component\/init(platformstring:)-63o9d",
                    "title" : "init?(platformString: UnsafePointer<CInterop.PlatformChar>)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filepath\/component\/init(platformstring:)-6b3wh",
                    "title" : "init?(platformString: String)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filepath\/component\/init(platformstring:)-ift5",
                    "title" : "init?(platformString: inout CInterop.PlatformChar)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filepath\/component\/extension",
                    "title" : "var `extension`: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filepath\/component\/kind-swift.property",
                    "title" : "var kind: Kind",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filepath\/component\/stem",
                    "title" : "var stem: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filepath\/component\/string",
                    "title" : "var string: String",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filepath\/component\/withplatformstring(_:)",
                    "title" : "func withPlatformString<Result>((UnsafePointer<CInterop.PlatformChar>) throws -> Result) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "title" : "Enumerations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Enumeration Cases",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/component\/kind-swift.enum\/currentdirectory",
                        "title" : "case currentDirectory",
                        "type" : "case"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/component\/kind-swift.enum\/parentdirectory",
                        "title" : "case parentDirectory",
                        "type" : "case"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/component\/kind-swift.enum\/regular",
                        "title" : "case regular",
                        "type" : "case"
                      },
                      {
                        "title" : "Default Implementations",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Operators",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/systempackage\/filepath\/component\/kind-swift.enum\/!=(_:_:)",
                            "title" : "static func != (Self, Self) -> Bool",
                            "type" : "op"
                          }
                        ],
                        "path" : "\/documentation\/systempackage\/filepath\/component\/kind-swift.enum\/equatable-implementations",
                        "title" : "Equatable Implementations",
                        "type" : "symbol"
                      }
                    ],
                    "path" : "\/documentation\/systempackage\/filepath\/component\/kind-swift.enum",
                    "title" : "FilePath.Component.Kind",
                    "type" : "enum"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/component\/debugdescription",
                        "title" : "var debugDescription: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/systempackage\/filepath\/component\/customdebugstringconvertible-implementations",
                    "title" : "CustomDebugStringConvertible Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/component\/description",
                        "title" : "var description: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/systempackage\/filepath\/component\/customstringconvertible-implementations",
                    "title" : "CustomStringConvertible Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/component\/init(from:)",
                        "title" : "init(from: any Decoder) throws",
                        "type" : "init"
                      }
                    ],
                    "path" : "\/documentation\/systempackage\/filepath\/component\/decodable-implementations",
                    "title" : "Decodable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/component\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/systempackage\/filepath\/component\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/component\/init(extendedgraphemeclusterliteral:)",
                        "title" : "init(extendedGraphemeClusterLiteral: Self.StringLiteralType)",
                        "type" : "init"
                      }
                    ],
                    "path" : "\/documentation\/systempackage\/filepath\/component\/expressiblebyextendedgraphemeclusterliteral-implementations",
                    "title" : "ExpressibleByExtendedGraphemeClusterLiteral Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/component\/init(stringliteral:)",
                        "title" : "init(stringLiteral: String)",
                        "type" : "init"
                      }
                    ],
                    "path" : "\/documentation\/systempackage\/filepath\/component\/expressiblebystringliteral-implementations",
                    "title" : "ExpressibleByStringLiteral Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/component\/init(unicodescalarliteral:)",
                        "title" : "init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)",
                        "type" : "init"
                      }
                    ],
                    "path" : "\/documentation\/systempackage\/filepath\/component\/expressiblebyunicodescalarliteral-implementations",
                    "title" : "ExpressibleByUnicodeScalarLiteral Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/systempackage\/filepath\/component",
                "title" : "FilePath.Component",
                "type" : "struct"
              },
              {
                "children" : [
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/last",
                        "title" : "var last: Self.Element?",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/difference(from:)",
                        "title" : "func difference<C>(from: C) -> CollectionDifference<Self.Element>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/difference(from:by:)",
                        "title" : "func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/distance(from:to:)",
                        "title" : "func distance(from: Self.Index, to: Self.Index) -> Int",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/droplast(_:)",
                        "title" : "func dropLast(Int) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/formindex(before:)",
                        "title" : "func formIndex(before: inout Self.Index)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/index(_:offsetby:)",
                        "title" : "func index(Self.Index, offsetBy: Int) -> Self.Index",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/index(_:offsetby:limitedby:)",
                        "title" : "func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/index(after:)",
                        "title" : "func index(after: Index) -> Index",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/index(before:)",
                        "title" : "func index(before: Index) -> Index",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/last(where:)",
                        "title" : "func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/lastindex(of:)",
                        "title" : "func lastIndex(of: Self.Element) -> Self.Index?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/lastindex(where:)",
                        "title" : "func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/reversed()",
                        "title" : "func reversed() -> ReversedCollection<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/suffix(_:)",
                        "title" : "func suffix(Int) -> Self.SubSequence",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/systempackage\/filepath\/componentview\/bidirectionalcollection-implementations",
                    "title" : "BidirectionalCollection Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Structures",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Operators",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/systempackage\/filepath\/componentview\/index\/_(_:_:)-1mqnj",
                            "title" : "static func < (`Self`, `Self`) -> Bool",
                            "type" : "op"
                          },
                          {
                            "title" : "Default Implementations",
                            "type" : "groupMarker"
                          },
                          {
                            "children" : [
                              {
                                "title" : "Operators",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/systempackage\/filepath\/componentview\/index\/'...(_:)-208z1",
                                "title" : "static func ... (Self) -> PartialRangeThrough<Self>",
                                "type" : "op"
                              },
                              {
                                "path" : "\/documentation\/systempackage\/filepath\/componentview\/index\/'...(_:)-6ykte",
                                "title" : "static func ... (Self) -> PartialRangeFrom<Self>",
                                "type" : "op"
                              },
                              {
                                "path" : "\/documentation\/systempackage\/filepath\/componentview\/index\/'...(_:_:)",
                                "title" : "static func ... (Self, Self) -> ClosedRange<Self>",
                                "type" : "op"
                              },
                              {
                                "path" : "\/documentation\/systempackage\/filepath\/componentview\/index\/'.._(_:)",
                                "title" : "static func ..< (Self) -> PartialRangeUpTo<Self>",
                                "type" : "op"
                              },
                              {
                                "path" : "\/documentation\/systempackage\/filepath\/componentview\/index\/'.._(_:_:)",
                                "title" : "static func ..< (Self, Self) -> Range<Self>",
                                "type" : "op"
                              },
                              {
                                "path" : "\/documentation\/systempackage\/filepath\/componentview\/index\/_(_:_:)-1umwl",
                                "title" : "static func > (Self, Self) -> Bool",
                                "type" : "op"
                              },
                              {
                                "path" : "\/documentation\/systempackage\/filepath\/componentview\/index\/_=(_:_:)-7xi5l",
                                "title" : "static func <= (Self, Self) -> Bool",
                                "type" : "op"
                              },
                              {
                                "path" : "\/documentation\/systempackage\/filepath\/componentview\/index\/_=(_:_:)-97rg7",
                                "title" : "static func >= (Self, Self) -> Bool",
                                "type" : "op"
                              }
                            ],
                            "path" : "\/documentation\/systempackage\/filepath\/componentview\/index\/comparable-implementations",
                            "title" : "Comparable Implementations",
                            "type" : "symbol"
                          },
                          {
                            "children" : [
                              {
                                "title" : "Operators",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/systempackage\/filepath\/componentview\/index\/!=(_:_:)",
                                "title" : "static func != (Self, Self) -> Bool",
                                "type" : "op"
                              }
                            ],
                            "path" : "\/documentation\/systempackage\/filepath\/componentview\/index\/equatable-implementations",
                            "title" : "Equatable Implementations",
                            "type" : "symbol"
                          }
                        ],
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/index",
                        "title" : "FilePath.ComponentView.Index",
                        "type" : "struct"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/count",
                        "title" : "var count: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/endindex",
                        "title" : "var endIndex: Index",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/first",
                        "title" : "var first: Self.Element?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/indices",
                        "title" : "var indices: DefaultIndices<Self>",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/isempty",
                        "title" : "var isEmpty: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/startindex",
                        "title" : "var startIndex: Index",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/underestimatedcount",
                        "title" : "var underestimatedCount: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/drop(while:)",
                        "title" : "func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/dropfirst(_:)",
                        "title" : "func dropFirst(Int) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/firstindex(of:)",
                        "title" : "func firstIndex(of: Self.Element) -> Self.Index?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/firstindex(where:)",
                        "title" : "func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/firstrange(of:)",
                        "title" : "func firstRange<C>(of: C) -> Range<Self.Index>?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/formindex(_:offsetby:)",
                        "title" : "func formIndex(inout Self.Index, offsetBy: Int)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/formindex(_:offsetby:limitedby:)",
                        "title" : "func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/formindex(after:)",
                        "title" : "func formIndex(after: inout Self.Index)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/index(of:)",
                        "title" : "func index(of: Self.Element) -> Self.Index?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/indices(of:)",
                        "title" : "func indices(of: Self.Element) -> RangeSet<Self.Index>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/indices(where:)",
                        "title" : "func indices(where: (Self.Element) throws -> Bool) rethrows -> RangeSet<Self.Index>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/makeiterator()",
                        "title" : "func makeIterator() -> IndexingIterator<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/map(_:)-16k9f",
                        "title" : "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/prefix(_:)",
                        "title" : "func prefix(Int) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/prefix(through:)",
                        "title" : "func prefix(through: Self.Index) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/prefix(upto:)",
                        "title" : "func prefix(upTo: Self.Index) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/prefix(while:)",
                        "title" : "func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/randomelement()",
                        "title" : "func randomElement() -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/randomelement(using:)",
                        "title" : "func randomElement<T>(using: inout T) -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/ranges(of:)",
                        "title" : "func ranges<C>(of: C) -> [Range<Self.Index>]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/removingsubranges(_:)",
                        "title" : "func removingSubranges(RangeSet<Self.Index>) -> DiscontiguousSlice<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                        "title" : "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/split(separator:maxsplits:omittingemptysubsequences:)",
                        "title" : "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/suffix(from:)",
                        "title" : "func suffix(from: Self.Index) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/trimmingprefix(_:)",
                        "title" : "func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/trimmingprefix(while:)",
                        "title" : "func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "title" : "Subscripts",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/subscript(_:)",
                        "title" : "subscript(Index) -> FilePath.Component",
                        "type" : "subscript"
                      }
                    ],
                    "path" : "\/documentation\/systempackage\/filepath\/componentview\/collection-implementations",
                    "title" : "Collection Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/init(from:)",
                        "title" : "init(from: any Decoder) throws",
                        "type" : "init"
                      }
                    ],
                    "path" : "\/documentation\/systempackage\/filepath\/componentview\/decodable-implementations",
                    "title" : "Decodable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/systempackage\/filepath\/componentview\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/+(_:_:)-1z6n1",
                        "title" : "static func + <Other>(Other, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/+(_:_:)-3nxwl",
                        "title" : "static func + <Other>(Self, Other) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/+(_:_:)-7mzau",
                        "title" : "static func + <Other>(Self, Other) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/+=(_:_:)",
                        "title" : "static func += <Other>(inout Self, Other)",
                        "type" : "op"
                      },
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/init()",
                        "title" : "init()",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/init(_:)",
                        "title" : "init<S>(S)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/init(repeating:count:)",
                        "title" : "init(repeating: Self.Element, count: Int)",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/append(_:)",
                        "title" : "func append(Self.Element)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/append(contentsof:)",
                        "title" : "func append<S>(contentsOf: S)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/applying(_:)",
                        "title" : "func applying(CollectionDifference<Self.Element>) -> Self?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/filter(_:)",
                        "title" : "func filter((Self.Element) throws -> Bool) rethrows -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/insert(_:at:)",
                        "title" : "func insert(Self.Element, at: Self.Index)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/insert(contentsof:at:)",
                        "title" : "func insert<C>(contentsOf: C, at: Self.Index)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/poplast()",
                        "title" : "func popLast() -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/remove(at:)",
                        "title" : "func remove(at: Self.Index) -> Self.Element",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/removeall(keepingcapacity:)",
                        "title" : "func removeAll(keepingCapacity: Bool)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/removeall(where:)",
                        "title" : "func removeAll(where: (Self.Element) throws -> Bool) rethrows",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/removefirst()",
                        "title" : "func removeFirst() -> Self.Element",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/removefirst(_:)",
                        "title" : "func removeFirst(Int)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/removelast()",
                        "title" : "func removeLast() -> Self.Element",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/removelast(_:)",
                        "title" : "func removeLast(Int)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/removesubrange(_:)-3cad4",
                        "title" : "func removeSubrange(Range<Self.Index>)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/removesubrange(_:)-3vf0y",
                        "title" : "func removeSubrange<R>(R)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/removesubranges(_:)",
                        "title" : "func removeSubranges(RangeSet<Self.Index>)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/replace(_:with:maxreplacements:)",
                        "title" : "func replace<C, Replacement>(C, with: Replacement, maxReplacements: Int)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/replacesubrange(_:with:)-25m50",
                        "title" : "func replaceSubrange<C>(Range<Index>, with: C)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/replacesubrange(_:with:)-2i2i4",
                        "title" : "func replaceSubrange<C, R>(R, with: C)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/replacesubrange(_:with:)-409q4",
                        "title" : "func replaceSubrange<C>(Range<Self.Index>, with: C)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/replacing(_:with:maxreplacements:)",
                        "title" : "func replacing<C, Replacement>(C, with: Replacement, maxReplacements: Int) -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/replacing(_:with:subrange:maxreplacements:)",
                        "title" : "func replacing<C, Replacement>(C, with: Replacement, subrange: Range<Self.Index>, maxReplacements: Int) -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/reservecapacity(_:)",
                        "title" : "func reserveCapacity(Int)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/trimprefix(_:)",
                        "title" : "func trimPrefix<Prefix>(Prefix)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/trimprefix(while:)",
                        "title" : "func trimPrefix(while: (Self.Element) throws -> Bool) rethrows",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/systempackage\/filepath\/componentview\/rangereplaceablecollection-implementations",
                    "title" : "RangeReplaceableCollection Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/lazy",
                        "title" : "var lazy: LazySequence<Self>",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/allsatisfy(_:)",
                        "title" : "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/compactmap(_:)",
                        "title" : "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/contains(_:)",
                        "title" : "func contains(Self.Element) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/contains(where:)",
                        "title" : "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/count(where:)",
                        "title" : "func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/elementsequal(_:)",
                        "title" : "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/elementsequal(_:by:)",
                        "title" : "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/enumerated()",
                        "title" : "func enumerated() -> EnumeratedSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/first(where:)",
                        "title" : "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/flatmap(_:)-5e7fe",
                        "title" : "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/flatmap(_:)-73srw",
                        "title" : "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/foreach(_:)",
                        "title" : "func forEach((Self.Element) throws -> Void) rethrows",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/lexicographicallyprecedes(_:by:)",
                        "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/map(_:)-5gt6x",
                        "title" : "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/max(by:)",
                        "title" : "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/min(by:)",
                        "title" : "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/reduce(_:_:)",
                        "title" : "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/reduce(into:_:)",
                        "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/shuffled()",
                        "title" : "func shuffled() -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/shuffled(using:)",
                        "title" : "func shuffled<T>(using: inout T) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/sorted(by:)",
                        "title" : "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/starts(with:)",
                        "title" : "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/starts(with:by:)",
                        "title" : "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/withcontiguousstorageifavailable(_:)",
                        "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                        "type" : "method"
                      },
                      {
                        "title" : "Type Aliases",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/componentview\/element",
                        "title" : "FilePath.ComponentView.Element",
                        "type" : "typealias"
                      }
                    ],
                    "path" : "\/documentation\/systempackage\/filepath\/componentview\/sequence-implementations",
                    "title" : "Sequence Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/systempackage\/filepath\/componentview",
                "title" : "FilePath.ComponentView",
                "type" : "struct"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filepath\/root-swift.struct\/init(_:)",
                    "title" : "init?(String)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filepath\/root-swift.struct\/init(platformstring:)-167mq",
                    "title" : "init?(platformString: String)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filepath\/root-swift.struct\/init(platformstring:)-6dkk5",
                    "title" : "init?(platformString: [CInterop.PlatformChar])",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filepath\/root-swift.struct\/init(platformstring:)-70e7r",
                    "title" : "init?(platformString: UnsafePointer<CInterop.PlatformChar>)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filepath\/root-swift.struct\/init(platformstring:)-7bbn",
                    "title" : "init?(platformString: inout CInterop.PlatformChar)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filepath\/root-swift.struct\/string",
                    "title" : "var string: String",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filepath\/root-swift.struct\/withplatformstring(_:)",
                    "title" : "func withPlatformString<Result>((UnsafePointer<CInterop.PlatformChar>) throws -> Result) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/root-swift.struct\/debugdescription",
                        "title" : "var debugDescription: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/systempackage\/filepath\/root-swift.struct\/customdebugstringconvertible-implementations",
                    "title" : "CustomDebugStringConvertible Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/root-swift.struct\/description",
                        "title" : "var description: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/systempackage\/filepath\/root-swift.struct\/customstringconvertible-implementations",
                    "title" : "CustomStringConvertible Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/root-swift.struct\/init(from:)",
                        "title" : "init(from: any Decoder) throws",
                        "type" : "init"
                      }
                    ],
                    "path" : "\/documentation\/systempackage\/filepath\/root-swift.struct\/decodable-implementations",
                    "title" : "Decodable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/root-swift.struct\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/systempackage\/filepath\/root-swift.struct\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/root-swift.struct\/init(extendedgraphemeclusterliteral:)",
                        "title" : "init(extendedGraphemeClusterLiteral: Self.StringLiteralType)",
                        "type" : "init"
                      }
                    ],
                    "path" : "\/documentation\/systempackage\/filepath\/root-swift.struct\/expressiblebyextendedgraphemeclusterliteral-implementations",
                    "title" : "ExpressibleByExtendedGraphemeClusterLiteral Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/root-swift.struct\/init(stringliteral:)",
                        "title" : "init(stringLiteral: String)",
                        "type" : "init"
                      }
                    ],
                    "path" : "\/documentation\/systempackage\/filepath\/root-swift.struct\/expressiblebystringliteral-implementations",
                    "title" : "ExpressibleByStringLiteral Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/filepath\/root-swift.struct\/init(unicodescalarliteral:)",
                        "title" : "init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)",
                        "type" : "init"
                      }
                    ],
                    "path" : "\/documentation\/systempackage\/filepath\/root-swift.struct\/expressiblebyunicodescalarliteral-implementations",
                    "title" : "ExpressibleByUnicodeScalarLiteral Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/systempackage\/filepath\/root-swift.struct",
                "title" : "FilePath.Root",
                "type" : "struct"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/systempackage\/filepath\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/systempackage\/filepath\/init(_:)",
                "title" : "init(String)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/systempackage\/filepath\/init(cstring:)-2z6k3",
                "title" : "init(cString: inout CChar)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/systempackage\/filepath\/init(cstring:)-3138d",
                "title" : "init(cString: UnsafePointer<CChar>)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/systempackage\/filepath\/init(cstring:)-9dsvl",
                "title" : "init(cString: String)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/systempackage\/filepath\/init(cstring:)-btgb",
                "title" : "init(cString: [CChar])",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/systempackage\/filepath\/init(platformstring:)-32wc2",
                "title" : "init(platformString: [CInterop.PlatformChar])",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/systempackage\/filepath\/init(platformstring:)-332eg",
                "title" : "init(platformString: UnsafePointer<CInterop.PlatformChar>)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/systempackage\/filepath\/init(platformstring:)-5i31t",
                "title" : "init(platformString: inout CInterop.PlatformChar)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/systempackage\/filepath\/init(platformstring:)-6siab",
                "title" : "init(platformString: String)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/systempackage\/filepath\/init(root:_:)-6ds1r",
                "title" : "init(root: Root?, ComponentView.SubSequence)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/systempackage\/filepath\/init(root:_:)-95ak3",
                "title" : "init<C>(root: Root?, C)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/systempackage\/filepath\/init(root:components:)",
                "title" : "init(root: Root?, components: Component...)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/systempackage\/filepath\/components",
                "title" : "var components: ComponentView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/filepath\/extension",
                "title" : "var `extension`: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/filepath\/isabsolute",
                "title" : "var isAbsolute: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/filepath\/isempty",
                "title" : "var isEmpty: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/filepath\/islexicallynormal",
                "title" : "var isLexicallyNormal: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/filepath\/isrelative",
                "title" : "var isRelative: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/filepath\/lastcomponent",
                "title" : "var lastComponent: Component?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/filepath\/length",
                "title" : "var length: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/filepath\/root-swift.property",
                "title" : "var root: FilePath.Root?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/filepath\/stem",
                "title" : "var stem: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/filepath\/string",
                "title" : "var string: String",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/systempackage\/filepath\/append(_:)-1b40l",
                "title" : "func append(FilePath.Component)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/systempackage\/filepath\/append(_:)-57dea",
                "title" : "func append<C>(C)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/systempackage\/filepath\/append(_:)-6hbg3",
                "title" : "func append(String)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/systempackage\/filepath\/appending(_:)-3ii9y",
                "title" : "func appending<C>(C) -> FilePath",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/systempackage\/filepath\/appending(_:)-4lzfm",
                "title" : "func appending(Component) -> FilePath",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/systempackage\/filepath\/appending(_:)-qcql",
                "title" : "func appending(String) -> FilePath",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/systempackage\/filepath\/ends(with:)",
                "title" : "func ends(with: FilePath) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/systempackage\/filepath\/lexicallynormalize()",
                "title" : "func lexicallyNormalize()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/systempackage\/filepath\/lexicallynormalized()",
                "title" : "func lexicallyNormalized() -> FilePath",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/systempackage\/filepath\/lexicallyresolving(_:)",
                "title" : "func lexicallyResolving(FilePath) -> FilePath?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/systempackage\/filepath\/push(_:)",
                "title" : "func push(FilePath)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/systempackage\/filepath\/pushing(_:)",
                "title" : "func pushing(FilePath) -> FilePath",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/systempackage\/filepath\/removeall(keepingcapacity:)",
                "title" : "func removeAll(keepingCapacity: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/systempackage\/filepath\/removelastcomponent()",
                "title" : "func removeLastComponent() -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/systempackage\/filepath\/removeprefix(_:)",
                "title" : "func removePrefix(FilePath) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/systempackage\/filepath\/removinglastcomponent()",
                "title" : "func removingLastComponent() -> FilePath",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/systempackage\/filepath\/removingroot()",
                "title" : "func removingRoot() -> FilePath",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/systempackage\/filepath\/reservecapacity(_:)",
                "title" : "func reserveCapacity(Int)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/systempackage\/filepath\/starts(with:)",
                "title" : "func starts(with: FilePath) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/systempackage\/filepath\/withcstring(_:)",
                "title" : "func withCString<Result>((UnsafePointer<CChar>) throws -> Result) rethrows -> Result",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/systempackage\/filepath\/withplatformstring(_:)",
                "title" : "func withPlatformString<Result>((UnsafePointer<CInterop.PlatformChar>) throws -> Result) rethrows -> Result",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filepath\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/systempackage\/filepath\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filepath\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/systempackage\/filepath\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filepath\/init(from:)",
                    "title" : "init(from: any Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/systempackage\/filepath\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filepath\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/systempackage\/filepath\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filepath\/init(extendedgraphemeclusterliteral:)",
                    "title" : "init(extendedGraphemeClusterLiteral: Self.StringLiteralType)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/systempackage\/filepath\/expressiblebyextendedgraphemeclusterliteral-implementations",
                "title" : "ExpressibleByExtendedGraphemeClusterLiteral Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filepath\/init(stringliteral:)",
                    "title" : "init(stringLiteral: String)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/systempackage\/filepath\/expressiblebystringliteral-implementations",
                "title" : "ExpressibleByStringLiteral Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filepath\/init(unicodescalarliteral:)",
                    "title" : "init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/systempackage\/filepath\/expressiblebyunicodescalarliteral-implementations",
                "title" : "ExpressibleByUnicodeScalarLiteral Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/systempackage\/filepath",
            "title" : "FilePath",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/systempackage\/filepermissions\/init(rawvalue:)",
                "title" : "init(rawValue: CModeT)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/systempackage\/filepermissions\/rawvalue",
                "title" : "let rawValue: CModeT",
                "type" : "property"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/systempackage\/filepermissions\/groupexecute",
                "title" : "static var groupExecute: FilePermissions",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/filepermissions\/groupread",
                "title" : "static var groupRead: FilePermissions",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/filepermissions\/groupreadexecute",
                "title" : "static var groupReadExecute: FilePermissions",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/filepermissions\/groupreadwrite",
                "title" : "static var groupReadWrite: FilePermissions",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/filepermissions\/groupreadwriteexecute",
                "title" : "static var groupReadWriteExecute: FilePermissions",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/filepermissions\/groupwrite",
                "title" : "static var groupWrite: FilePermissions",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/filepermissions\/groupwriteexecute",
                "title" : "static var groupWriteExecute: FilePermissions",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/filepermissions\/otherexecute",
                "title" : "static var otherExecute: FilePermissions",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/filepermissions\/otherread",
                "title" : "static var otherRead: FilePermissions",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/filepermissions\/otherreadexecute",
                "title" : "static var otherReadExecute: FilePermissions",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/filepermissions\/otherreadwrite",
                "title" : "static var otherReadWrite: FilePermissions",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/filepermissions\/otherreadwriteexecute",
                "title" : "static var otherReadWriteExecute: FilePermissions",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/filepermissions\/otherwrite",
                "title" : "static var otherWrite: FilePermissions",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/filepermissions\/otherwriteexecute",
                "title" : "static var otherWriteExecute: FilePermissions",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/filepermissions\/ownerexecute",
                "title" : "static var ownerExecute: FilePermissions",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/filepermissions\/ownerread",
                "title" : "static var ownerRead: FilePermissions",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/filepermissions\/ownerreadexecute",
                "title" : "static var ownerReadExecute: FilePermissions",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/filepermissions\/ownerreadwrite",
                "title" : "static var ownerReadWrite: FilePermissions",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/filepermissions\/ownerreadwriteexecute",
                "title" : "static var ownerReadWriteExecute: FilePermissions",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/filepermissions\/ownerwrite",
                "title" : "static var ownerWrite: FilePermissions",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/filepermissions\/ownerwriteexecute",
                "title" : "static var ownerWriteExecute: FilePermissions",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/filepermissions\/savetext",
                "title" : "static var saveText: FilePermissions",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/filepermissions\/setgroupid",
                "title" : "static var setGroupID: FilePermissions",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/systempackage\/filepermissions\/setuserid",
                "title" : "static var setUserID: FilePermissions",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filepermissions\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/systempackage\/filepermissions\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filepermissions\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/systempackage\/filepermissions\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filepermissions\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/systempackage\/filepermissions\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filepermissions\/init()",
                    "title" : "init()",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filepermissions\/contains(_:)",
                    "title" : "func contains(Self) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filepermissions\/formintersection(_:)",
                    "title" : "func formIntersection(Self)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filepermissions\/formsymmetricdifference(_:)",
                    "title" : "func formSymmetricDifference(Self)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filepermissions\/formunion(_:)",
                    "title" : "func formUnion(Self)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filepermissions\/insert(_:)",
                    "title" : "func insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filepermissions\/intersection(_:)",
                    "title" : "func intersection(Self) -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filepermissions\/remove(_:)",
                    "title" : "func remove(Self.Element) -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filepermissions\/symmetricdifference(_:)",
                    "title" : "func symmetricDifference(Self) -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filepermissions\/union(_:)",
                    "title" : "func union(Self) -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filepermissions\/update(with:)",
                    "title" : "func update(with: Self.Element) -> Self.Element?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/systempackage\/filepermissions\/optionset-implementations",
                "title" : "OptionSet Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filepermissions\/init(from:)",
                    "title" : "init(from: any Decoder) throws",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filepermissions\/hashvalue",
                    "title" : "var hashValue: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filepermissions\/encode(to:)",
                    "title" : "func encode(to: any Encoder) throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filepermissions\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/systempackage\/filepermissions\/rawrepresentable-implementations",
                "title" : "RawRepresentable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filepermissions\/init(_:)",
                    "title" : "init<S>(S)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filepermissions\/init(arrayliteral:)",
                    "title" : "init(arrayLiteral: Self.Element...)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filepermissions\/isempty",
                    "title" : "var isEmpty: Bool",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filepermissions\/isdisjoint(with:)",
                    "title" : "func isDisjoint(with: Self) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filepermissions\/isstrictsubset(of:)",
                    "title" : "func isStrictSubset(of: Self) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filepermissions\/isstrictsuperset(of:)",
                    "title" : "func isStrictSuperset(of: Self) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filepermissions\/issubset(of:)",
                    "title" : "func isSubset(of: Self) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filepermissions\/issuperset(of:)",
                    "title" : "func isSuperset(of: Self) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filepermissions\/subtract(_:)",
                    "title" : "func subtract(Self)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/filepermissions\/subtracting(_:)",
                    "title" : "func subtracting(Self) -> Self",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/systempackage\/filepermissions\/setalgebra-implementations",
                "title" : "SetAlgebra Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/systempackage\/filepermissions",
            "title" : "FilePermissions",
            "type" : "struct"
          },
          {
            "title" : "Type Aliases",
            "type" : "groupMarker"
          },
          {
            "path" : "\/documentation\/systempackage\/cmodet",
            "title" : "CModeT",
            "type" : "typealias"
          },
          {
            "title" : "Enumerations",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/systempackage\/cinterop\/char",
                "title" : "CInterop.Char",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/systempackage\/cinterop\/mode",
                "title" : "CInterop.Mode",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/systempackage\/cinterop\/platformchar",
                "title" : "CInterop.PlatformChar",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/systempackage\/cinterop\/platformunicodeencoding",
                "title" : "CInterop.PlatformUnicodeEncoding",
                "type" : "typealias"
              }
            ],
            "path" : "\/documentation\/systempackage\/cinterop",
            "title" : "CInterop",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/mach\/port\/init()",
                    "title" : "init()",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/mach\/port\/init(name:)",
                    "title" : "init(name: mach_port_name_t)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/mach\/port\/init(name:context:)",
                    "title" : "init(name: mach_port_name_t, context: mach_port_context_t)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/mach\/port\/makesendcount",
                    "title" : "var makeSendCount: mach_port_mscount_t",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/mach\/port\/copysendright()",
                    "title" : "func copySendRight() throws -> Mach.Port<Mach.SendRight>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/mach\/port\/makesendonceright()",
                    "title" : "func makeSendOnceRight() -> Mach.Port<Mach.SendOnceRight>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/mach\/port\/makesendright()",
                    "title" : "func makeSendRight() -> Mach.Port<Mach.SendRight>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/mach\/port\/relinquish()-6sdin",
                    "title" : "func relinquish() -> (name: mach_port_name_t, context: mach_port_context_t)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/mach\/port\/relinquish()-71rkb",
                    "title" : "func relinquish() -> mach_port_name_t",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/mach\/port\/relinquish()-lvv3",
                    "title" : "func relinquish() -> mach_port_name_t",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/mach\/port\/unguardandrelinquish()",
                    "title" : "func unguardAndRelinquish() -> mach_port_name_t",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/mach\/port\/withborrowedname(body:)-89ybe",
                    "title" : "func withBorrowedName<ReturnType>(body: (mach_port_name_t) -> ReturnType) -> ReturnType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/mach\/port\/withborrowedname(body:)-9vvg4",
                    "title" : "func withBorrowedName<ReturnType>(body: (mach_port_name_t, mach_port_context_t) -> ReturnType) -> ReturnType",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/systempackage\/mach\/port",
                "title" : "Mach.Port",
                "type" : "struct"
              },
              {
                "path" : "\/documentation\/systempackage\/mach\/receiveright",
                "title" : "Mach.ReceiveRight",
                "type" : "struct"
              },
              {
                "path" : "\/documentation\/systempackage\/mach\/sendonceright",
                "title" : "Mach.SendOnceRight",
                "type" : "struct"
              },
              {
                "path" : "\/documentation\/systempackage\/mach\/sendright",
                "title" : "Mach.SendRight",
                "type" : "struct"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/systempackage\/mach\/portrighterror\/deadname",
                    "title" : "case deadName",
                    "type" : "case"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/systempackage\/mach\/portrighterror\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/systempackage\/mach\/portrighterror\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/systempackage\/mach\/portrighterror",
                "title" : "Mach.PortRightError",
                "type" : "enum"
              }
            ],
            "path" : "\/documentation\/systempackage\/mach",
            "title" : "Mach",
            "type" : "enum"
          }
        ],
        "path" : "\/documentation\/systempackage",
        "title" : "SystemPackage",
        "type" : "module"
      },
      {
        "children" : [
          {
            "title" : "Configuring Parse Server Swift",
            "type" : "groupMarker"
          },
          {
            "title" : "Adding ParseObjects",
            "type" : "groupMarker"
          },
          {
            "title" : "Cloud Code",
            "type" : "groupMarker"
          }
        ],
        "path" : "\/tutorials\/parseserverswift",
        "title" : "Welcome to ParseServerSwift",
        "type" : "overview"
      },
      {
        "children" : [
          {
            "title" : "Enumerations",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/_niobase64\/base64error\/invalidcharacter",
                "title" : "case invalidCharacter",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/_niobase64\/base64error\/invalidlength",
                "title" : "case invalidLength",
                "type" : "case"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/_niobase64\/base64error\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/_niobase64\/base64error\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/_niobase64\/base64error",
            "title" : "Base64Error",
            "type" : "enum"
          }
        ],
        "path" : "\/documentation\/_niobase64",
        "title" : "_NIOBase64",
        "type" : "module"
      },
      {
        "children" : [
          {
            "title" : "Structures",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/_niodatastructures\/priorityqueue\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/_niodatastructures\/priorityqueue\/count",
                "title" : "var count: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/_niodatastructures\/priorityqueue\/isempty",
                "title" : "var isEmpty: Bool",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/_niodatastructures\/priorityqueue\/clear()",
                "title" : "func clear()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/_niodatastructures\/priorityqueue\/peek()",
                "title" : "func peek() -> Element?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/_niodatastructures\/priorityqueue\/pop()",
                "title" : "func pop() -> Element?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/_niodatastructures\/priorityqueue\/push(_:)",
                "title" : "func push(Element)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/_niodatastructures\/priorityqueue\/remove(_:)",
                "title" : "func remove(Element)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/_niodatastructures\/priorityqueue\/removefirst(where:)",
                "title" : "func removeFirst(where: (Element) throws -> Bool) rethrows -> Element?",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/_niodatastructures\/priorityqueue\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/_niodatastructures\/priorityqueue\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/_niodatastructures\/priorityqueue\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/_niodatastructures\/priorityqueue\/==(_:_:)",
                    "title" : "static func == (PriorityQueue, PriorityQueue) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/_niodatastructures\/priorityqueue\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Structures",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/_niodatastructures\/priorityqueue\/iterator\/init(queue:)",
                        "title" : "init(queue: PriorityQueue<Element>)",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/_niodatastructures\/priorityqueue\/iterator\/next()",
                        "title" : "func next() -> Element?",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/_niodatastructures\/priorityqueue\/iterator",
                    "title" : "PriorityQueue.Iterator",
                    "type" : "struct"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/_niodatastructures\/priorityqueue\/lazy",
                    "title" : "var lazy: LazySequence<Self>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/_niodatastructures\/priorityqueue\/underestimatedcount",
                    "title" : "var underestimatedCount: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/_niodatastructures\/priorityqueue\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/_niodatastructures\/priorityqueue\/compactmap(_:)",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/_niodatastructures\/priorityqueue\/contains(_:)",
                    "title" : "func contains(Self.Element) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/_niodatastructures\/priorityqueue\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/_niodatastructures\/priorityqueue\/count(where:)",
                    "title" : "func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/_niodatastructures\/priorityqueue\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/_niodatastructures\/priorityqueue\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> DropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/_niodatastructures\/priorityqueue\/droplast(_:)",
                    "title" : "func dropLast(Int) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/_niodatastructures\/priorityqueue\/elementsequal(_:)",
                    "title" : "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/_niodatastructures\/priorityqueue\/elementsequal(_:by:)",
                    "title" : "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/_niodatastructures\/priorityqueue\/enumerated()",
                    "title" : "func enumerated() -> EnumeratedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/_niodatastructures\/priorityqueue\/filter(_:)",
                    "title" : "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/_niodatastructures\/priorityqueue\/first(where:)",
                    "title" : "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/_niodatastructures\/priorityqueue\/flatmap(_:)-1zatq",
                    "title" : "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/_niodatastructures\/priorityqueue\/flatmap(_:)-jpaz",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/_niodatastructures\/priorityqueue\/foreach(_:)",
                    "title" : "func forEach((Self.Element) throws -> Void) rethrows",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/_niodatastructures\/priorityqueue\/joined()",
                    "title" : "func joined() -> FlattenSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/_niodatastructures\/priorityqueue\/joined(separator:)-3cjzz",
                    "title" : "func joined<Separator>(separator: Separator) -> JoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/_niodatastructures\/priorityqueue\/joined(separator:)-4ifdp",
                    "title" : "func joined(separator: String) -> String",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/_niodatastructures\/priorityqueue\/lexicographicallyprecedes(_:)",
                    "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/_niodatastructures\/priorityqueue\/lexicographicallyprecedes(_:by:)",
                    "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/_niodatastructures\/priorityqueue\/makeiterator()",
                    "title" : "func makeIterator() -> Iterator",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/_niodatastructures\/priorityqueue\/map(_:)",
                    "title" : "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/_niodatastructures\/priorityqueue\/max()",
                    "title" : "func max() -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/_niodatastructures\/priorityqueue\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/_niodatastructures\/priorityqueue\/min()",
                    "title" : "func min() -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/_niodatastructures\/priorityqueue\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/_niodatastructures\/priorityqueue\/prefix(_:)",
                    "title" : "func prefix(Int) -> PrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/_niodatastructures\/priorityqueue\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/_niodatastructures\/priorityqueue\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/_niodatastructures\/priorityqueue\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/_niodatastructures\/priorityqueue\/reversed()",
                    "title" : "func reversed() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/_niodatastructures\/priorityqueue\/shuffled()",
                    "title" : "func shuffled() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/_niodatastructures\/priorityqueue\/shuffled(using:)",
                    "title" : "func shuffled<T>(using: inout T) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/_niodatastructures\/priorityqueue\/sorted()",
                    "title" : "func sorted() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/_niodatastructures\/priorityqueue\/sorted(by:)",
                    "title" : "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/_niodatastructures\/priorityqueue\/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                    "title" : "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/_niodatastructures\/priorityqueue\/split(separator:maxsplits:omittingemptysubsequences:)",
                    "title" : "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/_niodatastructures\/priorityqueue\/starts(with:)",
                    "title" : "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/_niodatastructures\/priorityqueue\/starts(with:by:)",
                    "title" : "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/_niodatastructures\/priorityqueue\/suffix(_:)",
                    "title" : "func suffix(Int) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/_niodatastructures\/priorityqueue\/withcontiguousstorageifavailable(_:)",
                    "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/_niodatastructures\/priorityqueue\/sequence-implementations",
                "title" : "Sequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/_niodatastructures\/priorityqueue",
            "title" : "PriorityQueue",
            "type" : "struct"
          }
        ],
        "path" : "\/documentation\/_niodatastructures",
        "title" : "_NIODataStructures",
        "type" : "module"
      }
    ]
  },
  "schemaVersion" : {
    "major" : 0,
    "minor" : 1,
    "patch" : 2
  }
}